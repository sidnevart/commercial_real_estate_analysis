#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import asyncio
import logging
from core.config import CONFIG
from bot.bot_service import bot_service
from core.models import Lot

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_test_lots_from_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
    test_lots_data = [
        {
            "id": "TEST_001",
            "name": "–ù–µ–∂–∏–ª–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –ì–∞–≥–∞—Ä–∏–Ω–∞ (25.91%)",
            "address": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥. –ö–ª–∏–Ω, —É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥.6",
            "area": 562.8,
            "price": 16130568,
            "annual_yield_percent": 0.2591,  # 25.91% –∫–∞–∫ –¥—Ä–æ–±—å
            "market_deviation_percent": -0.185,  # -18.5%
            "capitalization_rub": 2800000,
            "auction_url": "https://torgi.gov.ru/new/public/lots/lot/22000030890000000173_1"
        },
        {
            "id": "TEST_002", 
            "name": "–ù–µ–∂–∏–ª–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –≤ –û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ (87.77%)",
            "address": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥. –û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 57",
            "area": 68.9,
            "price": 1503000,
            "annual_yield_percent": 0.8777,  # 87.77%
            "market_deviation_percent": 0.0,
            "capitalization_rub": 1200000,
            "auction_url": "https://torgi.gov.ru/new/public/lots/lot/21000004710000018748_1"
        },
        {
            "id": "TEST_003",
            "name": "–ù–µ–∂–∏–ª–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –°—Ç–∞—Å–æ–≤–æ–π (112.89%)", 
            "address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –°—Ç–∞—Å–æ–≤–æ–π, –¥. 3/27",
            "area": 270.5,
            "price": 13937000,
            "annual_yield_percent": 1.1289,  # 112.89%
            "market_deviation_percent": 0.0,
            "capitalization_rub": 1500000,
            "auction_url": "https://torgi.gov.ru/new/public/lots/lot/21000005000000025768_1"
        },
        {
            "id": "TEST_004",
            "name": "–ü–æ–º–µ—â–µ–Ω–∏–µ –≤ –õ—ã—Ç–∫–∞—Ä–∏–Ω–æ (32.09%)",
            "address": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥. –õ—ã—Ç–∫–∞—Ä–∏–Ω–æ, —É–ª. –û–∫—Ç—è–±—Ä—å—Å–∫–∞—è, –¥. 7/8",
            "area": 85.4,
            "price": 5270000,
            "annual_yield_percent": 0.3209,  # 32.09%
            "market_deviation_percent": 0.0,
            "capitalization_rub": 900000,
            "auction_url": "https://torgi.gov.ru/new/public/lots/lot/21000004710000018686_1"
        },
        {
            "id": "TEST_005",
            "name": "–ù–µ–∂–∏–ª–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –ö—Ä—ã–ª–∞—Ç—Å–∫–æ–π (40.72%)",
            "address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ö—Ä—ã–ª–∞—Ç—Å–∫–∞—è, –¥. 45, –∫–æ—Ä–ø. 1",
            "area": 615.1,
            "price": 97216000,
            "annual_yield_percent": 0.4072,  # 40.72%
            "market_deviation_percent": -0.35,  # -35%
            "capitalization_rub": 63409192,
            "auction_url": "https://torgi.gov.ru/new/public/lots/lot/21000005000000025763_1"
        },
        {
            "id": "TEST_006",
            "name": "–û–±—ã—á–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ (8.16% - –Ω–∏–∑–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å)",
            "address": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥. –ü–æ–¥–æ–ª—å—Å–∫, —É–ª. –ü—Ä–∞–≤–¥—ã, –¥. 20",
            "area": 84.6,
            "price": 9745920,
            "annual_yield_percent": 0.0816,  # 8.16%
            "market_deviation_percent": 0.0,
            "capitalization_rub": 0,
            "auction_url": "https://torgi.gov.ru/new/public/lots/lot/21000004710000018749_1"
        }
    ]
    
    lots = []
    for data in test_lots_data:
        lot = Lot(
            id=data["id"],
            name=data["name"],
            address=data["address"],
            area=data["area"],
            price=data["price"],
            notice_number=f"TEST_{data['id']}",
            coords="55.7558,37.6176",  # –ú–æ—Å–∫–≤–∞
            lot_number="001/2024",
            auction_type="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω",
            sale_type="–ü—Ä–æ–¥–∞–∂–∞",
            law_reference="–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω ‚Ññ44-–§–ó",
            application_start="2024-07-01 09:00:00",
            application_end="2024-07-15 17:00:00", 
            auction_start="2024-07-20 10:00:00",
            cadastral_number="77:01:0001001:1001",
            property_category="–ù–µ–∂–∏–ª—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è",
            ownership_type="–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
            auction_step=100000,
            deposit=500000,
            recipient="–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞",
            recipient_inn="7701234567",
            recipient_kpp="770101001",
            bank_name="–ü–ê–û –°–ë–ï–†–ë–ê–ù–ö",
            bank_bic="044525225",
            bank_account="40102810445370000001",
            correspondent_account="30101810400000000225",
            auction_url=data["auction_url"]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        lot.annual_yield_percent = data["annual_yield_percent"]
        lot.market_deviation_percent = data["market_deviation_percent"]
        lot.capitalization_rub = data["capitalization_rub"]
        lot.market_price_per_sqm = 0.0
        lot.current_price_per_sqm = lot.price / lot.area if lot.area > 0 else 0
        lot.market_value = 0.0
        lot.monthly_gap = 0.0
        lot.annual_income = lot.annual_yield_percent * lot.price
        lot.average_rent_price_per_sqm = 0.0
        lot.sale_offers_count = 5
        lot.rent_offers_count = 10
        lot.filtered_sale_offers_count = 3
        lot.filtered_rent_offers_count = 8
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
        if lot.annual_yield_percent >= 0.15 and lot.capitalization_rub > 1000000:
            lot.status = "excellent"
            lot.plus_rental = 1
            lot.plus_sale = 1
            lot.plus_count = 2
        elif lot.annual_yield_percent >= 0.08 or lot.capitalization_rub > 500000:
            lot.status = "good"
            lot.plus_rental = 1 if lot.annual_yield_percent >= 0.08 else 0
            lot.plus_sale = 1 if lot.capitalization_rub > 500000 else 0
            lot.plus_count = lot.plus_rental + lot.plus_sale
        else:
            lot.status = "acceptable"
            lot.plus_rental = 0
            lot.plus_sale = 0
            lot.plus_count = 0
        
        lots.append(lot)
    
    return lots

async def test_notification_criteria():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üß™ –¢–ï–°–¢ –ö–†–ò–¢–ï–†–ò–ï–í –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    threshold = CONFIG.get('market_yield_threshold', 10)
    print(f"üìä –ü–æ—Ä–æ–≥ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏–∑ config: {threshold}%")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    try:
        bot_service.initialize()
        if not bot_service.is_enabled():
            print("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.yaml")
            return False
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ—Ç—ã
    test_lots = create_test_lots_from_table()
    print(f"üìã –°–æ–∑–¥–∞–Ω–æ {len(test_lots)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–æ—Ç–∞
    print(f"\nüìã –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    print("   #  –õ–æ—Ç                           –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å  –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ  –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    print("   " + "="*90)
    
    lots_to_notify = []
    
    for i, lot in enumerate(test_lots, 1):
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–µ—Ç–æ–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        should_notify = False
        notification_reason = ""
        
        if hasattr(bot_service, 'bot') and hasattr(bot_service.bot, '_should_notify_about_lot'):
            should_notify = bot_service.bot._should_notify_about_lot(lot)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            yield_threshold = CONFIG.get('market_yield_threshold', 10)
            if yield_threshold > 1:
                yield_threshold = yield_threshold / 100
            
            reasons = []
            if lot.annual_yield_percent >= yield_threshold:
                reasons.append(f"–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {lot.annual_yield_percent*100:.1f}%")
            if hasattr(lot, 'market_deviation_percent') and lot.market_deviation_percent <= -0.20:
                reasons.append(f"—Å–∫–∏–¥–∫–∞ {abs(lot.market_deviation_percent)*100:.1f}%")
            if hasattr(lot, 'capitalization_rub') and lot.capitalization_rub > 0:
                reasons.append(f"–∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è {lot.capitalization_rub:,.0f}‚ÇΩ")
            
            notification_reason = ", ".join(reasons) if reasons else "–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º"
        
        if should_notify:
            lots_to_notify.append(lot)
        
        deviation_str = f"{lot.market_deviation_percent*100:+6.1f}%" if hasattr(lot, 'market_deviation_percent') else "–Ω/–¥"
        cap_str = f"{lot.capitalization_rub:10,.0f}‚ÇΩ" if hasattr(lot, 'capitalization_rub') else "–Ω/–¥"
        notify_str = f"{'‚úÖ –î–ê' if should_notify else '‚ùå –ù–ï–¢'} ({notification_reason})"
        
        print(f"   {i:2d}. {lot.name[:29]:29s} | {lot.annual_yield_percent*100:7.1f}% | {deviation_str:9s} | {cap_str:12s} | {notify_str}")
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: {len(test_lots)}")
    print(f"   ‚Ä¢ –ü–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(lots_to_notify)}")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö: {len(lots_to_notify)/len(test_lots)*100:.1f}%")
    
    return lots_to_notify

async def test_message_sending():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"\nüì± –¢–ï–°–¢ –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    lots_to_notify = await test_notification_criteria()
    
    if not lots_to_notify:
        print("‚ùå –ù–µ—Ç –ª–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return False
    
    print(f"üì§ –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(lots_to_notify)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    if hasattr(bot_service, 'bot') and hasattr(bot_service.bot, '_load_subscribers'):
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")
        await bot_service.bot._load_subscribers()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏
    if hasattr(bot_service, 'bot') and hasattr(bot_service.bot, 'subscribers'):
        subscribers_count = len(bot_service.bot.subscribers)
        print(f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}")
        
        if subscribers_count == 0:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤! –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞:")
            print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python run_bot.py")
            print("   2. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /subscribe")
            print("   3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç")
            print("\nüí° –ò–õ–ò –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤ —Ç–µ—Å—Ç:")
            
            # –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–î–ü–ò–°–ß–ò–ö–ê –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –î–õ–Ø –¢–ï–°–¢–ê
            bot_service.bot.subscribers.add(764315256)  # –í–∞—à chat_id
            await bot_service.bot._save_subscribers()
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: 764315256")
            subscribers_count = 1
        
        print(f"üë• –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞–∂–¥–æ–≥–æ –ª–æ—Ç–∞
    success_count = 0
    
    for i, lot in enumerate(lots_to_notify, 1):
        try:
            print(f"\nüì© –û—Ç–ø—Ä–∞–≤–∫–∞ {i}/{len(lots_to_notify)}: {lot.name[:50]}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot_service.notify_new_lots([lot])
            
            print(f"‚úÖ –õ–æ—Ç {lot.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            success_count += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(2)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ—Ç–∞ {lot.id}: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{len(lots_to_notify)}")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_count/len(lots_to_notify)*100:.1f}%")
    
    return success_count > 0

async def test_daily_summary():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
    print(f"\nüìä –¢–ï–°–¢ –ï–ñ–ï–î–ù–ï–í–ù–û–ô –°–í–û–î–ö–ò")
    print("=" * 40)
    
    try:
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_lots = create_test_lots_from_table()
        
        threshold = CONFIG.get('market_yield_threshold', 10)
        if threshold > 1:
            threshold = threshold / 100
            
        recommended_count = sum(1 for lot in test_lots if lot.annual_yield_percent >= threshold)
        
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–≤–æ–¥–∫–∏:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: {len(test_lots)}")
        print(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö: {recommended_count}")
        print(f"   ‚Ä¢ –ü–æ—Ä–æ–≥ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {threshold*100:.1f}%")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
        await bot_service.send_daily_summary(len(test_lots), recommended_count)
        
        print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏: {e}")
        return False

async def full_notification_test():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üöÄ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 80)
    
    results = {
        "criteria_test": False,
        "message_sending": False, 
        "daily_summary": False
    }
    
    try:
        # 1. –¢–µ—Å—Ç –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        print("üîç –®–ê–ì 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤...")
        lots_to_notify = await test_notification_criteria()
        results["criteria_test"] = len(lots_to_notify) > 0
        
        # 2. –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        print("\nüì± –®–ê–ì 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        results["message_sending"] = await test_message_sending()
        
        # 3. –¢–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏
        print("\nüìä –®–ê–ì 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏...")
        results["daily_summary"] = await test_daily_summary()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 50)
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, passed in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if passed else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   ‚Ä¢ {test_name}: {status}")
    
    print(f"\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(full_notification_test())