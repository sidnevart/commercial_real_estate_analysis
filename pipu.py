#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–ª–æ—â–∞–¥–∏ –∏–∑ Google Sheets
"""
from parser.google_sheets import _svc, GSHEET_ID

def diagnose_area_parsing():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –ø–ª–æ—â–∞–¥–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê –ü–õ–û–©–ê–î–ò")
    print("=" * 50)
    
    # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π UUID
    test_uuid = "fc6c1435-53b1-489e-8437-abf4838f8b8a"
    
    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        result = _svc.spreadsheets().values().get(
            spreadsheetId=GSHEET_ID,
            range="lots_all!A1:AC10"  # –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏
        ).execute()
        
        values = result.get('values', [])
        
        if not values:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = values[0] if len(values) > 0 else []
        print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫:")
        for i, header in enumerate(headers):
            print(f"   {i:2d}. {header}")
        
        # –ò—â–µ–º –Ω–∞—à—É —Å—Ç—Ä–æ–∫—É
        print(f"\nüîç –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å UUID: {test_uuid}")
        
        for row_idx, row in enumerate(values[1:], 1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if len(row) > 17 and row[17] == test_uuid:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {row_idx}:")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–∞–º –∫–æ–ª–æ–Ω–∫–∏
                important_columns = [0, 1, 2, 5, 8, 17]  # id, name, address, area, price, uuid
                
                for col_idx in important_columns:
                    if col_idx < len(row):
                        col_name = headers[col_idx] if col_idx < len(headers) else f"Column_{col_idx}"
                        value = row[col_idx]
                        print(f"   {col_idx:2d}. {col_name}: '{value}'")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–æ—â–∞–¥—å
                print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–õ–û–©–ê–î–ò:")
                if len(row) > 5:
                    area_raw = row[5]
                    print(f"   ‚Ä¢ –°—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{area_raw}'")
                    print(f"   ‚Ä¢ –¢–∏–ø: {type(area_raw)}")
                    print(f"   ‚Ä¢ –î–ª–∏–Ω–∞: {len(area_raw)}")
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
                    print(f"   ‚Ä¢ –ü–æ–ø—ã—Ç–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
                    
                    try:
                        # –°–ø–æ—Å–æ–± 1: –ø—Ä—è–º–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                        area1 = float(area_raw)
                        print(f"     1. float(area_raw): {area1}")
                    except:
                        print(f"     1. float(area_raw): –û–®–ò–ë–ö–ê")
                    
                    try:
                        # –°–ø–æ—Å–æ–± 2: —É–±–∏—Ä–∞–µ–º ' –º¬≤'
                        area2 = float(area_raw.replace(' –º¬≤', ''))
                        print(f"     2. –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è ' –º¬≤': {area2}")
                    except:
                        print(f"     2. –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è ' –º¬≤': –û–®–ò–ë–ö–ê")
                    
                    try:
                        # –°–ø–æ—Å–æ–± 3: —É–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç–æ–π
                        import re
                        area_clean = re.sub(r'[^0-9.,]', '', area_raw)
                        area_clean = area_clean.replace(',', '.')
                        area3 = float(area_clean) if area_clean else 0
                        print(f"     3. –û—á–∏—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{area_clean}': {area3}")
                    except:
                        print(f"     3. –û—á–∏—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –û–®–ò–ë–ö–ê")
                
                return
        
        print(f"‚ùå –°—Ç—Ä–æ–∫–∞ —Å UUID {test_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    diagnose_area_parsing()