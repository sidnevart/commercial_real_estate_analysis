
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –ª–æ—Ç–æ–≤ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¶–ò–ê–ù
"""
# filepath: test_geocoding.py

import asyncio
import logging
import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from parser.address_parser import calculate_address_components
from parser.geo_utils import get_coords_by_address, calculate_distance
from parser.cian_minimal import fetch_nearby_offers, unformatted_address_to_cian_search_filter
from parser.torgi_async import fetch_lots

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
logger = logging.getLogger(__name__)

async def test_address_geocoding(address: str) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞: {address}")
    
    result = {
        "original_address": address,
        "address_components": None,
        "coordinates": None,
        "geocoding_success": False,
        "error": None
    }
    
    try:
        # 1. –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–¥—Ä–µ—Å–∞
        components = calculate_address_components(address)
        result["address_components"] = components
        logger.info(f"üìç –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: —Ä–∞–π–æ–Ω={components.get('district', '–Ω/–¥')}, "
                   f"—É–ª–∏—Ü–∞={components.get('street', '–Ω/–¥')}, "
                   f"–≥–æ—Ä–æ–¥={components.get('city', '–Ω/–¥')}, "
                   f"—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={components.get('confidence', 0):.2f}")
        
        # 2. –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        coords = await get_coords_by_address(address)
        if coords:
            result["coordinates"] = {"lon": coords[0], "lat": coords[1]}
            result["geocoding_success"] = True
            logger.info(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords[0]:.6f}, {coords[1]:.6f}")
        else:
            logger.warning("‚ùå –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            
    except Exception as e:
        result["error"] = str(e)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return result

async def test_lot_with_offers(lot_address: str, max_offers: int = 5) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ—Ç —Å –µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏"""
    logger.info(f"üè¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {lot_address}")
    
    result = {
        "lot_address": lot_address,
        "lot_coords": None,
        "search_filter": "",
        "offers_found": 0,
        "offers_geocoded": 0,
        "distances": [],
        "errors": []
    }
    
    try:
        # 1. –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –ª–æ—Ç–∞
        lot_coords = await get_coords_by_address(lot_address)
        if not lot_coords:
            result["errors"].append("–ù–µ —É–¥–∞–ª–æ—Å—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –ª–æ—Ç–∞")
            return result
            
        result["lot_coords"] = {"lon": lot_coords[0], "lat": lot_coords[1]}
        logger.info(f"üìç –õ–æ—Ç: {lot_coords[0]:.6f}, {lot_coords[1]:.6f}")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
        search_filter = unformatted_address_to_cian_search_filter(lot_address)
        result["search_filter"] = search_filter
        logger.info(f"üîç –§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞: {search_filter}")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        sale_offers, rent_offers = fetch_nearby_offers(search_filter, "test_uuid")
        all_offers = sale_offers + rent_offers
        result["offers_found"] = len(all_offers)
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(all_offers)}")
        
        # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        for i, offer in enumerate(all_offers[:max_offers]):
            logger.info(f"üìç –û–±—ä—è–≤–ª–µ–Ω–∏–µ {i+1}: {offer.address}")
            
            try:
                # –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                offer_coords = await get_coords_by_address(offer.address)
                if offer_coords:
                    result["offers_geocoded"] += 1
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    distance = await calculate_distance(lot_coords, offer_coords)
                    if distance:
                        result["distances"].append({
                            "offer_id": offer.id,
                            "offer_address": offer.address,
                            "offer_coords": {"lon": offer_coords[0], "lat": offer_coords[1]},
                            "distance_km": distance
                        })
                        logger.info(f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f} –∫–º")
                    else:
                        result["errors"].append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {offer.id}")
                else:
                    result["errors"].append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {offer.id}: {offer.address}")
                    
            except Exception as e:
                result["errors"].append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {offer.id}: {str(e)}")
                
    except Exception as e:
        result["errors"].append(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return result

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –ª–æ—Ç–æ–≤ (–º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    test_lot_addresses = [
        "–≥ –ú–æ—Å–∫–≤–∞, —É–ª –¢–≤–µ—Ä—Å–∫–∞—è, –¥–æ–º 7",
        "–ú–æ—Å–∫–≤–∞, –ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, –¥–æ–º 12",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥ –ü–æ–¥–æ–ª—å—Å–∫, —É–ª –ü—Ä–∞–≤–¥—ã, –¥–æ–º 20",
        "–≥ –ú–æ—Å–∫–≤–∞, –í–ê–û, –ü–µ—Ä–æ–≤–æ, —É–ª –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è, –¥ 42",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥ –•–∏–º–∫–∏, —É–ª –ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è, –¥–æ–º 4"
    ]
    
    # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    try:
        lots = await fetch_lots(max_pages=1)
        if lots:
            real_addresses = [lot.address for lot in lots[:3]]
            test_lot_addresses.extend(real_addresses)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞: {len(real_addresses)}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞: {e}")
    
    results = []
    
    for i, address in enumerate(test_lot_addresses[:5], 1):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5
        logger.info(f"\n{'='*60}")
        logger.info(f"üß™ –¢–ï–°–¢ {i}/{min(5, len(test_lot_addresses))}")
        logger.info(f"{'='*60}")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            simple_result = await test_address_geocoding(address)
            
            # –ï—Å–ª–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
            if simple_result["geocoding_success"]:
                lot_result = await test_lot_with_offers(address, max_offers=3)
                results.append(lot_result)
            else:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –∏–∑-–∑–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
                results.append({
                    "lot_address": address,
                    "error": "–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å"
                })
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {address}: {e}")
            results.append({
                "lot_address": address,
                "error": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            })
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        if i < len(test_lot_addresses):
            logger.info("‚è±Ô∏è –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
            await asyncio.sleep(3)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = int(asyncio.get_event_loop().time())
    results_file = f"geocoding_test_results_{timestamp}.json"
    
    with open(results_file, "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2, default=str)
    
    logger.info(f"\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    logger.info(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ª–æ—Ç–æ–≤: {len(results)}")
    successful_tests = [r for r in results if not r.get("error") and r.get("offers_geocoded", 0) > 0]
    logger.info(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(successful_tests)}")
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
    
    # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_offers = sum(r.get("offers_found", 0) for r in results)
    total_geocoded = sum(r.get("offers_geocoded", 0) for r in results)
    logger.info(f"–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total_offers}")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {total_geocoded}")
    if total_offers > 0:
        logger.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {total_geocoded/total_offers*100:.1f}%")

if __name__ == "__main__":
    asyncio.run(main())