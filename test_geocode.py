#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–ï–°–¢–û–í–´–ô —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥–µ–æ–∫–æ–¥–µ—Ä–∞–º–∏ –∏ GPT-—É–ª—É—á—à–µ–Ω–∏–µ–º
–ó–¥–µ—Å—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—ã –ø–µ—Ä–µ–¥ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
"""
# filepath: test_geocode.py

import asyncio
import logging
import sys
import json
import math
import re
import warnings
from pathlib import Path
from typing import List, Optional, Tuple, Dict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≥–µ–æ–ø–∞–∫–µ—Ç–æ–≤
warnings.filterwarnings("ignore", category=UserWarning, module="geopandas")
warnings.filterwarnings("ignore", category=FutureWarning, module="geopandas")

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from geopy.geocoders import Nominatim, Photon
    from geopy.exc import GeocoderTimedOut, GeocoderServiceError, GeocoderQuotaExceeded
    GEOPY_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è geopy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install geopy")
    GEOPY_AVAILABLE = False

from parser.address_parser import calculate_address_components
from core.gpt_tunnel_client import sync_chat

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
logger = logging.getLogger(__name__)

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ì–ï–û–ö–û–î–ï–†–û–í
# ============================================================================

if GEOPY_AVAILABLE:
    GEOCODERS = [
        ("Nominatim", Nominatim(
            user_agent="commercial_real_estate_test/1.0", 
            timeout=20
        )),
        ("Photon", Photon(timeout=15)),
    ]
else:
    GEOCODERS = []

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ú–æ—Å–∫–≤—ã –∏ –ú–û
MOSCOW_EXTENDED_BBOX = {
    'north': 57.5,
    'south': 54.5,
    'east': 40.5,
    'west': 35.0
}

# –ö—ç—à –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
_test_geocoding_cache = {}

# ============================================================================
# GPT-–£–õ–£–ß–®–ï–ù–ò–ï –ê–î–†–ï–°–û–í
# ============================================================================

def improve_address_with_gpt(address: str) -> str:
    """–£–ª—É—á—à–∞–µ—Ç –∞–¥—Ä–µ—Å —Å –ø–æ–º–æ—â—å—é GPT –¥–ª—è –ª—É—á—à–µ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not address or len(address) < 10:
        return address
    
    # –ü—Ä–æ—Å—Ç—ã–µ —Å–ª—É—á–∞–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT
    if any(marker in address.lower() for marker in ['—Ä–æ—Å—Å–∏—è,', 'moscow,', 'russia,']):
        return address
    
    try:
        prompt = f"""
        –£–ª—É—á—à–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∞–¥—Ä–µ—Å –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:
        "{address}"
        
        –ü—Ä–∞–≤–∏–ª–∞:
        1. –î–æ–±–∞–≤—å "–†–æ—Å—Å–∏—è," –≤ –Ω–∞—á–∞–ª–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–∞–Ω—ã
        2. –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–π: –≥. ‚Üí –≥–æ—Ä–æ–¥, —É–ª. ‚Üí —É–ª–∏—Ü–∞, –¥. ‚Üí –¥–æ–º
        3. –£–±–µ—Ä–∏ –ª–∏—à–Ω–µ–µ: –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä, —ç—Ç–∞–∂–∏, –æ—Ñ–∏—Å—ã
        4. –î–ª—è –ú–æ—Å–∫–≤—ã: —É–±–µ—Ä–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–∫—Ä—É–≥–∞, –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ —É–ª–∏—Ü—É
        5. –î–ª—è –ú–û: –æ—Å—Ç–∞–≤—å –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É
        6. –ò—Å–ø—Ä–∞–≤—å –æ–ø–µ—á–∞—Ç–∫–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
        
        –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
        """
        
        response = sync_chat(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=100
        )
        
        improved = response.strip().strip('"').strip("'")
        if len(improved) > 10 and len(improved) < len(address) * 2:
            logger.debug(f"GPT —É–ª—É—á—à–∏–ª: '{address}' ‚Üí '{improved}'")
            return improved
        else:
            logger.warning(f"GPT –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{improved}'")
            return address
            
    except Exception as e:
        logger.debug(f"GPT –æ—à–∏–±–∫–∞: {e}")
        return address

# ============================================================================
# –£–ú–ù–ê–Ø –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ê–î–†–ï–°–û–í
# ============================================================================

def create_address_variants(address: str) -> List[str]:
    """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not address:
        return []
    
    variants = []
    
    # 1. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
    variants.append(address)
    
    # 2. GPT-—É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
    try:
        improved = improve_address_with_gpt(address)
        if improved != address:
            variants.append(improved)
    except Exception as e:
        logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ GPT —É–ª—É—á—à–µ–Ω–∏—è: {e}")
    
    # 3. –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
    cleaned = re.sub(r'\s+', ' ', address.strip())
    if cleaned != address:
        variants.append(cleaned)
    
    # 4. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —á–∞—Å—Ç–µ–π
    parts = [p.strip() for p in cleaned.split(',')]
    if len(parts) > 1:
        seen_parts = []
        for part in parts:
            part_lower = part.lower()
            is_duplicate = False
            
            for seen in seen_parts:
                if (part_lower in seen.lower() or seen.lower() in part_lower) and len(part_lower) > 5:
                    is_duplicate = True
                    break
            
            if not is_duplicate:
                seen_parts.append(part)
        
        deduplicated = ', '.join(seen_parts)
        if deduplicated != cleaned:
            variants.append(deduplicated)
    
    # 5. –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
    standardized = address
    replacements = {
        r'\b–≥\.?\s*': '–≥–æ—Ä–æ–¥ ',
        r'\b—É–ª\.?\s*': '—É–ª–∏—Ü–∞ ',
        r'\b–¥\.?\s*': '–¥–æ–º ',
        r'\b–ø—Ä-—Ç\.?\s*': '–ø—Ä–æ—Å–ø–µ–∫—Ç ',
        r'\b–ø–µ—Ä\.?\s*': '–ø–µ—Ä–µ—É–ª–æ–∫ ',
        r'\b–Ω–∞–±\.?\s*': '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è ',
    }
    
    for pattern, replacement in replacements.items():
        standardized = re.sub(pattern, replacement, standardized, flags=re.IGNORECASE)
    
    if standardized != address:
        variants.append(standardized)
    
    # 6. –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ú–æ—Å–∫–≤—ã
    if '–º–æ—Å–∫–≤–∞' in address.lower():
        street_match = re.search(r'(?:—É–ª–∏—Ü–∞?|—É–ª\.?|–ø—Ä–æ—Å–ø–µ–∫—Ç|–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è|–±—É–ª—å–≤–∞—Ä)\s+([^,]+?)(?:,|\s+–¥–æ–º|\s+\d)', address, re.IGNORECASE)
        if street_match:
            street_part = street_match.group(0).strip()
            variants.extend([
                f"–ú–æ—Å–∫–≤–∞, {street_part}",
                f"Moscow, Russia, {street_part}",
                f"–†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞, {street_part}"
            ])
    
    # 7. –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ú–û
    elif '–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' in address.lower():
        city_match = re.search(r'(?:–≥–æ—Ä–æ–¥|–≥\.?)\s+([–ê-–Ø–∞-—è\-]+)', address, re.IGNORECASE)
        if city_match:
            city = city_match.group(1)
            variants.extend([
                f"–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, {city}",
                f"Moscow Oblast, Russia, {city}",
                f"{city}, Moscow Oblast, Russia"
            ])
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    unique_variants = []
    for variant in variants:
        if variant not in unique_variants and len(variant) > 5:
            unique_variants.append(variant)
    
    logger.debug(f"–°–æ–∑–¥–∞–Ω–æ {len(unique_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è: {address}")
    return unique_variants

# ============================================================================
# –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ï –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–ï
# ============================================================================

def is_reasonable_coordinates(lat: float, lon: float) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö"""
    return (MOSCOW_EXTENDED_BBOX['south'] <= lat <= MOSCOW_EXTENDED_BBOX['north'] and 
            MOSCOW_EXTENDED_BBOX['west'] <= lon <= MOSCOW_EXTENDED_BBOX['east'])

def try_geocode_with_geocoder(geocoder_name: str, geocoder, text: str) -> Optional[Tuple[float, float]]:
    """–ü—Ä–æ–±—É–µ—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –æ–¥–Ω–∏–º –≥–µ–æ–∫–æ–¥–µ—Ä–æ–º"""
    try:
        logger.debug(f"üîç {geocoder_name}: '{text}'")
        
        location = geocoder.geocode(
            text,
            exactly_one=True,
            timeout=15,
            language='ru' if hasattr(geocoder, 'language') else None
        )
        
        if location:
            coords = (location.longitude, location.latitude)
            logger.debug(f"‚úÖ {geocoder_name}: {coords}")
            
            if is_reasonable_coordinates(location.latitude, location.longitude):
                return coords
            else:
                logger.debug(f"‚ùå {geocoder_name}: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏")
                
    except (GeocoderTimedOut, GeocoderServiceError, GeocoderQuotaExceeded) as e:
        logger.debug(f"‚ö†Ô∏è {geocoder_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    except Exception as e:
        logger.debug(f"‚ùå {geocoder_name} –æ—à–∏–±–∫–∞: {e}")
        
    return None

async def test_geocode_address(address: str) -> Optional[Tuple[float, float]]:
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not address:
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if address in _test_geocoding_cache:
        logger.debug(f"üíæ –ö—ç—à: {address}")
        return _test_geocoding_cache[address]

    logger.info(f"üåç –ú—É–ª—å—Ç–∏-–≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: '{address}'")

    if not GEOPY_AVAILABLE:
        logger.warning("‚ùå geopy –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É")
        return None

    # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞
    address_variants = create_address_variants(address)
    logger.info(f"üìù –°–æ–∑–¥–∞–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(address_variants)}")

    # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    for i, variant in enumerate(address_variants, 1):
        logger.debug(f"üß™ –í–∞—Ä–∏–∞–Ω—Ç {i}/{len(address_variants)}: '{variant}'")
        
        for geocoder_name, geocoder in GEOCODERS:
            coords = try_geocode_with_geocoder(geocoder_name, geocoder, variant)
            if coords:
                logger.info(f"‚úÖ {geocoder_name} —É—Å–ø–µ—Ö: '{variant}' ‚Üí {coords}")
                _test_geocoding_cache[address] = coords
                return coords

    # –ö—ç—à–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á—É
    _test_geocoding_cache[address] = None
    logger.warning(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã: '{address}'")
    return None

# ============================================================================
# –†–ê–°–ß–ï–¢ –†–ê–°–°–¢–û–Ø–ù–ò–ô (–ø—Ä–æ—Å—Ç–æ–π)
# ============================================================================

def haversine_distance(p1: Tuple[float, float], p2: Tuple[float, float]) -> float:
    """–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π (—Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞)"""
    lon1, lat1 = p1
    lon2, lat2 = p2
    
    R = 6371.0  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    
    lat1_rad = math.radians(lat1)
    lat2_rad = math.radians(lat2)
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    
    a = (math.sin(dlat / 2) ** 2 + 
         math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2) ** 2)
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    
    return R * c

# ============================================================================
# –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

async def test_address_geocoding(address: str) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    logger.info(f"üîç –¢–ï–°–¢ –ê–î–†–ï–°–ê: {address}")
    
    result = {
        "original_address": address,
        "address_components": None,
        "coordinates": None,
        "geocoding_success": False,
        "variants_tried": 0,
        "successful_variant": None,
        "geocoder_used": None,
        "error": None
    }
    
    try:
        # 1. –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–¥—Ä–µ—Å–∞
        components = calculate_address_components(address)
        result["address_components"] = components
        logger.info(f"üìç –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: —Ä–∞–π–æ–Ω={components.get('district', '–Ω/–¥')}, "
                   f"—É–ª–∏—Ü–∞={components.get('street', '–Ω/–¥')}, "
                   f"–≥–æ—Ä–æ–¥={components.get('city', '–Ω/–¥')}, "
                   f"—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={components.get('confidence', 0):.2f}")
        
        # 2. –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        variants = create_address_variants(address)
        result["variants_tried"] = len(variants)
        logger.info(f"üîÑ –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(variants)}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        coords = await test_geocode_address(address)
        if coords:
            result["coordinates"] = {"lon": coords[0], "lat": coords[1]}
            result["geocoding_success"] = True
            logger.info(f"‚úÖ –£–°–ü–ï–•: {coords[0]:.6f}, {coords[1]:.6f}")
        else:
            logger.warning("‚ùå –ù–ï–£–î–ê–ß–ê: –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            
    except Exception as e:
        result["error"] = str(e)
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
    
    return result

async def test_mock_lot_with_offers(lot_address: str) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ—Ç —Å –º–æ–∫-–æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¶–ò–ê–ù)"""
    logger.info(f"üè¢ –¢–ï–°–¢ –õ–û–¢–ê: {lot_address}")
    
    result = {
        "lot_address": lot_address,
        "lot_coords": None,
        "mock_offers_tested": 0,
        "offers_geocoded": 0,
        "distances": [],
        "errors": []
    }
    
    try:
        # 1. –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –ª–æ—Ç–∞
        lot_coords = await test_geocode_address(lot_address)
        if not lot_coords:
            result["errors"].append("–ù–µ —É–¥–∞–ª–æ—Å—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –ª–æ—Ç–∞")
            return result
            
        result["lot_coords"] = {"lon": lot_coords[0], "lat": lot_coords[1]}
        logger.info(f"üìç –õ–æ—Ç: {lot_coords[0]:.6f}, {lot_coords[1]:.6f}")
        
        # 2. –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ä—è–¥–æ–º —Å –ª–æ—Ç–æ–º
        mock_offers = generate_mock_offers_near_lot(lot_address, lot_coords)
        result["mock_offers_tested"] = len(mock_offers)
        logger.info(f"üìã –°–æ–∑–¥–∞–Ω–æ –º–æ–∫-–æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(mock_offers)}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        for i, (offer_id, offer_address) in enumerate(mock_offers, 1):
            logger.info(f"üìç –û–±—ä—è–≤–ª–µ–Ω–∏–µ {i}: {offer_address}")
            
            try:
                offer_coords = await test_geocode_address(offer_address)
                if offer_coords:
                    result["offers_geocoded"] += 1
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    distance = haversine_distance(lot_coords, offer_coords)
                    result["distances"].append({
                        "offer_id": offer_id,
                        "offer_address": offer_address,
                        "offer_coords": {"lon": offer_coords[0], "lat": offer_coords[1]},
                        "distance_km": distance
                    })
                    logger.info(f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f} –∫–º")
                else:
                    result["errors"].append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å: {offer_address}")
                    
            except Exception as e:
                result["errors"].append(f"–û—à–∏–±–∫–∞ {offer_id}: {str(e)}")
                
    except Exception as e:
        result["errors"].append(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return result

def generate_mock_offers_near_lot(lot_address: str, lot_coords: Tuple[float, float]) -> List[Tuple[str, str]]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫-–æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ä—è–¥–æ–º —Å –ª–æ—Ç–æ–º"""
    mock_offers = []
    
    if '–º–æ—Å–∫–≤–∞' in lot_address.lower():
        # –ú–æ–∫-–æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ú–æ—Å–∫–≤—ã
        mock_offers = [
            ("mock_001", "–ú–æ—Å–∫–≤–∞, —É–ª–∏—Ü–∞ –¢–≤–µ—Ä—Å–∫–∞—è, –¥–æ–º 10"),
            ("mock_002", "–≥ –ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –¥–æ–º 1"),
            ("mock_003", "–ú–æ—Å–∫–≤–∞, –ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, –¥–æ–º 8"),
            ("mock_004", "–≥ –ú–æ—Å–∫–≤–∞, —É–ª –ê—Ä–±–∞—Ç, –¥–æ–º 15"),
            ("mock_005", "–ú–æ—Å–∫–≤–∞, –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥–æ–º 25")
        ]
    elif '–ø–æ–¥–æ–ª—å—Å–∫' in lot_address.lower():
        # –ú–æ–∫-–æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ü–æ–¥–æ–ª—å—Å–∫–∞
        mock_offers = [
            ("mock_101", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥ –ü–æ–¥–æ–ª—å—Å–∫, —É–ª –ü—Ä–∞–≤–¥—ã, –¥–æ–º 25"),
            ("mock_102", "–ü–æ–¥–æ–ª—å—Å–∫, —É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞, –¥–æ–º 5"),
            ("mock_103", "–≥ –ü–æ–¥–æ–ª—å—Å–∫, –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è —É–ª–∏—Ü–∞, –¥–æ–º 12"),
            ("mock_104", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ü–æ–¥–æ–ª—å—Å–∫, —É–ª –ë–æ–ª—å—à–∞—è –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è, –¥–æ–º 30")
        ]
    else:
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–æ–∫-–æ–±—ä—è–≤–ª–µ–Ω–∏—è
        mock_offers = [
            ("mock_201", "–ú–æ—Å–∫–≤–∞, —É–ª–∏—Ü–∞ –ú—è—Å–Ω–∏—Ü–∫–∞—è, –¥–æ–º 20"),
            ("mock_202", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥ –•–∏–º–∫–∏, —É–ª –õ–µ–Ω–∏–Ω–∞, –¥–æ–º 10"),
            ("mock_203", "–≥ –ú–æ—Å–∫–≤–∞, –°–∞–¥–æ–≤–æ–µ –∫–æ–ª—å—Ü–æ, –¥–æ–º 5")
        ]
    
    return mock_offers

# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# ============================================================================

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–µ–æ–∫–æ–¥–µ—Ä–æ–≤
    if not GEOPY_AVAILABLE:
        logger.error("‚ùå geopy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install geopy")
        return
    
    logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –≥–µ–æ–∫–æ–¥–µ—Ä–æ–≤: {len(GEOCODERS)}")
    for name, _ in GEOCODERS:
        logger.info(f"   - {name}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ - –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ
    test_addresses = [
        # –ü—Ä–æ—Å—Ç—ã–µ –º–æ—Å–∫–æ–≤—Å–∫–∏–µ –∞–¥—Ä–µ—Å–∞
        "–≥ –ú–æ—Å–∫–≤–∞, —É–ª –¢–≤–µ—Ä—Å–∫–∞—è, –¥–æ–º 7",
        "–ú–æ—Å–∫–≤–∞, –ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, –¥–æ–º 12",
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –ª–æ–≥–æ–≤
        "–æ–±–ª –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, –≥.–æ. –ü–æ–¥–æ–ª—å—Å–∫, –≥ –ü–æ–¥–æ–ª—å—Å–∫, —É–ª –ü—Ä–∞–≤–¥—ã, –¥–æ–º 20 –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥. –ü–æ–¥–æ–ª—å—Å–∫, —É–ª. –ü—Ä–∞–≤–¥—ã, –¥. 20, –ø–æ–º. 1",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥ –ü–æ–¥–æ–ª—å—Å–∫, —É–ª –ü—Ä–∞–≤–¥—ã, –¥–æ–º 20",
        
        # –ê–¥—Ä–µ—Å–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –æ–∫—Ä—É–≥–∞–º–∏
        "–≥ –ú–æ—Å–∫–≤–∞, –í–ê–û, –ü–µ—Ä–æ–≤–æ, —É–ª –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è, –¥ 42",
        "–ú–æ—Å–∫–≤–∞, –°–í–ê–û, —Ä–∞–π–æ–Ω –û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π, –ø—Ä–æ—Å–ø–µ–∫—Ç –ú–∏—Ä–∞, 119—Å536",
        
        # –ê–¥—Ä–µ—Å–∞ –ú–û
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥ –•–∏–º–∫–∏, —É–ª –ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è, –¥–æ–º 4",
        "–æ–±–ª –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, –≥ –î–æ–º–æ–¥–µ–¥–æ–≤–æ, –º–∫—Ä –°–µ–≤–µ—Ä–Ω—ã–π, —É–ª –°–æ–≤–µ—Ç—Å–∫–∞—è, –¥–æ–º 50",
        
        # –°–ª–æ–∂–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        "–≥ –ú–æ—Å–∫–≤–∞ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ –ë–∞—Å–º–∞–Ω–Ω—ã–π —É–ª –ü–æ–∫—Ä–æ–≤–∫–∞ –¥–æ–º 42",
        "–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥, –∫–æ—Ä–ø—É—Å 847"
    ]
    
    logger.info(f"üìù –ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: {len(test_addresses)}")
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å
    for i, address in enumerate(test_addresses, 1):
        logger.info(f"\n{'='*60}")
        logger.info(f"üß™ –¢–ï–°–¢ {i}/{len(test_addresses)}")
        logger.info(f"{'='*60}")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            address_result = await test_address_geocoding(address)
            
            # –ï—Å–ª–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å –º–æ–∫-–æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
            if address_result["geocoding_success"]:
                lot_result = await test_mock_lot_with_offers(address)
                lot_result["address_test"] = address_result
                results.append(lot_result)
            else:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–∞–¥—Ä–µ—Å –Ω–µ –≥–µ–æ–∫–æ–¥–∏—Ä—É–µ—Ç—Å—è)")
                results.append({
                    "lot_address": address,
                    "error": "–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å",
                    "address_test": address_result
                })
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            results.append({
                "lot_address": address,
                "error": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            })
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        if i < len(test_addresses):
            logger.info("‚è±Ô∏è –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...")
            await asyncio.sleep(2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = int(asyncio.get_event_loop().time())
    results_file = f"enhanced_geocoding_test_results_{timestamp}.json"
    
    with open(results_file, "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2, default=str)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info(f"\n{'='*60}")
    logger.info(f"üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info(f"{'='*60}")
    
    total_tests = len(results)
    successful_geocoding = len([r for r in results if not r.get("error")])
    successful_with_offers = len([r for r in results if r.get("offers_geocoded", 0) > 0])
    
    logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤: {successful_geocoding}")
    logger.info(f"–õ–æ—Ç–æ–≤ —Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏: {successful_with_offers}")
    
    if total_tests > 0:
        success_rate = successful_geocoding / total_tests * 100
        logger.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {success_rate:.1f}%")
    
    total_offers = sum(r.get("mock_offers_tested", 0) for r in results)
    total_geocoded_offers = sum(r.get("offers_geocoded", 0) for r in results)
    
    if total_offers > 0:
        offers_success_rate = total_geocoded_offers / total_offers * 100
        logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {offers_success_rate:.1f}%")
    
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    successful_examples = [r for r in results if not r.get("error")][:3]
    if successful_examples:
        logger.info(f"\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö:")
        for example in successful_examples:
            logger.info(f"   {example['lot_address'][:50]}...")
    
    failed_examples = [r for r in results if r.get("error")][:3]
    if failed_examples:
        logger.info(f"\n‚ùå –ü—Ä–∏–º–µ—Ä—ã –Ω–µ—É–¥–∞—á–Ω—ã—Ö:")
        for example in failed_examples:
            logger.info(f"   {example['lot_address'][:50]}... - {example['error']}")

if __name__ == "__main__":
    asyncio.run(main())