#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import asyncio
import logging
from typing import List
from core.models import Lot, PropertyClassification
from bot.bot_service import bot_service
from datetime import datetime
import uuid

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_test_lot() -> Lot:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    lot = Lot(
        id="TEST_LOT_001",
        name="–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –ê—Ä–±–∞—Ç–µ",
        address="–ú–æ—Å–∫–≤–∞, —É–ª. –ê—Ä–±–∞—Ç, 15",
        coords=(55.752004, 37.618423),  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê—Ä–±–∞—Ç–∞
        area=120.0,  # 120 –º¬≤
        price=25000000.0,  # 25 –º–ª–Ω —Ä—É–±–ª–µ–π
        notice_number="TEST-2025-001",
        lot_number=1,
        auction_type="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω",
        sale_type="–ü—Ä–æ–¥–∞–∂–∞",
        law_reference="–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω ‚Ññ44-–§–ó",
        application_start=datetime.now(),
        application_end=datetime.now(),
        auction_start=datetime.now(),
        cadastral_number="77:01:0001001:1234",
        property_category="–ù–µ–∂–∏–ª—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è",
        ownership_type="–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è",
        auction_step=1250000.0,  # 5% –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ü–µ–Ω—ã
        deposit=2500000.0,  # 10% –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ü–µ–Ω—ã
        recipient="–†–æ—Å–∏–º—É—â–µ—Å—Ç–≤–æ",
        recipient_inn="7710542117",
        recipient_kpp="771001001",
        bank_name="–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫",
        bank_bic="044525225",
        bank_account="40102810445370000023",
        correspondent_account="30101810400000000225",
        auction_url="https://torgi.gov.ru/new/public/lots/lot.html?id=test001",
        district="–ê—Ä–±–∞—Ç—Å–∫–∏–π"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    lot.market_price_per_sqm = 250000  # 250–∫ –∑–∞ –º¬≤
    lot.market_value = 30000000  # 30 –º–ª–Ω —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞
    lot.capitalization_rub = 2500000  # 2.5 –º–ª–Ω –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    lot.capitalization_percent = 12.5  # 12.5% –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    lot.monthly_gap = 150000  # 150–∫ –≤ –º–µ—Å—è—Ü –ì–ê–ü
    lot.annual_yield_percent = 15.2  # 15.2% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    lot.market_deviation_percent = -16.7  # -16.7% –æ—Ç —Ä—ã–Ω–∫–∞ (–≤—ã–≥–æ–¥–Ω–æ)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
    lot.classification = PropertyClassification(
        category="–°—Ç—Ä–∏—Ç-—Ä–∏—Ç–µ–π–ª",
        size_category="120-250 –º¬≤",
        has_basement=False,
        is_top_floor=False
    )
    
    return lot

async def demo_bot_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        bot_service.initialize()
        
        if not bot_service.is_enabled():
            logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ—Ç
        test_lot = create_test_lot()
        logger.info(f"üìä –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ—Ç: {test_lot.name}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        from bot.message_formatter import MessageFormatter
        
        message = MessageFormatter.format_lot_analysis(test_lot)
        logger.info("üìù –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª–æ—Ç–µ:")
        print("=" * 60)
        print(message)
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        from bot.telegram_bot import RealEstateBot
        bot_instance = RealEstateBot("7927196434:AAFFuvxIGSI3IWnkYbyNrEUPUAhdVsvoEnQ")
        should_notify = bot_instance._should_notify_about_lot(test_lot)
        
        logger.info(f"üîî –°—Ç–æ–∏—Ç –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {'–î–ê' if should_notify else '–ù–ï–¢'}")
        logger.info(f"   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {test_lot.annual_yield_percent:.1f}%")
        logger.info(f"   –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ä—ã–Ω–∫–∞: {test_lot.market_deviation_percent:.1f}%")
        logger.info(f"   –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {test_lot.capitalization_rub:,.0f} ‚ÇΩ")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        short_summary = MessageFormatter.format_short_lot_summary(test_lot)
        logger.info("üìã –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞:")
        print(short_summary)
        
        logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞...")
    
    await demo_bot_features()
    
    logger.info("üèÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())
