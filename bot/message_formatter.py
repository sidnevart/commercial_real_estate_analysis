"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
"""
import logging
from typing import List
from core.models import Lot, Offer

logger = logging.getLogger(__name__)

class MessageFormatter:
    @staticmethod
    def format_lot_analysis(lot: Lot) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞ –ø–æ –æ–±—Ä–∞–∑—Ü—É –∏–∑ –¢–ó"""
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message = f"üî∑ *–õ–æ—Ç ‚Ññ{lot.id} —Å–µ–≥–æ–¥–Ω—è*\n\n"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        message += f"üè¢ *–õ–æ—Ç:* {lot.name}\n"
        message += f"üìç *–ê–¥—Ä–µ—Å:* {lot.address}\n"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        category = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        if hasattr(lot, 'classification') and lot.classification:
            category = lot.classification.category or "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        message += f"üèóÔ∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n\n"
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        message += "üìä *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏*\n"
        message += f"‚Ä¢ *–ü–ª–æ—â–∞–¥—å:* {lot.area:,.0f} –º¬≤\n"
        
        # –¶–µ–Ω–∞ –∑–∞ –º¬≤ (—Ç–µ–∫—É—â–∞—è)
        current_price_per_sqm = lot.price / lot.area if lot.area > 0 else 0
        message += f"‚Ä¢ *–¶–µ–Ω–∞ –∑–∞ –º¬≤ (—Ç–µ–∫—É—â–∞—è):* {current_price_per_sqm:,.0f} ‚ÇΩ\n"
        
        # –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤
        market_price_per_sqm = getattr(lot, 'market_price_per_sqm', 0)
        message += f"‚Ä¢ *–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤:* {market_price_per_sqm:,.0f} ‚ÇΩ\n"
        
        # –û–±—â–∏–µ —Ü–µ–Ω—ã
        message += f"‚Ä¢ *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* {lot.price:,.0f} ‚ÇΩ\n"
        
        market_value = getattr(lot, 'market_value', 0)
        message += f"‚Ä¢ *–†—ã–Ω–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:* {market_value:,.0f} ‚ÇΩ\n"
        
        # –ì–ê–ü –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        monthly_gap = getattr(lot, 'monthly_gap', 0)
        message += f"‚Ä¢ *–ì–ê–ü:* {monthly_gap:,.0f} ‚ÇΩ/–º–µ—Å\n"
        
        annual_yield = getattr(lot, 'annual_yield_percent', 0)
        message += f"‚Ä¢ *–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:* {annual_yield:.1f}%\n"
        
        # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
        capitalization_rub = getattr(lot, 'capitalization_rub', 0)
        message += f"‚Ä¢ *–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:* {capitalization_rub:,.0f} ‚ÇΩ\n"
        
        # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ä—ã–Ω–∫–∞
        market_deviation = getattr(lot, 'market_deviation_percent', 0)
        deviation_emoji = "üìâ" if market_deviation < 0 else "üìà"
        message += f"‚Ä¢ *–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ä—ã–Ω–∫–∞:* {deviation_emoji} {market_deviation:.1f}%\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–∞—Ö
        message += "üèõÔ∏è *–ò–Ω—Ñ–æ –æ —Ç–æ—Ä–≥–∞—Ö*\n"
        message += f"‚Ä¢ *–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:* {lot.price:,.0f} ‚ÇΩ\n"
        message += f"‚Ä¢ *–ê—É–∫—Ü–∏–æ–Ω:* {lot.auction_type}\n"
        message += f"‚Ä¢ *–î–æ–∫—É–º–µ–Ω—Ç:* {lot.notice_number}\n\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ò–ò
        recommendation_emoji = "‚úÖ"
        recommendation_text = "—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ"
        
        # –õ–æ–≥–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Ä—ã–Ω–∫–∞
        if annual_yield > 15 or market_deviation < -25:
            recommendation_emoji = "‚úÖ"
            recommendation_text = "—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ"
        elif annual_yield > 10 or market_deviation < -15:
            recommendation_emoji = "‚ö†Ô∏è"
            recommendation_text = "—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å"
        else:
            recommendation_emoji = "‚ùå"
            recommendation_text = "–ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ"
        
        message += f"üß† *–ú–Ω–µ–Ω–∏–µ –ò–ò:* {recommendation_emoji} {recommendation_text}\n\n"
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ—Ä–≥–∏ (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –∫–Ω–æ–ø–∫–∞)
        message += f"üîó [–õ–æ—Ç –Ω–∞ torgi.gov.ru]({lot.auction_url})"
        
        return message
    
    @staticmethod
    def format_analogs_list(offers: List[Offer]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–æ–≥–æ–≤"""
        if not offers:
            return "‚ùå –ê–Ω–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–∏–ø—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        sale_offers = [o for o in offers if getattr(o, 'type', 'sale') == 'sale']
        rent_offers = [o for o in offers if getattr(o, 'type', 'rent') == 'rent']
        
        message = ""
        
        # –ü—Ä–æ–¥–∞–∂–∞
        if sale_offers:
            message += "üî∑ *–ü—Ä–æ–¥–∞–∂–∞:*\n"
            for i, offer in enumerate(sale_offers[:3], 1):  # –ú–∞–∫—Å–∏–º—É–º 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                price_per_sqm = offer.price / offer.area if offer.area > 0 else 0
                
                message += f"{i}. üìç {offer.address}\n"
                message += f"   ‚Ä¢ {offer.area:,.0f} –º¬≤\n"
                message += f"   ‚Ä¢ {price_per_sqm:,.0f} ‚ÇΩ/–º¬≤\n"
                message += f"   ‚Ä¢ *–¶–µ–Ω–∞:* {offer.price:,.0f} ‚ÇΩ\n"
                
                # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(offer, 'distance_to_lot') and offer.distance_to_lot:
                    message += f"   ‚Ä¢ *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {offer.distance_to_lot:.1f} –∫–º\n"
                
                # –°—Å—ã–ª–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(offer, 'url') and offer.url:
                    message += f"   üîó [–°—Å—ã–ª–∫–∞]({offer.url})\n"
                
                message += "\n"
        
        # –ê—Ä–µ–Ω–¥–∞
        if rent_offers:
            message += "üî∑ *–ê—Ä–µ–Ω–¥–∞:*\n"
            for i, offer in enumerate(rent_offers[:3], 1):  # –ú–∞–∫—Å–∏–º—É–º 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                price_per_sqm = offer.price / offer.area if offer.area > 0 else 0
                
                message += f"{i}. üìç {offer.address}\n"
                message += f"   ‚Ä¢ {offer.area:,.0f} –º¬≤\n"
                message += f"   ‚Ä¢ {price_per_sqm:,.0f} ‚ÇΩ/–º¬≤/–º–µ—Å\n"
                message += f"   ‚Ä¢ *–û–±—â–∞—è –∞—Ä–µ–Ω–¥–∞:* {offer.price:,.0f} ‚ÇΩ/–º–µ—Å\n"
                
                # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(offer, 'distance_to_lot') and offer.distance_to_lot:
                    message += f"   ‚Ä¢ *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {offer.distance_to_lot:.1f} –∫–º\n"
                
                # –°—Å—ã–ª–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(offer, 'url') and offer.url:
                    message += f"   üîó [–°—Å—ã–ª–∫–∞]({offer.url})\n"
                
                message += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_offers = len(offers)
        message += f"üìä *–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ:* {total_offers} –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
        if sale_offers and rent_offers:
            message += f" ({len(sale_offers)} –ø—Ä–æ–¥–∞–∂–∞, {len(rent_offers)} –∞—Ä–µ–Ω–¥–∞)"
        
        return message
    
    @staticmethod
    def format_error_message(error_text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        return f"‚ùå *–û—à–∏–±–∫–∞:* {error_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    
    @staticmethod
    def format_subscription_stats(total_lots: int, recommended_lots: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        return (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: {total_lots}\n"
            f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö: {recommended_lots}\n"
            f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞: {(recommended_lots/total_lots*100):.1f}%" 
            if total_lots > 0 else "üìä –°–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤ –Ω–µ –±—ã–ª–æ"
        )

    @staticmethod
    def format_short_lot_summary(lot) -> str:
        """–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤"""
        try:
            yield_percent = getattr(lot, 'annual_yield_percent', 0)
            price_per_sqm = lot.price / lot.area if lot.area > 0 else 0
            
            summary = f"üè¢ {lot.name[:50]}{'...' if len(lot.name) > 50 else ''}\n"
            summary += f"üìç {lot.address}\n"
            summary += f"üí∞ {price_per_sqm:,.0f} ‚ÇΩ/–º¬≤ ‚Ä¢ {lot.area:,.0f} –º¬≤"
            
            if yield_percent > 0:
                summary += f" ‚Ä¢ {yield_percent:.1f}% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
            
            return summary
            
        except Exception as e:
            logger.error(f"Error formatting lot summary: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ—Ç–∞ {getattr(lot, 'id', 'unknown')}"
