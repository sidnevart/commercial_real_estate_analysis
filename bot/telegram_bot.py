"""
Telegram Bot –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
"""
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Optional
from core.models import Lot, Offer
from core.config import CONFIG

logger = logging.getLogger(__name__)

class RealEstateBot:
    def __init__(self, token: str):
        try:
            from bot.message_formatter import MessageFormatter
            self.message_formatter = MessageFormatter()
            logger.info(f"Initializing bot with token: {token[:20]}...")
            self.bot = Bot(token=token)
            self.dp = Dispatcher()
            self.subscribers = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ chat_id –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            self.setup_handlers()
            logger.info(f"Bot initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize bot: {e}")
            raise
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.dp.message(Command("start"))(self.start_command)
        self.dp.message(Command("subscribe"))(self.subscribe_command)
        self.dp.message(Command("unsubscribe"))(self.unsubscribe_command)
        self.dp.message(Command("analogs"))(self.analogs_command)
        self.dp.message(Command("help"))(self.help_command)
        self.dp.callback_query()(self.handle_callback)
    
    async def start_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üè¢ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!*\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ –ª–æ—Ç—ã –Ω–∞ —Ç–æ—Ä–≥–∞—Ö –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ /subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ª–æ—Ç–∞—Ö\n"
            "‚Ä¢ /unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ /analogs [–∞–¥—Ä–µ—Å] - –Ω–∞–π—Ç–∏ –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞\n"
            "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –ª–æ—Ç–∞—Ö!"
        )
        
        await message.answer(welcome_text, parse_mode="Markdown")
    
    async def subscribe_command(self, message: types.Message):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        chat_id = message.chat.id
        self.subscribers.add(chat_id)
        
        await message.answer(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ª–æ—Ç–∞—Ö!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ª–æ—Ç–∞ —Å:\n"
            "‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ –†—ã–Ω–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ò–ò\n"
            "‚Ä¢ –°—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ç–æ—Ä–≥–∏"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        await self._save_subscribers()
    
    async def unsubscribe_command(self, message: types.Message):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_id = message.chat.id
        self.subscribers.discard(chat_id)
        
        await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ª–æ—Ç–∞—Ö.")
        await self._save_subscribers()
    
    async def analogs_command(self, message: types.Message):
        """–ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        command_parts = message.text.split(' ', 1)
        if len(command_parts) < 2:
            await message.answer(
                "üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤:\n"
                "–ü—Ä–∏–º–µ—Ä: `/analogs –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1`",
                parse_mode="Markdown"
            )
            return
        
        address = command_parts[1].strip()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        search_message = await message.answer(
            f"üîç –ò—â—É –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address}\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
        )
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
            from parser.cian_minimal import fetch_nearby_offers
            # from parser.geo_utils import filter_offers_by_distance  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            from .analog_search import AnalogSearchService
            
            # –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤
            offers = await AnalogSearchService.find_analogs_for_address(address, radius_km=3.0)
            
            if offers:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                from .message_formatter import MessageFormatter
                analogs_text = MessageFormatter.format_analogs_list(offers)
                
                await search_message.edit_text(
                    f"üìç *–ê–Ω–∞–ª–æ–≥–∏ –¥–ª—è: {address}*\n\n{analogs_text}",
                    parse_mode="Markdown"
                )
            else:
                await search_message.edit_text(
                    f"‚ùå –ê–Ω–∞–ª–æ–≥–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞ '{address}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –æ–±—â–∏–π –∞–¥—Ä–µ—Å –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ä–∞–π–æ–Ω."
                )
                
        except Exception as e:
            logger.error(f"Error searching analogs for {address}: {e}")
            await search_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∞–ª–æ–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def help_command(self, message: types.Message):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = (
            "ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "‚Ä¢ `/subscribe` - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ `/unsubscribe` - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ `/analogs [–∞–¥—Ä–µ—Å]` - –Ω–∞–π—Ç–∏ –∞–Ω–∞–ª–æ–≥–∏\n"
            "‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n"
            "‚Ä¢ `/analogs –ú–æ—Å–∫–≤–∞, –¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞, 1`\n"
            "‚Ä¢ `/analogs –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –•–∏–º–∫–∏`\n\n"
            "*–û –±–æ—Ç–µ:*\n"
            "–ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ—Ç—ã –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ —Ç–æ—Ä–≥–∞—Ö "
            "–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."
        )
        
        await message.answer(help_text, parse_mode="Markdown")
    
    async def handle_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        data = callback.data
        
        if data.startswith("analogs_"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –ª–æ—Ç–∞
            lot_uuid = data.replace("analogs_", "")
            
            await callback.answer("üîç –ò—â—É –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è –ª–æ—Ç–∞...")
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
                search_message = await callback.message.answer(
                    f"üîç –ò—â—É –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è –ª–æ—Ç–∞ {lot_uuid[:8]}...\n"
                    "–ü—Ä–æ–≤–µ—Ä—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–æ–≤..."
                )
                
                # –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞ –ø–æ UUID
                from .analog_search import AnalogSearchService
                offers = await AnalogSearchService.find_analogs_for_lot_uuid(lot_uuid, radius_km=3.0)
                
                if offers:
                    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–º –ª–æ—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    from parser.google_sheets import find_lot_by_uuid
                    lot = find_lot_by_uuid(lot_uuid)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    from .message_formatter import MessageFormatter
                    analogs_text = MessageFormatter.format_analogs_list(offers)
                    
                    lot_info = ""
                    if lot:
                        lot_info = f"üìç {lot.address}\nüìê {lot.area:,.0f} –º¬≤\n\n"
                    
                    await search_message.edit_text(
                        f"üìä *–ù–∞–π–¥–µ–Ω—ã –∞–Ω–∞–ª–æ–≥–∏*\n"
                        f"{lot_info}{analogs_text}",
                        parse_mode="Markdown"
                    )
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    from parser.google_sheets import find_lot_by_uuid
                    lot = find_lot_by_uuid(lot_uuid)
                    
                    lot_info = ""
                    if lot:
                        lot_info = f"üìç –ê–¥—Ä–µ—Å: {lot.address}\nüìê –ü–ª–æ—â–∞–¥—å: {lot.area:,.0f} –º¬≤\n\n"
                    
                    await search_message.edit_text(
                        f"‚ùå –ê–Ω–∞–ª–æ–≥–∏ –¥–ª—è –ª–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                        f"{lot_info}"
                        "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        "‚Ä¢ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
                        "‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–Ω–ª–∞–π–Ω-–ø–æ–∏—Å–∫–∞\n"
                        "‚Ä¢ –°–ª–∏—à–∫–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç"
                    )
                    
            except Exception as e:
                logger.error(f"Error in analogs callback for UUID {lot_uuid}: {e}")
                await callback.message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∞–ª–æ–≥–æ–≤.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/analogs [–∞–¥—Ä–µ—Å]`"
                )
        else:
            await callback.answer()
    
    async def send_lot_analysis(self, lot: Lot, chat_ids: List[int] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if chat_ids is None:
            chat_ids = list(self.subscribers)
        
        if not chat_ids:
            logger.info("No subscribers to send lot analysis")
            return
        
        from .message_formatter import MessageFormatter
        message_text = MessageFormatter.format_lot_analysis(lot)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Ç–æ—Ä–≥–∏", url=lot.auction_url)],
            [InlineKeyboardButton(text="üìä –ù–∞–π—Ç–∏ –∞–Ω–∞–ª–æ–≥–∏", callback_data=f"analogs_{lot.uuid}")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        failed_chats = []
        for chat_id in chat_ids:
            try:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                    disable_web_page_preview=True
                )
                await asyncio.sleep(0.1)  # –ò–∑–±–µ–≥–∞–µ–º rate limit
            except Exception as e:
                logger.error(f"Failed to send message to chat {chat_id}: {e}")
                failed_chats.append(chat_id)
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        for chat_id in failed_chats:
            self.subscribers.discard(chat_id)
        
        if failed_chats:
            await self._save_subscribers()
        
        logger.info(f"Lot analysis sent to {len(chat_ids) - len(failed_chats)} subscribers")
    
    async def notify_new_lots(self, lots: List[Lot]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ª–æ—Ç–∞—Ö"""
        if not lots or not self.subscribers:
            return
        
        logger.info(f"Sending notifications about {len(lots)} new lots to {len(self.subscribers)} subscribers")
        
        for lot in lots:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–æ—Ç –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            if self._should_notify_about_lot(lot):
                await self.send_lot_analysis(lot)
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏
    
    def _should_notify_about_lot(self, lot: Lot) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –ª–æ—Ç–µ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        
        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —É–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª—é—Å–∏–∫–æ–≤
        plus_count = getattr(lot, 'plus_count', 0)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 –ø–ª—é—Å–∏–∫ - —É–≤–µ–¥–æ–º–ª—è–µ–º
        if plus_count >= 1:
            return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –∫–∞–∫ fallback)
        yield_threshold = CONFIG.get('market_yield_threshold', 10)
        if yield_threshold > 1:
            yield_threshold = yield_threshold / 100
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        annual_yield = getattr(lot, 'annual_yield_percent', 0)
        if annual_yield >= yield_threshold:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        capitalization_percent = getattr(lot, 'capitalization_percent', 0)
        if capitalization_percent >= 0.15:  # 15% –∫–∞–∫ 0.15
            return True
        
        return False
    
    async def _save_subscribers(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            import json
            import os
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            bot_data_dir = "bot_data"
            if not os.path.exists(bot_data_dir):
                os.makedirs(bot_data_dir)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª
            subscribers_file = os.path.join(bot_data_dir, "subscribers.json")
            with open(subscribers_file, 'w') as f:
                json.dump(list(self.subscribers), f)
            
            logger.info(f"Subscribers saved: {len(self.subscribers)} total")
        except Exception as e:
            logger.error(f"Error saving subscribers: {e}")
    
    async def _load_subscribers(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            import json
            import os
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            bot_data_dir = "bot_data"
            if not os.path.exists(bot_data_dir):
                os.makedirs(bot_data_dir)
                logger.info("Created bot_data directory")
            
            subscribers_file = os.path.join(bot_data_dir, "subscribers.json")
            
            if os.path.exists(subscribers_file):
                with open(subscribers_file, 'r') as f:
                    subscribers_list = json.load(f)
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–∞
                    self.subscribers = set(int(sub) for sub in subscribers_list)
                    logger.info(f"‚úÖ Loaded {len(self.subscribers)} subscribers: {list(self.subscribers)}")
            else:
                self.subscribers = set()
                logger.info("No existing subscribers file, starting fresh")
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                with open(subscribers_file, 'w') as f:
                    json.dump([], f)
                logger.info("Created empty subscribers file")
                
        except Exception as e:
            logger.error(f"Error loading subscribers: {e}")
            self.subscribers = set()
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        await self._load_subscribers()
        logger.info("Starting Telegram bot polling...")
        
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"Bot polling error: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        await self.bot.session.close()
        logger.info("Telegram bot stopped")
