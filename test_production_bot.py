import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from core.models import Lot

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

def create_realistic_test_lots():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
    test_lots = [
        Lot(
            id="TEST_PROD_001",
            name="–ù–µ–∂–∏–ª–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π",
            address="–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 12",
            area=85.5,
            price=15500000,
            notice_number="32109000199000000042",
            coords="55.757465,37.614467",
            lot_number="001/2024",
            auction_type="–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –∞—Ä–µ–Ω–¥—ã",
            sale_type="–ê—É–∫—Ü–∏–æ–Ω",
            law_reference="–ü—Ä–∏–∫–∞–∑ ‚Ññ123 –æ—Ç 01.01.2024",
            application_start="2024-07-01 09:00:00",
            application_end="2024-07-15 17:00:00",
            auction_start="2024-07-20 10:00:00",
            cadastral_number="77:01:0001001:1001",
            property_category="–ù–µ–∂–∏–ª—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è",
            ownership_type="–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
            auction_step=500000,
            deposit=3100000,
            recipient="–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞",
            recipient_inn="7701234567",
            recipient_kpp="770101001",
            bank_name="–ü–ê–û –°–ë–ï–†–ë–ê–ù–ö",
            bank_bic="044525225",
            bank_account="40102810445370000001",
            correspondent_account="30101810400000000225",
            annual_yield_percent=16.2,
            capitalization_rub=2800000,
            market_deviation_percent=-18.5,
            auction_url="https://torgi.gov.ru/new/public/lots/lot.html?id=TEST_001"
        ),
        Lot(
            id="TEST_PROD_002", 
            name="–û—Ñ–∏—Å–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –≤ –ë–¶",
            address="–ú–æ—Å–∫–≤–∞, –ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è –Ω–∞–±., –¥. 6",
            area=120.0,
            price=45000000,
            notice_number="77109000199000000043",
            coords="55.747890,37.538654",
            lot_number="002/2024",
            auction_type="–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –∞—Ä–µ–Ω–¥—ã",
            sale_type="–ê—É–∫—Ü–∏–æ–Ω",
            law_reference="–ü—Ä–∏–∫–∞–∑ ‚Ññ124 –æ—Ç 01.01.2024",
            application_start="2024-07-05 09:00:00",
            application_end="2024-07-19 17:00:00",
            auction_start="2024-07-24 11:00:00",
            cadastral_number="77:01:0001001:1002",
            property_category="–û—Ñ–∏—Å–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è",
            ownership_type="–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
            auction_step=1500000,
            deposit=9000000,
            recipient="–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞",
            recipient_inn="7701234567",
            recipient_kpp="770101001",
            bank_name="–ü–ê–û –°–ë–ï–†–ë–ê–ù–ö",
            bank_bic="044525225",
            bank_account="40102810445370000001",
            correspondent_account="30101810400000000225",
            annual_yield_percent=8.1,
            capitalization_rub=1200000,
            market_deviation_percent=-8.2,
            auction_url="https://torgi.gov.ru/new/public/lots/lot.html?id=TEST_002"
        ),
        Lot(
            id="TEST_PROD_003",
            name="–¢–æ—Ä–≥–æ–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –≤ –¢–¶", 
            address="–ü–æ–¥–æ–ª—å—Å–∫, —É–ª. –ü—Ä–∞–≤–¥—ã, –¥. 20",
            area=75.0,
            price=8500000,
            notice_number="50109000199000000044",
            coords="55.423456,37.545678",
            lot_number="003/2024",
            auction_type="–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –∞—Ä–µ–Ω–¥—ã",
            sale_type="–ê—É–∫—Ü–∏–æ–Ω",
            law_reference="–ü—Ä–∏–∫–∞–∑ ‚Ññ125 –æ—Ç 01.01.2024",
            application_start="2024-07-03 09:00:00",
            application_end="2024-07-17 17:00:00",
            auction_start="2024-07-22 14:00:00",
            cadastral_number="50:55:0001001:1003",
            property_category="–¢–æ—Ä–≥–æ–≤—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è",
            ownership_type="–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
            auction_step=300000,
            deposit=1700000,
            recipient="–ö–æ–º–∏—Ç–µ—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–º—É—â–µ—Å—Ç–≤–æ–º",
            recipient_inn="5001234567",
            recipient_kpp="500101001",
            bank_name="–ü–ê–û –°–ë–ï–†–ë–ê–ù–ö",
            bank_bic="044525225",
            bank_account="40102810445370000002",
            correspondent_account="30101810400000000225",
            annual_yield_percent=22.5,
            capitalization_rub=3500000,
            market_deviation_percent=-25.8,
            auction_url="https://torgi.gov.ru/new/public/lots/lot.html?id=TEST_003"
        )
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    for lot in test_lots:
        lot.market_price_per_sqm = 0.0
        lot.current_price_per_sqm = lot.price / lot.area if lot.area > 0 else 0
        lot.market_value = 0.0
        lot.monthly_gap = 0.0
        lot.annual_income = 0.0
        lot.average_rent_price_per_sqm = 0.0
        lot.sale_offers_count = 0
        lot.rent_offers_count = 0
        lot.filtered_sale_offers_count = 0
        lot.filtered_rent_offers_count = 0
        lot.plus_rental = 1 if lot.annual_yield_percent >= 15 else 0
        lot.plus_sale = 1 if getattr(lot, 'capitalization_rub', 0) > 1000000 else 0
        lot.plus_count = lot.plus_rental + lot.plus_sale
        
        if lot.plus_count == 2:
            lot.status = "excellent"
        elif lot.plus_count == 1:
            lot.status = "good"
        else:
            lot.status = "acceptable"
    
    return test_lots

async def test_bot_production_simulation():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ production —É—Å–ª–æ–≤–∏—è—Ö"""
    logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–û–¢–ê –í PRODUCTION –£–°–õ–û–í–ò–Ø–•")
    logger.info("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ bot_service
    try:
        from bot.bot_service import bot_service
        logger.info("‚úÖ bot_service –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot_service: {e}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    try:
        bot_service.initialize()
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è bot_service –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ config.yaml —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram")
        return
    
    if not bot_service.is_enabled():
        logger.error("‚ùå –ë–æ—Ç –Ω–µ –≤–∫–ª—é—á–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.yaml")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ config.yaml —É–∫–∞–∑–∞–Ω—ã:")
        logger.info("   ‚Ä¢ telegram_bot_token: '–≤–∞—à_—Ç–æ–∫–µ–Ω'")
        logger.info("   ‚Ä¢ telegram_chat_id: '–≤–∞—à_chat_id'")
        logger.info("   ‚Ä¢ telegram_enabled: true")
        return
    
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ—Ç—ã
    try:
        test_lots = create_realistic_test_lots()
        logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(test_lots)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ—Ç–æ–≤")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ—Ç–æ–≤: {e}")
        return
    
    # –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ª–æ—Ç–∞—Ö
    logger.info("\nüîî –¢–ï–°–¢ 1: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ª–æ—Ç–∞—Ö")
    try:
        for i, lot in enumerate(test_lots, 1):
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ—Ç–∞ {i}/{len(test_lots)}: {lot.name}")
            await bot_service.notify_new_lots([lot])
            logger.info(f"‚úÖ –õ–æ—Ç {lot.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        logger.info("‚úÖ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    # –¢–µ—Å—Ç 2: –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞
    logger.info("\nüìä –¢–ï–°–¢ 2: –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞")
    try:
        recommended_count = sum(1 for lot in test_lots if lot.annual_yield_percent >= 15)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏: {len(test_lots)} –ª–æ—Ç–æ–≤, {recommended_count} —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö")
        await bot_service.send_daily_summary(len(test_lots), recommended_count)
        logger.info("‚úÖ –¢–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–≤–æ–¥–∫–∏: {e}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    logger.info("\nüéØ –¢–ï–°–¢ 3: –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    try:
        if hasattr(bot_service, 'bot') and hasattr(bot_service.bot, '_should_notify_about_lot'):
            for lot in test_lots:
                should_notify = bot_service.bot._should_notify_about_lot(lot)
                logger.info(f"–õ–æ—Ç {lot.id}: {'‚úÖ –£–í–ï–î–û–ú–ò–¢–¨' if should_notify else '‚ùå –ù–ï —É–≤–µ–¥–æ–º–ª—è—Ç—å'}")
                logger.info(f"   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {lot.annual_yield_percent:.1f}%")
                logger.info(f"   –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {getattr(lot, 'market_deviation_percent', 0):.1f}%")
                logger.info(f"   –°—Ç–∞—Ç—É—Å: {getattr(lot, 'status', 'unknown')}")
        else:
            logger.warning("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _should_notify_about_lot –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {e}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    logger.info("\nüí¨ –¢–ï–°–¢ 4: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
    try:
        if hasattr(bot_service, 'bot') and hasattr(bot_service.bot, 'message_formatter'):
            for lot in test_lots[:1]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –æ–¥–Ω–æ–º –ª–æ—Ç–µ
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                formatted_message = bot_service.bot.message_formatter.format_lot_analysis(lot)
                logger.info("üìù –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:")
                logger.info(f"{formatted_message[:200]}...")
                logger.info("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logger.warning("‚ö†Ô∏è message_formatter –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ")
            logger.info("üí° –î–æ–±–∞–≤—å—Ç–µ message_formatter –≤ bot_service.bot")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    logger.info("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

async def test_deduplication():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
    logger.info("\nüîç –¢–ï–°–¢: –°–∏—Å—Ç–µ–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        dedup_file_path = Path(__file__).parent / "core" / "deduplication_db.py"
        if not dedup_file_path.exists():
            logger.warning("‚ö†Ô∏è –§–∞–π–ª core/deduplication_db.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ—Ç—Å—è...")
            os.makedirs(dedup_file_path.parent, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π
            dedup_code = '''import sqlite3
import hashlib
import logging
import os
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)

class DeduplicationDB:
    def __init__(self, db_path: str = "data/deduplication.db"):
        self.db_path = db_path
        os.makedirs(os.path.dirname(db_path), exist_ok=True)
        self._init_db()
    
    def _init_db(self):
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS lots (
                    id TEXT PRIMARY KEY,
                    address_hash TEXT NOT NULL,
                    area REAL NOT NULL,
                    price REAL NOT NULL,
                    notice_number TEXT,
                    first_seen DATETIME DEFAULT CURRENT_TIMESTAMP,
                    last_seen DATETIME DEFAULT CURRENT_TIMESTAMP,
                    times_seen INTEGER DEFAULT 1,
                    last_price REAL,
                    price_changed BOOLEAN DEFAULT FALSE
                )
            """)
    
    def _get_lot_signature(self, lot):
        signature_data = f"{lot.address}|{lot.area}|{lot.notice_number}"
        return hashlib.md5(signature_data.encode()).hexdigest()
    
    def is_duplicate(self, lot):
        signature = self._get_lot_signature(lot)
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute("SELECT * FROM lots WHERE address_hash = ?", (signature,))
            existing = cursor.fetchone()
            return bool(existing), {"existing": bool(existing)}
    
    def add_lot(self, lot):
        signature = self._get_lot_signature(lot)
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("INSERT INTO lots (id, address_hash, area, price, notice_number) VALUES (?, ?, ?, ?, ?)",
                        (lot.id, signature, lot.area, lot.price, lot.notice_number))
    
    def mark_processed(self, lot_id: str, has_analytics: bool = False, sent_to_telegram: bool = False):
        pass
    
    def get_stats(self):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute("SELECT COUNT(*) FROM lots")
            total_lots = cursor.fetchone()[0]
            return {"total_lots": total_lots, "price_changed_lots": 0, "processed_lots": 0}

dedup_db = DeduplicationDB()
'''
            
            with open(dedup_file_path, 'w', encoding='utf-8') as f:
                f.write(dedup_code)
            logger.info("‚úÖ –§–∞–π–ª core/deduplication_db.py —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç
        from core.deduplication_db import DeduplicationDB
        logger.info("‚úÖ DeduplicationDB –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        test_db_path = "data/test_deduplication.db"
        os.makedirs("data", exist_ok=True)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(test_db_path):
            os.remove(test_db_path)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        test_db = DeduplicationDB(test_db_path)
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = test_db.get_stats()
        logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ª–æ—Ç–µ
        test_lots = create_realistic_test_lots()
        test_lot = test_lots[0]
        
        # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ–≤—ã–º
        is_duplicate1, info1 = test_db.is_duplicate(test_lot)
        logger.info(f"–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {'–¥—É–±–ª–∏–∫–∞—Ç' if is_duplicate1 else '–Ω–æ–≤—ã–π –ª–æ—Ç'}")
        
        if not is_duplicate1:
            test_db.add_lot(test_lot)
            logger.info("‚úÖ –õ–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
        
        # –í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–º
        is_duplicate2, info2 = test_db.is_duplicate(test_lot)
        logger.info(f"–í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {'–¥—É–±–ª–∏–∫–∞—Ç' if is_duplicate2 else '–Ω–æ–≤—ã–π –ª–æ—Ç'}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_stats = test_db.get_stats()
        logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {final_stats}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
        if os.path.exists(test_db_path):
            os.remove(test_db_path)
            logger.info("üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª core/deduplication_db.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {e}")

async def test_scheduler_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    logger.info("\n‚è∞ –¢–ï–°–¢: –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    try:
        from parser.main import main as parser_main
        logger.info("‚úÖ parser.main –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ parser.main: {e}")
        return
    
    try:
        from bot.bot_service import bot_service
        logger.info("‚úÖ bot_service –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot_service: {e}")
        return
    
    try:
        from core.models import Lot
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å Lot –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Lot: {e}")
        return
    
    logger.info("‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
    logger.info("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ")

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø PRODUCTION –°–ò–°–¢–ï–ú–´")
    logger.info("=" * 70)
    
    # –¢–µ—Å—Ç –±–æ—Ç–∞
    await test_bot_production_simulation()
    
    # –¢–µ—Å—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    await test_deduplication()
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    await test_scheduler_integration()
    
    logger.info("\nüéØ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
    logger.info("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production")

if __name__ == "__main__":
    asyncio.run(run_all_tests())