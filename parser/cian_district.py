"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–π–æ–Ω–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¶–ò–ê–ù
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º GPT-–∞–Ω–∞–ª–∏–∑–æ–º
"""

import logging
import sys
import re
from pathlib import Path
from typing import List, Dict, Tuple

sys.path.append(str(Path(__file__).parent))

from core.gpt_tunnel_client import sync_chat

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
logger = logging.getLogger(__name__)

def extract_most_local_cian_part(address: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –°–ê–ú–´–ô –õ–û–ö–ê–õ–¨–ù–´–ô —ç–ª–µ–º–µ–Ω—Ç –∞–¥—Ä–µ—Å–∞ –¶–ò–ê–ù –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:
    1. –£–ª–∏—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) - —Å–∞–º–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ
    2. –†–∞–π–æ–Ω/–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω 
    3. –ì–æ—Ä–æ–¥
    4. –û–±–ª–∞—Å—Ç—å
    """
    if not address:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
    address_lower = address.lower().strip()
    logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¶–ò–ê–ù: '{address}'")
    
    # 1. –ü–†–ò–û–†–ò–¢–ï–¢: –£–ª–∏—Ü—ã (—Å–∞–º–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ)
    street_patterns = [
        r'—É–ª\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'—É–ª–∏—Ü–∞\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–ø—Ä-—Ç\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–ø—Ä–æ—Å–ø–µ–∫—Ç\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–ø–µ—Ä\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–ø–µ—Ä–µ—É–ª–æ–∫\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–±-—Ä\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–±—É–ª—å–≤–∞—Ä\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–Ω–∞–±\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'—à\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'—à–æ—Å—Å–µ\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¶–ò–ê–ù - —Ñ–æ—Ä–º–∞—Ç "–ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü–∞"
        r'([–ê-–Ø–∞-—è—ë\s\-0-9]+?)\s+—É–ª–∏—Ü–∞(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',  # "–¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞"
        r'([–ê-–Ø–∞-—è—ë\s\-0-9]+?)\s+–ø—Ä–æ—Å–ø–µ–∫—Ç(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',  # "–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç"
    ]
    
    for pattern in street_patterns:
        match = re.search(pattern, address_lower)
        if match:
            street_name = match.group(1).strip().title()
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            street_name = re.sub(r'\s+', ' ', street_name)
            if len(street_name) > 3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü—ã
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —É–ª–∏—Ü–∞ –¶–ò–ê–ù (—Å–∞–º–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ): {street_name}")
                return street_name
    
    # 2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è –¶–ò–ê–ù)
    metro_to_district = {
        '–Ω–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ': '–ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ',
        '–ø–µ—Ä–æ–≤–æ': '–ü–µ—Ä–æ–≤–æ',
        '–∏–∑–º–∞–π–ª–æ–≤—Å–∫–∞—è': '–ò–∑–º–∞–π–ª–æ–≤–æ',
        '—Å–µ–º–µ–Ω–æ–≤—Å–∫–∞—è': '–°–æ–∫–æ–ª–∏–Ω–∞—è –ì–æ—Ä–∞',
        '—ç–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∞—è': '–°–æ–∫–æ–ª–∏–Ω–∞—è –ì–æ—Ä–∞',
        '–±–∞–±—É—à–∫–∏–Ω—Å–∫–∞—è': '–ë–∞–±—É—à–∫–∏–Ω—Å–∫–∏–π',
        '–º–µ–¥–≤–µ–¥–∫–æ–≤–æ': '–°–µ–≤–µ—Ä–Ω–æ–µ –ú–µ–¥–≤–µ–¥–∫–æ–≤–æ',
        '–±–∏–±–∏—Ä–µ–≤–æ': '–ë–∏–±–∏—Ä–µ–≤–æ',
        '–∞–ª—Ç—É—Ñ—å–µ–≤–æ': '–ê–ª—Ç—É—Ñ—å–µ–≤—Å–∫–∏–π',
        '–∫—É–∑—å–º–∏–Ω–∫–∏': '–ö—É–∑—å–º–∏–Ω–∫–∏',
        '–ª—é–±–ª–∏–Ω–æ': '–õ—é–±–ª–∏–Ω–æ',
        '—Ç–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏': '–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏',
        '–∞—Ä–±–∞—Ç—Å–∫–∞—è': '–ê—Ä–±–∞—Ç',
        '—Ç–≤–µ—Ä—Å–∫–∞—è': '–¢–≤–µ—Ä—Å–∫–æ–π',
        '–º–∏—Ç–∏–Ω–æ': '–ú–∏—Ç–∏–Ω–æ',
        '—Å—Ç—Ä–æ–≥–∏–Ω–æ': '–°—Ç—Ä–æ–≥–∏–Ω–æ',
        '–∫—Ä—ã–ª–∞—Ç—Å–∫–æ–µ': '–ö—Ä—ã–ª–∞—Ç—Å–∫–æ–µ',
        '–∫—É–Ω—Ü–µ–≤—Å–∫–∞—è': '–ö—É–Ω—Ü–µ–≤–æ',
        '–º–æ–ª–æ–¥–µ–∂–Ω–∞—è': '–ú–æ–∂–∞–π—Å–∫–∏–π',
        '–ø–ª–∞–Ω–µ—Ä–Ω–∞—è': '–°–µ–≤–µ—Ä–Ω–æ–µ –¢—É—à–∏–Ω–æ',
        '—â—É–∫–∏–Ω—Å–∫–∞—è': '–©—É–∫–∏–Ω–æ',
        '—Ç—É—à–∏–Ω—Å–∫–∞—è': '–°–µ–≤–µ—Ä–Ω–æ–µ –¢—É—à–∏–Ω–æ',
        '—Å–æ–∫–æ–ª—å–Ω–∏–∫–∏': '–°–æ–∫–æ–ª—å–Ω–∏–∫–∏',
        '–∫—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∞—è': '–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π',
        '–∫–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è': '–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π'
    }
    
    # –ò—â–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ
    for metro, district in metro_to_district.items():
        if f'–º. {metro}' in address_lower or f'–º–µ—Ç—Ä–æ {metro}' in address_lower:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–π–æ–Ω –¶–ò–ê–ù –ø–æ –º–µ—Ç—Ä–æ: {district}")
            return district
    
    # 3. –†–∞–π–æ–Ω—ã/–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω—ã
    district_patterns = [
        r'–º–∫—Ä\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s*$)',
        r'–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s*$)',
        r'—Ä-–Ω\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s*$)',
        r'—Ä–∞–π–æ–Ω\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s*$)',
        r'([–ê-–Ø–∞-—è—ë\s\-]+?)\s+—Ä–∞–π–æ–Ω(?:\s*,|\s*$)',
    ]
    
    for pattern in district_patterns:
        match = re.search(pattern, address_lower)
        if match:
            district_name = match.group(1).strip().title()
            if len(district_name) > 2:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–π–æ–Ω –¶–ò–ê–ù: {district_name}")
                return district_name
    
    # 4. –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ú–æ—Å–∫–≤—ã (–ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫)
    moscow_districts = [
        "–ü–µ—Ä–æ–≤–æ", "–ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ", "–ò–∑–º–∞–π–ª–æ–≤–æ", "–ë–æ–≥–æ—Ä–æ–¥—Å–∫–æ–µ", "–í–µ—à–Ω—è–∫–∏",
        "–ë–∞—Å–º–∞–Ω–Ω—ã–π", "–•–∞–º–æ–≤–Ω–∏–∫–∏", "–ê—Ä–±–∞—Ç", "–¢–≤–µ—Ä—Å–∫–æ–π", "–ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∏–π",
        "–û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π", "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏", "–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π", "–¢–∞–≥–∞–Ω—Å–∫–∏–π",
        "–ê–ª–µ–∫—Å–µ–µ–≤—Å–∫–∏–π", "–ë–∞–±—É—à–∫–∏–Ω—Å–∫–∏–π", "–ë–∏–±–∏—Ä–µ–≤–æ", "–ë—É—Ç—ã—Ä—Å–∫–∏–π",
        "–ö—É–∑—å–º–∏–Ω–∫–∏", "–õ—é–±–ª–∏–Ω–æ", "–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏", "–ú–∞—Ä—å–∏–Ω–æ", "–ë—Ä–∞—Ç–µ–µ–≤–æ",
        "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π", "–ì–∞–≥–∞—Ä–∏–Ω—Å–∫–∏–π", "–ß–µ—Ä—ë–º—É—à–∫–∏", "–ö–æ–Ω—å–∫–æ–≤–æ",
        "–ú–∏—Ç–∏–Ω–æ", "–°—Ç—Ä–æ–≥–∏–Ω–æ", "–ö—Ä—ã–ª–∞—Ç—Å–∫–æ–µ", "–ö—É–Ω—Ü–µ–≤–æ", "–°–æ–ª–Ω—Ü–µ–≤–æ",
        "–ó—é–∑–∏–Ω–æ", "–ö–æ—Ç–ª–æ–≤–∫–∞", "–î–æ—Ä–æ–≥–æ–º–∏–ª–æ–≤–æ", "–ú–æ–∂–∞–π—Å–∫–∏–π", "–û—á–∞–∫–æ–≤–æ-–ú–∞—Ç–≤–µ–µ–≤—Å–∫–æ–µ",
        "–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—á—å–µ", "–Ø–∫–∏–º–∞–Ω–∫–∞", "–ú–µ—â–∞–Ω—Å–∫–∏–π", "–õ–µ—Ñ–æ—Ä—Ç–æ–≤–æ", "–ù–µ–∫—Ä–∞—Å–æ–≤–∫–∞",
        "–ü–µ—á–∞—Ç–Ω–∏–∫–∏", "–†—è–∑–∞–Ω—Å–∫–∏–π", "–Æ–∂–Ω–æ–ø–æ—Ä—Ç–æ–≤—ã–π", "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∏–π", "–ö–∞–ø–æ—Ç–Ω—è"
    ]
    
    for district in moscow_districts:
        if district.lower() in address_lower:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω –ú–æ—Å–∫–≤—ã –¶–ò–ê–ù: {district}")
            return district
    
    # 5. –ì–æ—Ä–æ–¥–∞ –ú–û (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)
    mo_cities = {
        '–∫–ª–∏–Ω': '–ö–ª–∏–Ω', '–º—ã—Ç–∏—â–∏': '–ú—ã—Ç–∏—â–∏', '–ø–æ–¥–æ–ª—å—Å–∫': '–ü–æ–¥–æ–ª—å—Å–∫',
        '—Ö–∏–º–∫–∏': '–•–∏–º–∫–∏', '–±–∞–ª–∞—à–∏—Ö–∞': '–ë–∞–ª–∞—à–∏—Ö–∞', '–∫–æ—Ä–æ–ª—ë–≤': '–ö–æ—Ä–æ–ª—ë–≤',
        '–ª—é–±–µ—Ä—Ü—ã': '–õ—é–±–µ—Ä—Ü—ã', '–∫—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫': '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '–æ–¥–∏–Ω—Ü–æ–≤–æ': '–û–¥–∏–Ω—Ü–æ–≤–æ',
        '–¥–æ–º–æ–¥–µ–¥–æ–≤–æ': '–î–æ–º–æ–¥–µ–¥–æ–≤–æ', '—Ä–µ—É—Ç–æ–≤': '–†–µ—É—Ç–æ–≤', '–ø—É—à–∫–∏–Ω–æ': '–ü—É—à–∫–∏–Ω–æ',
        '—â—ë–ª–∫–æ–≤–æ': '–©—ë–ª–∫–æ–≤–æ', '–Ω–æ–≥–∏–Ω—Å–∫': '–ù–æ–≥–∏–Ω—Å–∫', '–æ—Ä–µ—Ö–æ–≤–æ-–∑—É–µ–≤–æ': '–û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ',
        '–ª—ã—Ç–∫–∞—Ä–∏–Ω–æ': '–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫'
    }
    
    for city_key, city_name in mo_cities.items():
        if city_key in address_lower:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥ –ú–û –¶–ò–ê–ù: {city_name}")
            return city_name
    
    # 6. –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥
    if '–∑–µ–ª–µ–Ω–æ–≥—Ä–∞–¥' in address_lower:
        return "–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥"
    
    # 7. Fallback
    if '–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' in address_lower or ', –º–æ' in address_lower:
        return "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
    elif '–º–æ—Å–∫–≤–∞' in address_lower:
        return "–ú–æ—Å–∫–≤–∞"
    
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def gpt_extract_most_local_cian_part_fixed(address: str) -> str:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô GPT-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –¶–ò–ê–ù —Å —Ç–æ—á–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    """
    if not address:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞–¥—Ä–µ—Å –¶–ò–ê–ù –∏ –Ω–∞–π–¥–∏ –°–ê–ú–´–ô –õ–û–ö–ê–õ–¨–ù–´–ô —ç–ª–µ–º–µ–Ω—Ç.

–ê–î–†–ï–° –¶–ò–ê–ù: "{address}"

–°–ü–ï–¶–ò–§–ò–ö–ê –¶–ò–ê–ù:
- –°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ: "–º. –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ" 
- –§–æ—Ä–º–∞—Ç "–Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü–∞": "–¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞"
- –¢–¶ –∏ –ë–¶: "–¢–¶ –ú–µ–≥–∞–ø–æ–ª–∏—Å", "–ë–¶ –ì–æ—Ä–∏–∑–æ–Ω—Ç"

–ó–ê–î–ê–ß–ê: –í—ã–±–µ—Ä–∏ –¢–û–õ–¨–ö–û –û–î–ò–ù —Å–∞–º—ã–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç:

–ü–†–ò–û–†–ò–¢–ï–¢:
1. üî• –£–õ–ò–¶–ê - —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ! (–ì–∞–≥–∞—Ä–∏–Ω–∞, –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è, –ê–∫–∞–¥–µ–º–∏–∫–∞ –ö–∞—Ä–≥–∏–Ω–∞)
2. üìç –†–ê–ô–û–ù –ü–û –ú–ï–¢–†–û - –µ—Å–ª–∏ –Ω–µ—Ç —É–ª–∏—Ü—ã (–ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ, –ö—É–∑—å–º–∏–Ω–∫–∏, –ê—Ä–±–∞—Ç)
3. üìç –†–ê–ô–û–ù - –µ—Å–ª–∏ –Ω–µ—Ç —É–ª–∏—Ü—ã –∏ –º–µ—Ç—Ä–æ (–ü–µ—Ä–æ–≤–æ, –•–∞–º–æ–≤–Ω–∏–∫–∏, –û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π)
4. üèôÔ∏è –ì–û–†–û–î - –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö (–ö–ª–∏–Ω, –ú—ã—Ç–∏—â–∏, –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥)

–ö–û–ù–ö–†–ï–¢–ù–´–ï –ü–†–ò–ú–ï–†–´ –¶–ò–ê–ù:

‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û:
"–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ö–ª–∏–Ω, —É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, 37/1" ‚Üí –û–¢–í–ï–¢: –ì–∞–≥–∞—Ä–∏–Ω–∞
"–ú–æ—Å–∫–≤–∞, –º. –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ, —É–ª. –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è, 28" ‚Üí –û–¢–í–ï–¢: –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è
"–ú—ã—Ç–∏—â–∏, —É–ª. –ê–∫–∞–¥–µ–º–∏–∫–∞ –ö–∞—Ä–≥–∏–Ω–∞" ‚Üí –û–¢–í–ï–¢: –ê–∫–∞–¥–µ–º–∏–∫–∞ –ö–∞—Ä–≥–∏–Ω–∞
"–ú–æ—Å–∫–≤–∞, –º. –ö—É–∑—å–º–∏–Ω–∫–∏, –¢–¶ –ú–µ–≥–∞–ø–æ–ª–∏—Å" ‚Üí –û–¢–í–ï–¢: –ö—É–∑—å–º–∏–Ω–∫–∏
"–ú–æ—Å–∫–≤–∞, –í–ê–û, –ü–µ—Ä–æ–≤–æ" ‚Üí –û–¢–í–ï–¢: –ü–µ—Ä–æ–≤–æ
"–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥, –∫–æ—Ä–ø—É—Å 847" ‚Üí –û–¢–í–ï–¢: –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥
"–¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞, 7" ‚Üí –û–¢–í–ï–¢: –¢–≤–µ—Ä—Å–∫–∞—è
"–û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω" ‚Üí –û–¢–í–ï–¢: –û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π

‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:
"—É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞" ‚Üí –ù–ï "–∞–≥–∞—Ä–∏–Ω–∞" (–ù–ï —Å—Ä–µ–∑–∞–π!)
"–º. –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ" ‚Üí –ù–ï "–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ" (–ù–ï —Å—Ä–µ–∑–∞–π!)
"–¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞" ‚Üí –ù–ï "–¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞" (—É–±–µ—Ä–∏ —Å–ª–æ–≤–æ "—É–ª–∏—Ü–∞"!)
"–û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω" ‚Üí –ù–ï "–û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω" (—É–±–µ—Ä–∏ —Å–ª–æ–≤–æ "—Ä–∞–π–æ–Ω"!)

–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
- –ù–ï —Å—Ä–µ–∑–∞–π –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã!
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ø—Ä–µ—Ñ–∏–∫—Å—ã
- –ù–ï –≤–∫–ª—é—á–∞–π —Å–ª–æ–≤–∞ "—É–ª–∏—Ü–∞", "—Ä–∞–π–æ–Ω", "–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω" –≤ –æ—Ç–≤–µ—Ç
- –ù–ï –≤—ã–±–∏—Ä–∞–π –æ–∫—Ä—É–≥–∞ (–í–ê–û, –°–í–ê–û)
- –°–æ—Ö—Ä–∞–Ω—è–π –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è

–ê–õ–ì–û–†–ò–¢–ú:
1. –ò—â–∏ —É–ª–∏—Ü—É - –µ—Å–ª–∏ –µ—Å—Ç—å, –≤—ã–±–µ—Ä–∏ –µ—ë
2. –ï—Å–ª–∏ —É–ª–∏—Ü—ã –Ω–µ—Ç - –∏—â–∏ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ
3. –ï—Å–ª–∏ –º–µ—Ç—Ä–æ –Ω–µ—Ç - –∏—â–∏ —Ä–∞–π–æ–Ω
4. –ï—Å–ª–∏ —Ä–∞–π–æ–Ω–∞ –Ω–µ—Ç - –∏—â–∏ –≥–æ—Ä–æ–¥

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —á–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ —Å–ª–æ–≤ "—É–ª–∏—Ü–∞"/"—Ä–∞–π–æ–Ω".
"""
    
    try:
        response = sync_chat(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system", 
                    "content": "–¢—ã —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–¥—Ä–µ—Å–æ–≤ –¶–ò–ê–ù. –ù–ò–ö–û–ì–î–ê –Ω–µ —Å—Ä–µ–∑–∞–π –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã. –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–π –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü, —Ä–∞–π–æ–Ω–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤ –ë–ï–ó —Å–ª–æ–≤ '—É–ª–∏—Ü–∞' –∏ '—Ä–∞–π–æ–Ω'."
                },
                {"role": "user", "content": prompt}
            ],
            max_tokens=100
        )
        
        result = response.strip().strip('"').strip("'").strip()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
        prefixes_to_remove = [
            r'^—É–ª\.?\s+',
            r'^—É–ª–∏—Ü–∞\s+', 
            r'^–ø—Ä-—Ç\.?\s+',
            r'^–ø—Ä–æ—Å–ø–µ–∫—Ç\s+',
            r'^–Ω–∞–±\.?\s+',
            r'^–±-—Ä\.?\s+',
            r'^–≥\.?\s+',
            r'^–º–∫—Ä\.?\s+',
            r'^—Ä–∞–π–æ–Ω\s+',
            r'^–º\.?\s+',
            r'^–º–µ—Ç—Ä–æ\s+'
        ]
        
        # –°—É—Ñ—Ñ–∏–∫—Å—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        suffixes_to_remove = [
            r'\s+—É–ª–∏—Ü–∞$',
            r'\s+–ø—Ä–æ—Å–ø–µ–∫—Ç$',
            r'\s+–±—É–ª—å–≤–∞—Ä$',
            r'\s+–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è$',
            r'\s+–ø–µ—Ä–µ—É–ª–æ–∫$',
            r'\s+—à–æ—Å—Å–µ$',
            r'\s+—Ä–∞–π–æ–Ω$',
            r'\s+–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω$'
        ]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
        for prefix_pattern in prefixes_to_remove:
            if re.match(prefix_pattern, result, flags=re.IGNORECASE):
                result = re.sub(prefix_pattern, '', result, flags=re.IGNORECASE).strip()
                break
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
        for suffix_pattern in suffixes_to_remove:
            result = re.sub(suffix_pattern, '', result, flags=re.IGNORECASE).strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        if len(result) >= 2 and len(result) <= 80:
            forbidden = ['–º–æ—Å–∫–≤–∞', '–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–º–æ', '–≤–∞–æ', '—Å–≤–∞–æ', '—Ü–∞–æ', '—é–∞–æ', '—Å–∞–æ', '–∑–∞–æ']
            if result.lower() not in forbidden:
                logger.info(f"üéØ GPT –¶–ò–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∏–∑–≤–ª–µ–∫: '{result}'")
                return result
        
        logger.warning(f"GPT –¶–ò–ê–ù –≤–µ—Ä–Ω—É–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{result}', –ø—Ä–∏–º–µ–Ω—è–µ–º REGEX fallback")
        return extract_most_local_cian_part(address)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ GPT –¶–ò–ê–ù: {e}")
        return extract_most_local_cian_part(address)

def gpt_extract_most_local_cian_part_simple(address: str) -> str:
    """
    –ü—Ä–æ—Å—Ç–æ–π GPT-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –¶–ò–ê–ù (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    """
    if not address:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
    prompt = f"""
–ù–∞–π–¥–∏ –°–ê–ú–´–ô –õ–û–ö–ê–õ–¨–ù–´–ô —ç–ª–µ–º–µ–Ω—Ç –≤ –∞–¥—Ä–µ—Å–µ –¶–ò–ê–ù:

–ê–î–†–ï–°: "{address}"

–ü–†–ò–û–†–ò–¢–ï–¢: –£–ª–∏—Ü–∞ ‚Üí –†–∞–π–æ–Ω –ø–æ –º–µ—Ç—Ä–æ ‚Üí –†–∞–π–æ–Ω ‚Üí –ì–æ—Ä–æ–¥

–ü–†–ò–ú–ï–†–´ –¶–ò–ê–ù:
- "—É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, 37/1" ‚Üí "–ì–∞–≥–∞—Ä–∏–Ω–∞"
- "–º. –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ, —É–ª. –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è" ‚Üí "–ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è"
- "–º. –ö—É–∑—å–º–∏–Ω–∫–∏, –¢–¶ –ú–µ–≥–∞–ø–æ–ª–∏—Å" ‚Üí "–ö—É–∑—å–º–∏–Ω–∫–∏"

–í–µ—Ä–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤.
"""
    
    try:
        response = sync_chat(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–ù–∞–π–¥–∏ —Å–∞–º—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∞–¥—Ä–µ—Å–∞ –¶–ò–ê–ù."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=50
        )
        
        result = response.strip().strip('"').strip("'")
        result = re.sub(r'^(—É–ª\.?|–º\.?|–≥\.?|–º–∫—Ä\.?)\s*', '', result, flags=re.IGNORECASE)
        result = result.strip()
        
        if 2 <= len(result) <= 50:
            return result
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ GPT –¶–ò–ê–ù: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def test_fixed_cian_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ –¥–ª—è –¶–ò–ê–ù: REGEX, GPT –ø—Ä–æ—Å—Ç–æ–π, GPT –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π"""
    
    test_cases = [
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏ –¶–ò–ê–ù
        ("–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ö–ª–∏–Ω, —É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, 37/1", "–ì–∞–≥–∞—Ä–∏–Ω–∞"),
        ("–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ö–ª–∏–Ω, —É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, 49", "–ì–∞–≥–∞—Ä–∏–Ω–∞"),
        ("–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ú—ã—Ç–∏—â–∏, —É–ª. –ê–∫–∞–¥–µ–º–∏–∫–∞ –ö–∞—Ä–≥–∏–Ω–∞, 38–∫1", "–ê–∫–∞–¥–µ–º–∏–∫–∞ –ö–∞—Ä–≥–∏–Ω–∞"),
        ("–≥ –ú–æ—Å–∫–≤–∞, –ø—Ä-—Ç –ú–∏—Ä–∞, 119—Å536", "–ú–∏—Ä–∞"),
        ("–ú–æ—Å–∫–≤–∞, –í–ê–û, –ü–µ—Ä–æ–≤–æ", "–ü–µ—Ä–æ–≤–æ"),
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã –¶–ò–ê–ù
        ("–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥ –•–∏–º–∫–∏, —É–ª –ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è, –¥–æ–º 4", "–ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è"),
        ("–≥ –ú–æ—Å–∫–≤–∞, –í–ê–û, –ü–µ—Ä–æ–≤–æ, —É–ª –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è, –¥ 42", "–ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è"),
        ("–ú–æ—Å–∫–≤–∞, –º. –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ, —É–ª. –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è, 28", "–ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è"),
        ("–ú–æ—Å–∫–≤–∞, –¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞, 7", "–¢–≤–µ—Ä—Å–∫–∞—è"),
        ("–ú–æ—Å–∫–≤–∞, –º. –ê—Ä–±–∞—Ç—Å–∫–∞—è, –ê—Ä–±–∞—Ç, 10", "–ê—Ä–±–∞—Ç"),
        ("–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ü–æ–¥–æ–ª—å—Å–∫, —É–ª. –ü—Ä–∞–≤–¥—ã", "–ü—Ä–∞–≤–¥—ã"),
        ("–ú—ã—Ç–∏—â–∏, —É–ª. –ê–∫–∞–¥–µ–º–∏–∫–∞ –ö–∞—Ä–≥–∏–Ω–∞", "–ê–∫–∞–¥–µ–º–∏–∫–∞ –ö–∞—Ä–≥–∏–Ω–∞"),
        
        # –ü—Ä–æ—Å–ø–µ–∫—Ç—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –¶–ò–ê–ù
        ("–ú–æ—Å–∫–≤–∞, –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –ë–¶ –ì–æ—Ä–∏–∑–æ–Ω—Ç", "–õ–µ–Ω–∏–Ω—Å–∫–∏–π"),
        ("–ú–æ—Å–∫–≤–∞, –±-—Ä –ß–∏—Å—Ç–æ–ø—Ä—É–¥–Ω—ã–π, –¥–æ–º 12–ö5", "–ß–∏—Å—Ç–æ–ø—Ä—É–¥–Ω—ã–π"),
        
        # –†–∞–π–æ–Ω—ã –ø–æ –º–µ—Ç—Ä–æ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è –¶–ò–ê–ù)
        ("–ú–æ—Å–∫–≤–∞, –º. –ö—É–∑—å–º–∏–Ω–∫–∏, –¢–¶ –ú–µ–≥–∞–ø–æ–ª–∏—Å", "–ö—É–∑—å–º–∏–Ω–∫–∏"),
        ("–ú–æ—Å–∫–≤–∞, –º. –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ", "–ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ"),
        ("–ú–æ—Å–∫–≤–∞, –º. –°—Ç—Ä–æ–≥–∏–Ω–æ", "–°—Ç—Ä–æ–≥–∏–Ω–æ"),
        
        # –†–∞–π–æ–Ω—ã –±–µ–∑ —É–ª–∏—Ü
        ("–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥, –∫–æ—Ä–ø—É—Å 847", "–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥"),
        ("–≥. –ú–æ—Å–∫–≤–∞, –°–í–ê–û, –û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π"),
        
        # –°–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏ –¶–ò–ê–ù
        ("–ú–û, –≥ –ü–æ–¥–æ–ª—å—Å–∫, –º–∫—Ä –ö–ª–∏–º–æ–≤—Å–∫, —É–ª –ó–∞–≤–æ–¥—Å–∫–∞—è", "–ó–∞–≤–æ–¥—Å–∫–∞—è"),
        ("–ú–æ—Å–∫–≤–∞ –≥, –ß–∏—Å—Ç–æ–ø—Ä—É–¥–Ω—ã–π –±—É–ª—å–≤–∞—Ä, –¥–æ–º 12–ö5", "–ß–∏—Å—Ç–æ–ø—Ä—É–¥–Ω—ã–π"),
        
        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        ("", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        ("–ú–æ—Å–∫–≤–∞, –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω", "–ú–æ—Å–∫–≤–∞"),
    ]
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û GPT –¶–ò–ê–ù: REGEX vs GPT-–ü–†–û–°–¢–û–ô vs GPT-–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô")
    print("=" * 120)
    print(f"{'‚Ññ':<3} {'–ú–µ—Ç–æ–¥':<18} {'–†–µ–∑—É–ª—å—Ç–∞—Ç':<12} {'–ê–¥—Ä–µ—Å':<50} {'–û–∂–∏–¥–∞–µ–º—ã–π':<15} {'–ü–æ–ª—É—á–µ–Ω'}")
    print("=" * 120)
    
    correct_regex = 0
    correct_gpt_simple = 0
    correct_gpt_fixed = 0
    total = len(test_cases)
    
    for i, (address, expected) in enumerate(test_cases, 1):
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–∏ –º–µ—Ç–æ–¥–∞
        regex_result = extract_most_local_cian_part(address)
        gpt_simple_result = gpt_extract_most_local_cian_part_simple(address)
        gpt_fixed_result = gpt_extract_most_local_cian_part_fixed(address)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
        regex_correct = regex_result == expected
        gpt_simple_correct = gpt_simple_result == expected
        gpt_fixed_correct = gpt_fixed_result == expected
        
        if regex_correct:
            correct_regex += 1
        if gpt_simple_correct:
            correct_gpt_simple += 1
        if gpt_fixed_correct:
            correct_gpt_fixed += 1
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        address_short = address[:45] + "..." if len(address) > 45 else address
        
        regex_status = "‚úÖ OK" if regex_correct else "‚ùå FAIL"
        gpt_simple_status = "‚úÖ OK" if gpt_simple_correct else "‚ùå FAIL"
        gpt_fixed_status = "‚úÖ OK" if gpt_fixed_correct else "‚ùå FAIL"
        
        print(f"{i:<3} {'REGEX':<18} {regex_status:<12} {address_short:<50} {expected:<15} {regex_result}")
        print(f"{i:<3} {'GPT-–ü–†–û–°–¢–û–ô':<18} {gpt_simple_status:<12} {address_short:<50} {expected:<15} {gpt_simple_result}")
        print(f"{i:<3} {'GPT-–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô':<18} {gpt_fixed_status:<12} {address_short:<50} {expected:<15} {gpt_fixed_result}")
        print("-" * 120)
    
    print("=" * 120)
    print(f"üìä –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¶–ò–ê–ù:")
    print(f"REGEX:               {correct_regex}/{total} ({correct_regex/total*100:.1f}%) —É—Å–ø–µ—à–Ω–æ")
    print(f"GPT-–ü–†–û–°–¢–û–ô:         {correct_gpt_simple}/{total} ({correct_gpt_simple/total*100:.1f}%) —É—Å–ø–µ—à–Ω–æ")
    print(f"GPT-–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô:    {correct_gpt_fixed}/{total} ({correct_gpt_fixed/total*100:.1f}%) —É—Å–ø–µ—à–Ω–æ")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π –º–µ—Ç–æ–¥
    scores = {
        "regex": correct_regex,
        "gpt_simple": correct_gpt_simple,
        "gpt_fixed": correct_gpt_fixed
    }
    
    best_method = max(scores, key=scores.get)
    best_score = scores[best_method]
    
    print(f"\nüèÜ –õ–£–ß–®–ò–ô –ú–ï–¢–û–î –î–õ–Ø –¶–ò–ê–ù: {best_method.upper().replace('_', '-')} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {best_score}/{total}")
    
    return best_method

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
def improved_cian_district_parser(address: str) -> str:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π GPT –¥–ª—è –¶–ò–ê–ù"""
    return gpt_extract_most_local_cian_part_fixed(address)

def gpt_parse_cian_district(address: str) -> str:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é GPT –ª–æ–≥–∏–∫—É –¥–ª—è –¶–ò–ê–ù"""
    return gpt_extract_most_local_cian_part_fixed(address)

"""if __name__ == "__main__":
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û GPT –î–õ–Ø –¶–ò–ê–ù")
    print("–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã: —Å—Ä–µ–∑–∞–Ω–∏–µ –±—É–∫–≤, –Ω–µ—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    print("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –£–ª–∏—Ü–∞ ‚Üí –†–∞–π–æ–Ω –ø–æ –º–µ—Ç—Ä–æ ‚Üí –†–∞–π–æ–Ω ‚Üí –ì–æ—Ä–æ–¥ ‚Üí –û–±–ª–∞—Å—Ç—å")
    print()
    
    best_method = test_fixed_cian_extraction()
    
    print(f"\nüí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í GPT –¶–ò–ê–ù:")
    print("‚úÖ –°—Ç—Ä–æ–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ù–ï —Å—Ä–µ–∑–∞—Ç—å –±—É–∫–≤—ã")
    print("‚úÖ –£—á—ë—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –¶–ò–ê–ù: –º–µ—Ç—Ä–æ, –¢–¶, –ë–¶") 
    print("‚úÖ –û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤")
    print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤ '—É–ª–∏—Ü–∞' –∏ '—Ä–∞–π–æ–Ω' –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("‚úÖ Fallback –∫ REGEX –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")"""