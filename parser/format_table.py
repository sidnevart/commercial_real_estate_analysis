"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Sheets —Ç–∞–±–ª–∏—Ü:
1. –ß–∏—Å–ª–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
2. –¶–≤–µ—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ >= 20% –∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ >= 15%
3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º —Ç—Ä–µ–º —Ç–∞–±–ª–∏—Ü–∞–º: lots_all, cian_sale_all, cian_rent_all
"""

import logging
from googleapiclient.discovery import build
from google.oauth2 import service_account
from parser.config import GSHEET_ID, GSHEET_CREDS_PATH

logger = logging.getLogger(__name__)

SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
_creds = service_account.Credentials.from_service_account_file(GSHEET_CREDS_PATH, scopes=SCOPES)
_svc = build("sheets", "v4", credentials=_creds)

def clear_all_conditional_formatting(sheet_id):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ª–∏—Å—Ç–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º –¥–æ 20 –ø—Ä–∞–≤–∏–ª —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        for _ in range(20):
            try:
                _svc.spreadsheets().batchUpdate(
                    spreadsheetId=GSHEET_ID,
                    body={
                        "requests": [{
                            "deleteConditionalFormatRule": {
                                "sheetId": sheet_id,
                                "index": 0
                            }
                        }]
                    }
                ).execute()
            except:
                # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª –±–æ–ª—å—à–µ –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                break
        logger.info(f"–û—á–∏—â–µ–Ω–æ —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª–∏—Å—Ç–∞ {sheet_id}")
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ): {e}")

def get_sheet_metadata():
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤"""
    try:
        return _svc.spreadsheets().get(spreadsheetId=GSHEET_ID).execute()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤: {e}")
        return None

def get_sheet_id_by_name(sheets_metadata, sheet_name):
    """–ù–∞—Ö–æ–¥–∏—Ç ID –ª–∏—Å—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    for sheet in sheets_metadata['sheets']:
        if sheet['properties']['title'] == sheet_name:
            return sheet['properties']['sheetId']
    return None

def get_last_row(sheet_name):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ª–∏—Å—Ç–µ"""
    try:
        result = _svc.spreadsheets().values().get(
            spreadsheetId=GSHEET_ID,
            range=f"{sheet_name}!A:A"
        ).execute()
        
        values = result.get('values', [])
        return len(values) if values else 1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è {sheet_name}: {e}")
        return 1

def format_lots_all_table():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ª–æ—Ç–æ–≤"""
    sheet_name = "lots_all"
    logger.info(f"üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {sheet_name}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        sheets_metadata = get_sheet_metadata()
        if not sheets_metadata:
            return False
        
        sheet_id = get_sheet_id_by_name(sheets_metadata, sheet_name)
        if sheet_id is None:
            logger.error(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
        last_row = get_last_row(sheet_name)
        if last_row <= 1:
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ {sheet_name}")
            return False
        
        logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {sheet_name}: —Å—Ç—Ä–æ–∫–∏ 2-{last_row}")
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        clear_all_conditional_formatting(sheet_id)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        format_requests = []
        
        # 1. –ß–ò–°–õ–û–í–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é
        number_columns = [5, 6, 7, 8, 9, 10, 11, 12, 13]  # –í—Å–µ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        
        for col_idx in number_columns:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ–ª–±—Ü–∞
            if col_idx == 5:  # –°—Ç–æ–ª–±–µ—Ü F - –ü–ª–æ—â–∞–¥—å
                pattern = "#,##0.0\" –º¬≤\""
                format_type = "NUMBER"
            elif col_idx in [6, 7]:  # –°—Ç–æ–ª–±—Ü—ã G, H - —Ü–µ–Ω–∞ –∑–∞ –º¬≤
                pattern = "#,##0‚ÇΩ"
                format_type = "CURRENCY"
            elif col_idx in [8, 9, 10]:  # –°—Ç–æ–ª–±—Ü—ã I, J, K - —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö
                pattern = "#,##0‚ÇΩ"
                format_type = "CURRENCY"
            elif col_idx == 11:  # –°—Ç–æ–ª–±–µ—Ü L - –ö–ê–ü–ò–¢–ê–õ–ò–ó–ê–¶–ò–Ø –≤ %
                pattern = "0.00%"  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                format_type = "PERCENT"
            elif col_idx == 12:  # –°—Ç–æ–ª–±–µ—Ü M - –ì–ê–ü –≤ —Ä—É–±–ª—è—Ö
                pattern = "#,##0‚ÇΩ"
                format_type = "CURRENCY"
            elif col_idx == 13:  # –°—Ç–æ–ª–±–µ—Ü N - –î–û–•–û–î–ù–û–°–¢–¨ –≤ %
                pattern = "0.00%"  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                format_type = "PERCENT"
            else:
                pattern = "#,##0.00"
                format_type = "NUMBER"
            
            format_requests.append({
                "repeatCell": {
                    "range": {
                        "sheetId": sheet_id,
                        "startRowIndex": 1,  # –°–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
                        "endRowIndex": last_row,
                        "startColumnIndex": col_idx,
                        "endColumnIndex": col_idx + 1
                    },
                    "cell": {
                        "userEnteredFormat": {
                            "numberFormat": {
                                "type": format_type,
                                "pattern": pattern
                            }
                        }
                    },
                    "fields": "userEnteredFormat.numberFormat"
                }
            })
        
        # 2. –£–°–õ–û–í–ù–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ >= 20% (—Å—Ç–æ–ª–±–µ—Ü N, –∏–Ω–¥–µ–∫—Å 13)
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        format_requests.append({
            "addConditionalFormatRule": {
                "rule": {
                    "ranges": [{
                        "sheetId": sheet_id,
                        "startRowIndex": 1,
                        "endRowIndex": last_row,
                        "startColumnIndex": 13,  # –°—Ç–æ–ª–±–µ—Ü N (–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å)
                        "endColumnIndex": 14
                    }],
                    "booleanRule": {
                        "condition": {
                            "type": "CUSTOM_FORMULA",
                            "values": [{"userEnteredValue": "=N2>=20%"}]  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                        },
                        "format": {
                            "backgroundColor": {"red": 0.7176, "green": 0.8823, "blue": 0.7176}
                        }
                    }
                },
                "index": 0
            }
        })
        
        # 3. –£–°–õ–û–í–ù–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ >= 15% (—Å—Ç–æ–ª–±–µ—Ü L, –∏–Ω–¥–µ–∫—Å 11)
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        format_requests.append({
            "addConditionalFormatRule": {
                "rule": {
                    "ranges": [{
                        "sheetId": sheet_id,
                        "startRowIndex": 1,
                        "endRowIndex": last_row,
                        "startColumnIndex": 11,  # –°—Ç–æ–ª–±–µ—Ü L (–∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è)
                        "endColumnIndex": 12
                    }],
                    "booleanRule": {
                        "condition": {
                            "type": "CUSTOM_FORMULA",
                            "values": [{"userEnteredValue": "=L2>=15%"}]  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                        },
                        "format": {
                            "backgroundColor": {"red": 0.7176, "green": 0.8823, "blue": 0.7176}
                        }
                    }
                },
                "index": 1
            }
        })
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if format_requests:
            _svc.spreadsheets().batchUpdate(
                spreadsheetId=GSHEET_ID,
                body={"requests": format_requests}
            ).execute()
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω {sheet_name}")
        logger.info("   üìä –ß–∏—Å–ª–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é")
        logger.info("   üìà –°—Ç–æ–ª–±–µ—Ü L(11): –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–∫ PERCENT")
        logger.info("   üí∞ –°—Ç–æ–ª–±–µ—Ü M(12): –ì–ê–ü –≤ —Ä—É–±–ª—è—Ö")
        logger.info("   üìà –°—Ç–æ–ª–±–µ—Ü N(13): –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫–∞–∫ PERCENT")
        logger.info("   üü¢ –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ >= 20% (—Å—Ç–æ–ª–±–µ—Ü N)")
        logger.info("   üü¢ –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ >= 15% (—Å—Ç–æ–ª–±–µ—Ü L)")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {sheet_name}: {e}")
        return False

def apply_all_formatting():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º"""
    logger.info("üé® –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø GOOGLE SHEETS")
    logger.info("=" * 60)
    
    results = {}
    
    # 1. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ª–æ—Ç–æ–≤
    logger.info("\nüìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ª–æ—Ç–æ–≤...")
    results['lots_all'] = format_lots_all_table()
    
    # 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¶–ò–ê–ù
    logger.info("\nüìã –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¶–ò–ê–ù...")
    results['cian_tables'] = format_cian_tables()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 60)
    logger.info("üéâ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    logger.info("=" * 60)
    
    success_count = sum(1 for success in results.values() if success)
    total_count = len(results)
    
    if success_count == total_count:
        logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        logger.warning(f"‚ö†Ô∏è –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ {success_count} –∏–∑ {total_count} –≥—Ä—É–ø–ø —Ç–∞–±–ª–∏—Ü")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    print("\n" + "="*70)
    print("üé® –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ò:")
    print("="*70)
    
    print("üìä –¢–ê–ë–õ–ò–¶–ê –õ–û–¢–û–í (lots_all):")
    print("   ‚úÖ –ß–∏—Å–ª–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 6 (F): –ü–ª–æ—â–∞–¥—å —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é + '–º¬≤'")
    print("      ‚Ä¢ –°—Ç–æ–ª–±—Ü—ã 7-8 (G-H): –¶–µ–Ω—ã –∑–∞ –º¬≤ —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é + '‚ÇΩ'")
    print("      ‚Ä¢ –°—Ç–æ–ª–±—Ü—ã 9-11 (I-K): –°—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é + '‚ÇΩ'")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 13 (M): –ì–ê–ü –≤ —Ä—É–±–ª—è—Ö —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é + '‚ÇΩ'")
    print("   ‚ö†Ô∏è –ü—Ä–æ—Ü–µ–Ω—Ç—ã –ë–ï–ó —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 12 (L): –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è % (–∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ)")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 14 (N): –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å % (–∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ)")
    print("   ‚úÖ –¶–≤–µ—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    print("      ‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å >= 20 ‚Üí –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω")
    print("      ‚Ä¢ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è >= 15 ‚Üí –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω")
    
    print("\nüìã –¢–ê–ë–õ–ò–¶–´ –û–ë–™–Ø–í–õ–ï–ù–ò–ô –¶–ò–ê–ù:")
    print("   ‚úÖ cian_sale_all –∏ cian_rent_all:")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 4 (D): –ü–ª–æ—â–∞–¥—å —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é + '–º¬≤'")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 5 (E): –¶–µ–Ω–∞ –∑–∞ –º¬≤ —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é + '‚ÇΩ'")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 6 (F): –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é + '‚ÇΩ'")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 7 (G): –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º")
    
    print("\nüí° –ü–†–ò–ú–ï–†–´ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("   ‚Ä¢ 1500000 ‚Üí 1,500,000‚ÇΩ")
    print("   ‚Ä¢ 1234.56 ‚Üí 1,234.6 –º¬≤")
    print("   ‚Ä¢ 3.2456 ‚Üí 3.2 –∫–º")
    print("   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç—ã: 20.5 (–∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ %)")
    
    print("="*70)
    
    return success_count == total_count

def format_cian_tables():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¶–ò–ê–ù"""
    
    sheets_to_format = [
        ("cian_sale_all", "–ø—Ä–æ–¥–∞–∂–∏"),
        ("cian_rent_all", "–∞—Ä–µ–Ω–¥—ã")
    ]
    
    success_count = 0
    
    for sheet_name, description in sheets_to_format:
        logger.info(f"üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {description}: {sheet_name}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            sheets_metadata = get_sheet_metadata()
            if not sheets_metadata:
                continue
            
            sheet_id = get_sheet_id_by_name(sheets_metadata, sheet_name)
            if sheet_id is None:
                logger.warning(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
            last_row = get_last_row(sheet_name)
            if last_row <= 1:
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ {sheet_name}")
                continue
            
            logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {sheet_name}: —Å—Ç—Ä–æ–∫–∏ 2-{last_row}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            format_requests = []
            
            # –ß–ò–°–õ–û–í–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ 4-6 (D, E, F)
            columns_to_format = [
                (3, "NUMBER", "#,##0.0\" –º¬≤\""),      # –°—Ç–æ–ª–±–µ—Ü D - –ü–ª–æ—â–∞–¥—å
                (4, "CURRENCY", "#,##0‚ÇΩ"),           # –°—Ç–æ–ª–±–µ—Ü E - –¶–µ–Ω–∞ –∑–∞ –º¬≤
                (5, "CURRENCY", "#,##0‚ÇΩ")            # –°—Ç–æ–ª–±–µ—Ü F - –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            ]
            
            for col_idx, format_type, pattern in columns_to_format:
                format_requests.append({
                    "repeatCell": {
                        "range": {
                            "sheetId": sheet_id,
                            "startRowIndex": 1,  # –°–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
                            "endRowIndex": last_row,
                            "startColumnIndex": col_idx,
                            "endColumnIndex": col_idx + 1
                        },
                        "cell": {
                            "userEnteredFormat": {
                                "numberFormat": {
                                    "type": format_type,
                                    "pattern": pattern
                                }
                            }
                        },
                        "fields": "userEnteredFormat.numberFormat"
                    }
                })
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (G, –∏–Ω–¥–µ–∫—Å 6)
            format_requests.append({
                "repeatCell": {
                    "range": {
                        "sheetId": sheet_id,
                        "startRowIndex": 1,
                        "endRowIndex": last_row,
                        "startColumnIndex": 6,
                        "endColumnIndex": 7
                    },
                    "cell": {
                        "userEnteredFormat": {
                            "numberFormat": {
                                "type": "NUMBER",
                                "pattern": "0.0\" –∫–º\""
                            }
                        }
                    },
                    "fields": "userEnteredFormat.numberFormat"
                }
            })
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if format_requests:
                _svc.spreadsheets().batchUpdate(
                    spreadsheetId=GSHEET_ID,
                    body={"requests": format_requests}
                ).execute()
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω {sheet_name}")
            logger.info("   üìä –ß–∏—Å–ª–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ 4-6")
            success_count += 1
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {sheet_name}: {e}")
    
    return success_count == len(sheets_to_format)

def apply_all_formatting():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º"""
    logger.info("üé® –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø GOOGLE SHEETS")
    logger.info("=" * 60)
    
    results = {}
    
    # 1. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ª–æ—Ç–æ–≤
    logger.info("\nüìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ª–æ—Ç–æ–≤...")
    results['lots_all'] = format_lots_all_table()
    
    # 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¶–ò–ê–ù
    logger.info("\nüìã –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¶–ò–ê–ù...")
    results['cian_tables'] = format_cian_tables()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 60)
    logger.info("üéâ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    logger.info("=" * 60)
    
    success_count = sum(1 for success in results.values() if success)
    total_count = len(results)
    
    if success_count == total_count:
        logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        logger.warning(f"‚ö†Ô∏è –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ {success_count} –∏–∑ {total_count} –≥—Ä—É–ø–ø —Ç–∞–±–ª–∏—Ü")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    print("\n" + "="*70)
    print("üé® –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ò:")
    print("="*70)
    
    print("üìä –¢–ê–ë–õ–ò–¶–ê –õ–û–¢–û–í (lots_all):")
    print("   ‚úÖ –ß–∏—Å–ª–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 6 (F): –ü–ª–æ—â–∞–¥—å —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é + '–º¬≤'")
    print("      ‚Ä¢ –°—Ç–æ–ª–±—Ü—ã 7-8 (G-H): –¶–µ–Ω—ã –∑–∞ –º¬≤ —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é + '‚ÇΩ'")
    print("      ‚Ä¢ –°—Ç–æ–ª–±—Ü—ã 9-11 (I-K): –°—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é + '‚ÇΩ'")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 12 (L): –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤ % (7 ‚Üí 7.0%)")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 13 (M): –ì–ê–ü –≤ —Ä—É–±–ª—è—Ö —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é + '‚ÇΩ'")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 14 (N): –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ % (25 ‚Üí 25.0%)")
    print("   ‚úÖ –¶–≤–µ—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    print("      ‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å >= 20% ‚Üí –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω")
    print("      ‚Ä¢ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è >= 15% ‚Üí –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω")
    
    print("\nüìã –¢–ê–ë–õ–ò–¶–´ –û–ë–™–Ø–í–õ–ï–ù–ò–ô –¶–ò–ê–ù:")
    print("   ‚úÖ cian_sale_all –∏ cian_rent_all:")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 4 (D): –ü–ª–æ—â–∞–¥—å —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é + '–º¬≤'")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 5 (E): –¶–µ–Ω–∞ –∑–∞ –º¬≤ —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é + '‚ÇΩ'")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 6 (F): –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é + '‚ÇΩ'")
    print("      ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 7 (G): –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º")
    
    print("\nüí° –ü–†–ò–ú–ï–†–´ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("   ‚Ä¢ 1500000 ‚Üí 1,500,000‚ÇΩ")
    print("   ‚Ä¢ 7 ‚Üí 7.0% (–¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, –ë–ï–ó —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ 100)")
    print("   ‚Ä¢ 1234.56 ‚Üí 1,234.6 –º¬≤")
    print("   ‚Ä¢ 3.2456 ‚Üí 3.2 –∫–º")
    
    print("="*70)
    
    return success_count == total_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
    logging.basicConfig(
        level=logging.INFO, 
        format="%(asctime)s %(levelname)s: %(message)s"
    )
    
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Sheets —Ç–∞–±–ª–∏—Ü...")
    
    try:
        success = apply_all_formatting()
        
        if success:
            logger.info("üéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            print("\nüöÄ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Google Sheets.")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å")
            print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

# if __name__ == "__main__":
#    main()