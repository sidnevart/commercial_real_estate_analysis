"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –°–ê–ú–û–ì–û –õ–û–ö–ê–õ–¨–ù–û–ì–û —ç–ª–µ–º–µ–Ω—Ç–∞ –∞–¥—Ä–µ—Å–∞ (—É–ª–∏—Ü–∞/—Ä–∞–π–æ–Ω/–≥–æ—Ä–æ–¥)
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º GPT-–∞–Ω–∞–ª–∏–∑–æ–º
"""

import logging
import sys
import re
from pathlib import Path
from typing import List, Dict, Tuple, Optional

sys.path.append(str(Path(__file__).parent))

from core.gpt_tunnel_client import sync_chat

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
logger = logging.getLogger(__name__)

def extract_most_local_address_part(address: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –°–ê–ú–´–ô –õ–û–ö–ê–õ–¨–ù–´–ô —ç–ª–µ–º–µ–Ω—Ç –∞–¥—Ä–µ—Å–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:
    1. –£–ª–∏—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) - —Å–∞–º–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ
    2. –†–∞–π–æ–Ω/–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω 
    3. –ì–æ—Ä–æ–¥
    4. –û–±–ª–∞—Å—Ç—å
    """
    if not address:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
    address_lower = address.lower().strip()
    logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: '{address}'")
    
    # 1. –ü–†–ò–û–†–ò–¢–ï–¢: –£–ª–∏—Ü—ã (—Å–∞–º–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ)
    street_patterns = [
        r'—É–ª\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'—É–ª–∏—Ü–∞\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–ø—Ä-—Ç\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–ø—Ä–æ—Å–ø–µ–∫—Ç\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–ø–µ—Ä\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–ø–µ—Ä–µ—É–ª–æ–∫\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–±-—Ä\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–±—É–ª—å–≤–∞—Ä\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–Ω–∞–±\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'—à\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'—à–æ—Å—Å–µ\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ "–ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü–∞"
        r'([–ê-–Ø–∞-—è—ë\s\-0-9]+?)\s+—É–ª–∏—Ü–∞(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
        r'([–ê-–Ø–∞-—è—ë\s\-0-9]+?)\s+–ø—Ä–æ—Å–ø–µ–∫—Ç(?:\s*,|\s+–¥|\s+–¥–æ–º|\s*$)',
    ]
    
    for pattern in street_patterns:
        match = re.search(pattern, address_lower)
        if match:
            street_name = match.group(1).strip().title()
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            street_name = re.sub(r'\s+', ' ', street_name)
            if len(street_name) > 3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü—ã
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —É–ª–∏—Ü–∞ (—Å–∞–º–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ): {street_name}")
                return street_name
    
    # 2. –†–∞–π–æ–Ω—ã/–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω—ã (–µ—Å–ª–∏ —É–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)
    district_patterns = [
        r'–º–∫—Ä\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s*$)',
        r'–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s*$)',
        r'—Ä-–Ω\.?\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s*$)',
        r'—Ä–∞–π–æ–Ω\s+([–ê-–Ø–∞-—è—ë\s\-0-9]+?)(?:\s*,|\s*$)',
        r'([–ê-–Ø–∞-—è—ë\s\-]+?)\s+—Ä–∞–π–æ–Ω(?:\s*,|\s*$)',
        r'([–ê-–Ø–∞-—è—ë\s\-]+?)\s+–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω(?:\s*,|\s*$)',
    ]
    
    for pattern in district_patterns:
        match = re.search(pattern, address_lower)
        if match:
            district_name = match.group(1).strip().title()
            if len(district_name) > 2:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–π–æ–Ω: {district_name}")
                return district_name
    
    # 3. –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ú–æ—Å–∫–≤—ã
    moscow_districts = [
        "–ü–µ—Ä–æ–≤–æ", "–ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ", "–ò–∑–º–∞–π–ª–æ–≤–æ", "–ë–æ–≥–æ—Ä–æ–¥—Å–∫–æ–µ", "–í–µ—à–Ω—è–∫–∏",
        "–ë–∞—Å–º–∞–Ω–Ω—ã–π", "–•–∞–º–æ–≤–Ω–∏–∫–∏", "–ê—Ä–±–∞—Ç", "–¢–≤–µ—Ä—Å–∫–æ–π", "–ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∏–π",
        "–û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π", "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏", "–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π", "–¢–∞–≥–∞–Ω—Å–∫–∏–π",
        "–ê–ª–µ–∫—Å–µ–µ–≤—Å–∫–∏–π", "–ë–∞–±—É—à–∫–∏–Ω—Å–∫–∏–π", "–ë–∏–±–∏—Ä–µ–≤–æ", "–ë—É—Ç—ã—Ä—Å–∫–∏–π",
        "–ö—É–∑—å–º–∏–Ω–∫–∏", "–õ—é–±–ª–∏–Ω–æ", "–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏", "–ú–∞—Ä—å–∏–Ω–æ", "–ë—Ä–∞—Ç–µ–µ–≤–æ",
        "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π", "–ì–∞–≥–∞—Ä–∏–Ω—Å–∫–∏–π", "–ß–µ—Ä—ë–º—É—à–∫–∏", "–ö–æ–Ω—å–∫–æ–≤–æ",
        "–ú–∏—Ç–∏–Ω–æ", "–°—Ç—Ä–æ–≥–∏–Ω–æ", "–ö—Ä—ã–ª–∞—Ç—Å–∫–æ–µ", "–ö—É–Ω—Ü–µ–≤–æ", "–°–æ–ª–Ω—Ü–µ–≤–æ",
        "–ó—é–∑–∏–Ω–æ", "–ö–æ—Ç–ª–æ–≤–∫–∞", "–î–æ—Ä–æ–≥–æ–º–∏–ª–æ–≤–æ", "–ú–æ–∂–∞–π—Å–∫–∏–π", "–û—á–∞–∫–æ–≤–æ-–ú–∞—Ç–≤–µ–µ–≤—Å–∫–æ–µ",
        "–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—á—å–µ", "–Ø–∫–∏–º–∞–Ω–∫–∞", "–ú–µ—â–∞–Ω—Å–∫–∏–π", "–õ–µ—Ñ–æ—Ä—Ç–æ–≤–æ", "–ù–µ–∫—Ä–∞—Å–æ–≤–∫–∞",
        "–ü–µ—á–∞—Ç–Ω–∏–∫–∏", "–†—è–∑–∞–Ω—Å–∫–∏–π", "–Æ–∂–Ω–æ–ø–æ—Ä—Ç–æ–≤—ã–π", "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∏–π", "–ö–∞–ø–æ—Ç–Ω—è",
        "–î–∞–Ω–∏–ª–æ–≤—Å–∫–∏–π", "–î–æ–Ω—Å–∫–æ–π", "–ó—è–±–ª–∏–∫–æ–≤–æ", "–ú–æ—Å–∫–≤–æ—Ä–µ—á—å–µ-–°–∞–±—É—Ä–æ–≤–æ",
        "–ù–∞–≥–∞—Ç–∏–Ω–æ-–°–∞–¥–æ–≤–Ω–∏–∫–∏", "–ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∏–π –ó–∞—Ç–æ–Ω", "–ù–∞–≥–æ—Ä–Ω—ã–π", "–¶–∞—Ä–∏—Ü—ã–Ω–æ",
        "–ß–µ—Ä—Ç–∞–Ω–æ–≤–æ –°–µ–≤–µ—Ä–Ω–æ–µ", "–ß–µ—Ä—Ç–∞–Ω–æ–≤–æ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ", "–ß–µ—Ä—Ç–∞–Ω–æ–≤–æ –Æ–∂–Ω–æ–µ",
        "–ë–∏—Ä—é–ª—ë–≤–æ –í–æ—Å—Ç–æ—á–Ω–æ–µ", "–ë–∏—Ä—é–ª—ë–≤–æ –ó–∞–ø–∞–¥–Ω–æ–µ", "–õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∏–π", "–û–±—Ä—É—á–µ–≤—Å–∫–∏–π",
        "–°–µ–≤–µ—Ä–Ω–æ–µ –ë—É—Ç–æ–≤–æ", "–¢—ë–ø–ª—ã–π –°—Ç–∞–Ω", "–Æ–∂–Ω–æ–µ –ë—É—Ç–æ–≤–æ", "–Ø—Å–µ–Ω–µ–≤–æ",
        "–ù–æ–≤–æ-–ü–µ—Ä–µ–¥–µ–ª–∫–∏–Ω–æ", "–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ä–Ω–∞–¥—Å–∫–æ–≥–æ", "–†–∞–º–µ–Ω–∫–∏", "–¢—Ä–æ–ø–∞—Ä—ë–≤–æ-–ù–∏–∫—É–ª–∏–Ω–æ",
        "–§–∏–ª—ë–≤—Å–∫–∏–π –ü–∞—Ä–∫", "–§–∏–ª–∏-–î–∞–≤—ã–¥–∫–æ–≤–æ", "–ö—É—Ä–∫–∏–Ω–æ", "–ü–æ–∫—Ä–æ–≤—Å–∫–æ–µ-–°—Ç—Ä–µ—à–Ω–µ–≤–æ",
        "–°–µ–≤–µ—Ä–Ω–æ–µ –¢—É—à–∏–Ω–æ", "–•–æ—Ä–æ—à—ë–≤–æ-–ú–Ω—ë–≤–Ω–∏–∫–∏", "–©—É–∫–∏–Ω–æ", "–Æ–∂–Ω–æ–µ –¢—É—à–∏–Ω–æ"
    ]
    
    for district in moscow_districts:
        if district.lower() in address_lower:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω –ú–æ—Å–∫–≤—ã: {district}")
            return district
    
    # 4. –ì–æ—Ä–æ–¥–∞ –ú–û (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)
    mo_cities = {
        '–∫–ª–∏–Ω': '–ö–ª–∏–Ω', '–º—ã—Ç–∏—â–∏': '–ú—ã—Ç–∏—â–∏', '–ø–æ–¥–æ–ª—å—Å–∫': '–ü–æ–¥–æ–ª—å—Å–∫',
        '–æ—Ä–µ—Ö–æ–≤–æ-–∑—É–µ–≤–æ': '–û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ', '–ª—ã—Ç–∫–∞—Ä–∏–Ω–æ': '–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ',
        '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫', '—Ö–∏–º–∫–∏': '–•–∏–º–∫–∏', '–±–∞–ª–∞—à–∏—Ö–∞': '–ë–∞–ª–∞—à–∏—Ö–∞',
        '–∫–æ—Ä–æ–ª—ë–≤': '–ö–æ—Ä–æ–ª—ë–≤', '–ª—é–±–µ—Ä—Ü—ã': '–õ—é–±–µ—Ä—Ü—ã', '–∫—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫': '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫',
        '–æ–¥–∏–Ω—Ü–æ–≤–æ': '–û–¥–∏–Ω—Ü–æ–≤–æ', '–¥–æ–º–æ–¥–µ–¥–æ–≤–æ': '–î–æ–º–æ–¥–µ–¥–æ–≤–æ', '—Ä–µ—É—Ç–æ–≤': '–†–µ—É—Ç–æ–≤',
        '–ø—É—à–∫–∏–Ω–æ': '–ü—É—à–∫–∏–Ω–æ', '—â—ë–ª–∫–æ–≤–æ': '–©—ë–ª–∫–æ–≤–æ', '–Ω–æ–≥–∏–Ω—Å–∫': '–ù–æ–≥–∏–Ω—Å–∫',
        '—Å–µ—Ä–ø—É—Ö–æ–≤': '–°–µ—Ä–ø—É—Ö–æ–≤', '—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å': '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å',
        '–∂—É–∫–æ–≤—Å–∫–∏–π': '–ñ—É–∫–æ–≤—Å–∫–∏–π', '–∫–æ–ª–æ–º–Ω–∞': '–ö–æ–ª–æ–º–Ω–∞', '–∫–æ—Ç–µ–ª—å–Ω–∏–∫–∏': '–ö–æ—Ç–µ–ª—å–Ω–∏–∫–∏',
        '–¥–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π': '–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π', '–ª–æ–±–Ω—è': '–õ–æ–±–Ω—è', '–∏–≤–∞–Ω—Ç–µ–µ–≤–∫–∞': '–ò–≤–∞–Ω—Ç–µ–µ–≤–∫–∞',
        '—Ñ—Ä—è–∑–∏–Ω–æ': '–§—Ä—è–∑–∏–Ω–æ', '–¥–æ–ª–≥–æ–ø—Ä—É–¥–Ω—ã–π': '–î–æ–ª–≥–æ–ø—Ä—É–¥–Ω—ã–π', '–≤–∏–¥–Ω–æ–µ': '–í–∏–¥–Ω–æ–µ',
        '–∫–ª–∏–º–æ–≤—Å–∫': '–ö–ª–∏–º–æ–≤—Å–∫', '—Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ—Ä—Å–∫': '–°–æ–ª–Ω–µ—á–Ω–æ–≥–æ—Ä—Å–∫'
    }
    
    for city_key, city_name in mo_cities.items():
        if city_key in address_lower:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥ –ú–û: {city_name}")
            return city_name
    
    # 5. –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥
    if '–∑–µ–ª–µ–Ω–æ–≥—Ä–∞–¥' in address_lower:
        return "–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥"
    
    # 6. Fallback –∫ –æ–±—â–∏–º –æ–±–ª–∞—Å—Ç—è–º
    if any(word in address_lower for word in ['–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–º–æ']):
        return "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
    elif any(word in address_lower for word in ['–º–æ—Å–∫–≤–∞']):
        return "–ú–æ—Å–∫–≤–∞"
    
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def gpt_extract_most_local_part_fixed(address: str) -> str:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô GPT-–∞–Ω–∞–ª–∏–∑ —Å —Ç–æ—á–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    """
    if not address:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∞–¥—Ä–µ—Å –∏ –Ω–∞–π–¥–∏ –°–ê–ú–´–ô –õ–û–ö–ê–õ–¨–ù–´–ô —ç–ª–µ–º–µ–Ω—Ç.

–ê–î–†–ï–°: "{address}"

–ó–ê–î–ê–ß–ê: –í—ã–±–µ—Ä–∏ –¢–û–õ–¨–ö–û –û–î–ò–ù —Å–∞–º—ã–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:

–ü–†–ò–û–†–ò–¢–ï–¢ (–æ—Ç —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ):
1. üî• –£–õ–ò–¶–ê - —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ! (–ì–∞–≥–∞—Ä–∏–Ω–∞, –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è, –ú–∏—Ä–∞, –¢–≤–µ—Ä—Å–∫–∞—è)
2. üìç –†–ê–ô–û–ù/–ú–ò–ö–†–û–†–ê–ô–û–ù - –µ—Å–ª–∏ –Ω–µ—Ç —É–ª–∏—Ü—ã (–ü–µ—Ä–æ–≤–æ, –•–∞–º–æ–≤–Ω–∏–∫–∏, –ö–ª–∏–º–æ–≤—Å–∫)  
3. üèôÔ∏è –ì–û–†–û–î - –µ—Å–ª–∏ –Ω–µ—Ç —É–ª–∏—Ü—ã –∏ —Ä–∞–π–æ–Ω–∞ (–ö–ª–∏–Ω, –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫)
4. üåç –û–ë–õ–ê–°–¢–¨ - —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ

–ö–û–ù–ö–†–ï–¢–ù–´–ï –ü–†–ò–ú–ï–†–´:

‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û:
"—É–ª –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥–æ–º 6" ‚Üí –û–¢–í–ï–¢: –ì–∞–≥–∞—Ä–∏–Ω–∞
"–ø—Ä-—Ç –ú–∏—Ä–∞, 119" ‚Üí –û–¢–í–ï–¢: –ú–∏—Ä–∞  
"–≥ –ú–æ—Å–∫–≤–∞, –í–ê–û, –ü–µ—Ä–æ–≤–æ, —É–ª –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è" ‚Üí –û–¢–í–ï–¢: –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è
"–ú–æ—Å–∫–≤–∞, —Ä–∞–π–æ–Ω –•–∞–º–æ–≤–Ω–∏–∫–∏" ‚Üí –û–¢–í–ï–¢: –•–∞–º–æ–≤–Ω–∏–∫–∏
"–º–∫—Ä –ö–ª–∏–º–æ–≤—Å–∫" ‚Üí –û–¢–í–ï–¢: –ö–ª–∏–º–æ–≤—Å–∫
"–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥, –∫–æ—Ä–ø—É—Å 847" ‚Üí –û–¢–í–ï–¢: –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥
"–æ–±–ª –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, –≥.–æ. –í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫, —Ä–ø –∏–º. –¶—é—Ä—É–ø—ã" ‚Üí –û–¢–í–ï–¢: –∏–º. –¶—é—Ä—É–ø—ã
"–¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞, 7" ‚Üí –û–¢–í–ï–¢: –¢–≤–µ—Ä—Å–∫–∞—è
"–û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω" ‚Üí –û–¢–í–ï–¢: –û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π

‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:
"—É–ª –ì–∞–≥–∞—Ä–∏–Ω–∞" ‚Üí –ù–ï "–∞–≥–∞—Ä–∏–Ω–∞" (–ù–ï —Å—Ä–µ–∑–∞–π –ø–µ—Ä–≤—É—é –±—É–∫–≤—É!)
"–ø—Ä-—Ç –ú–∏—Ä–∞" ‚Üí –ù–ï "–∏—Ä–∞" (–ù–ï —Å—Ä–µ–∑–∞–π –Ω–∞—á–∞–ª–æ!)
"–¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞" ‚Üí –ù–ï "–¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞" (—É–±–µ—Ä–∏ —Å–ª–æ–≤–æ "—É–ª–∏—Ü–∞"!)
"–û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω" ‚Üí –ù–ï "–û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω" (—É–±–µ—Ä–∏ —Å–ª–æ–≤–æ "—Ä–∞–π–æ–Ω"!)

–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
- –ù–ï —Å—Ä–µ–∑–∞–π –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –Ω–∞–∑–≤–∞–Ω–∏–π!
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ø—Ä–µ—Ñ–∏–∫—Å—ã (—É–ª., –≥., –º–∫—Ä.)
- –ù–ï –≤–∫–ª—é—á–∞–π —Å–ª–æ–≤–∞ "—É–ª–∏—Ü–∞", "—Ä–∞–π–æ–Ω", "–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω" –≤ –æ—Ç–≤–µ—Ç
- –ù–ï –≤—ã–±–∏—Ä–∞–π –æ–∫—Ä—É–≥–∞ (–í–ê–û, –°–í–ê–û, –¶–ê–û)
- –°–æ—Ö—Ä–∞–Ω—è–π –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è: "–ê–∫–∞–¥–µ–º–∏–∫–∞ –ö–∞—Ä–≥–∏–Ω–∞", "–∏–º. –¶—é—Ä—É–ø—ã"

–ê–õ–ì–û–†–ò–¢–ú:
1. –ò—â–∏ —É–ª–∏—Ü—É (—É–ª., –ø—Ä-—Ç, –±-—Ä, –Ω–∞–±.) - –µ—Å–ª–∏ –µ—Å—Ç—å, –≤—ã–±–µ—Ä–∏ –µ—ë
2. –ï—Å–ª–∏ —É–ª–∏—Ü—ã –Ω–µ—Ç - –∏—â–∏ —Ä–∞–π–æ–Ω/–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω  
3. –ï—Å–ª–∏ —Ä–∞–π–æ–Ω–∞ –Ω–µ—Ç - –∏—â–∏ –≥–æ—Ä–æ–¥
4. –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç - –æ–±–ª–∞—Å—Ç—å

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —á–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ —Å–ª–æ–≤ "—É–ª–∏—Ü–∞"/"—Ä–∞–π–æ–Ω".
"""
    
    try:
        response = sync_chat(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system", 
                    "content": "–¢—ã —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤. –ù–ò–ö–û–ì–î–ê –Ω–µ —Å—Ä–µ–∑–∞–π –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –Ω–∞–∑–≤–∞–Ω–∏–π. –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–π –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü, —Ä–∞–π–æ–Ω–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤ –ë–ï–ó —Å–ª–æ–≤ '—É–ª–∏—Ü–∞' –∏ '—Ä–∞–π–æ–Ω'."
                },
                {"role": "user", "content": prompt}
            ],
            max_tokens=100
        )
        
        result = response.strip().strip('"').strip("'").strip()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
        prefixes_to_remove = [
            r'^—É–ª\.?\s+',
            r'^—É–ª–∏—Ü–∞\s+', 
            r'^–ø—Ä-—Ç\.?\s+',
            r'^–ø—Ä–æ—Å–ø–µ–∫—Ç\s+',
            r'^–Ω–∞–±\.?\s+',
            r'^–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è\s+',
            r'^–±-—Ä\.?\s+',
            r'^–±—É–ª—å–≤–∞—Ä\s+',
            r'^–ø–µ—Ä\.?\s+',
            r'^–ø–µ—Ä–µ—É–ª–æ–∫\s+',
            r'^—à\.?\s+',
            r'^—à–æ—Å—Å–µ\s+',
            r'^–≥\.?\s+',
            r'^–≥–æ—Ä–æ–¥\s+',
            r'^–º–∫—Ä\.?\s+',
            r'^–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω\s+',
            r'^—Ä–∞–π–æ–Ω\s+',
            r'^—Ä-–Ω\.?\s+',
            r'^–º\.?\s+',
            r'^–º–µ—Ç—Ä–æ\s+'
        ]
        
        # –°—É—Ñ—Ñ–∏–∫—Å—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        suffixes_to_remove = [
            r'\s+—É–ª–∏—Ü–∞$',
            r'\s+–ø—Ä–æ—Å–ø–µ–∫—Ç$',
            r'\s+–±—É–ª—å–≤–∞—Ä$',
            r'\s+–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è$',
            r'\s+–ø–µ—Ä–µ—É–ª–æ–∫$',
            r'\s+—à–æ—Å—Å–µ$',
            r'\s+—Ä–∞–π–æ–Ω$',
            r'\s+–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω$'
        ]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
        for prefix_pattern in prefixes_to_remove:
            if re.match(prefix_pattern, result, flags=re.IGNORECASE):
                result = re.sub(prefix_pattern, '', result, flags=re.IGNORECASE).strip()
                break  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
        for suffix_pattern in suffixes_to_remove:
            result = re.sub(suffix_pattern, '', result, flags=re.IGNORECASE).strip()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        if len(result) >= 2 and len(result) <= 80:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            forbidden = ['–º–æ—Å–∫–≤–∞', '–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–º–æ', '–≤–∞–æ', '—Å–≤–∞–æ', '—Ü–∞–æ', '—é–∞–æ', '—Å–∞–æ', '–∑–∞–æ', '—é–∑–∞–æ', '—Å–∑–∞–æ']
            if result.lower() not in forbidden:
                logger.info(f"üéØ GPT –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∏–∑–≤–ª–µ–∫: '{result}'")
                return result
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        logger.warning(f"GPT –≤–µ—Ä–Ω—É–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{result}', –ø—Ä–∏–º–µ–Ω—è–µ–º REGEX fallback")
        return extract_most_local_address_part(address)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ GPT: {e}")
        return extract_most_local_address_part(address)

def gpt_extract_most_local_part_simple(address: str) -> str:
    """
    –ü—Ä–æ—Å—Ç–æ–π GPT-–∞–Ω–∞–ª–∏–∑ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    """
    if not address:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
    prompt = f"""
–ù–∞–π–¥–∏ –°–ê–ú–´–ô –õ–û–ö–ê–õ–¨–ù–´–ô —ç–ª–µ–º–µ–Ω—Ç –≤ –∞–¥—Ä–µ—Å–µ:

–ê–î–†–ï–°: "{address}"

–ü–†–ò–û–†–ò–¢–ï–¢: –£–ª–∏—Ü–∞ ‚Üí –†–∞–π–æ–Ω ‚Üí –ì–æ—Ä–æ–¥ ‚Üí –û–±–ª–∞—Å—Ç—å

–ü–†–ò–ú–ï–†–´:
- "—É–ª –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥–æ–º 6" ‚Üí "–ì–∞–≥–∞—Ä–∏–Ω–∞"
- "–≥ –ú–æ—Å–∫–≤–∞, –í–ê–û, –ü–µ—Ä–æ–≤–æ, —É–ª –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è" ‚Üí "–ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è"
- "—Ä–∞–π–æ–Ω –•–∞–º–æ–≤–Ω–∏–∫–∏" ‚Üí "–•–∞–º–æ–≤–Ω–∏–∫–∏"
- "–≥ –ö–ª–∏–Ω" ‚Üí "–ö–ª–∏–Ω"

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤.
"""
    
    try:
        response = sync_chat(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–ù–∞–π–¥–∏ —Å–∞–º—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∞–¥—Ä–µ—Å–∞."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=50
        )
        
        result = response.strip().strip('"').strip("'")
        result = re.sub(r'^(—É–ª\.?|–≥\.?|–º–∫—Ä\.?|—Ä–∞–π–æ–Ω)\s*', '', result, flags=re.IGNORECASE)
        result = result.strip()
        
        if 2 <= len(result) <= 50:
            return result
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ GPT: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def test_fixed_gpt_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ç—Ä–∏ –º–µ—Ç–æ–¥–∞: REGEX, GPT –ø—Ä–æ—Å—Ç–æ–π, GPT –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π"""
    
    test_cases = [
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
        ("–æ–±–ª –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, –≥.–æ. –ö–ª–∏–Ω, –≥ –ö–ª–∏–Ω, —É–ª –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥–æ–º 6", "–ì–∞–≥–∞—Ä–∏–Ω–∞"),
        ("–≥ –ú–æ—Å–∫–≤–∞, –ø—Ä-—Ç –ú–∏—Ä–∞, 119", "–ú–∏—Ä–∞"),
        ("–≥ –ú–æ—Å–∫–≤–∞, –í–ê–û, –ü–µ—Ä–æ–≤–æ", "–ü–µ—Ä–æ–≤–æ"),
        ("–æ–±–ª –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, –≥.–æ. –í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫, —Ä–ø –∏–º. –¶—é—Ä—É–ø—ã", "–∏–º. –¶—é—Ä—É–ø—ã"),
        ("–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã
        ("–æ–±–ª –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, –≥.–æ. –ü–æ–¥–æ–ª—å—Å–∫, –≥ –ü–æ–¥–æ–ª—å—Å–∫, —É–ª –ü—Ä–∞–≤–¥—ã, –¥–æ–º 20", "–ü—Ä–∞–≤–¥—ã"),
        ("–≥ –ú–æ—Å–∫–≤–∞, –í–ê–û, –ü–µ—Ä–æ–≤–æ, —É–ª –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è, –¥ 42", "–ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è"),
        ("–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ú—ã—Ç–∏—â–∏, —É–ª. –ê–∫–∞–¥–µ–º–∏–∫–∞ –ö–∞—Ä–≥–∏–Ω–∞, 38–∫1", "–ê–∫–∞–¥–µ–º–∏–∫–∞ –ö–∞—Ä–≥–∏–Ω–∞"),
        ("–ú–æ—Å–∫–≤–∞, –º. –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ, —É–ª. –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è, 28", "–ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è"),
        ("–ú–æ—Å–∫–≤–∞, –¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞, 7", "–¢–≤–µ—Ä—Å–∫–∞—è"),
        ("–≥ –ú–æ—Å–∫–≤–∞, —É–ª –¢–≤–µ—Ä—Å–∫–∞—è, –¥–æ–º 7", "–¢–≤–µ—Ä—Å–∫–∞—è"),
        ("–ú–æ—Å–∫–≤–∞, –ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, –¥–æ–º 12", "–ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è"),
        ("–≥ –ú–æ—Å–∫–≤–∞ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ –ë–∞—Å–º–∞–Ω–Ω—ã–π —É–ª –ü–æ–∫—Ä–æ–≤–∫–∞ –¥–æ–º 42", "–ü–æ–∫—Ä–æ–≤–∫–∞"),
        ("–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥ –•–∏–º–∫–∏, —É–ª –ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è, –¥–æ–º 4", "–ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è"),
        
        # –ü—Ä–æ—Å–ø–µ–∫—Ç—ã, –±—É–ª—å–≤–∞—Ä—ã
        ("–ú–æ—Å–∫–≤–∞, –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –ë–¶ –ì–æ—Ä–∏–∑–æ–Ω—Ç", "–õ–µ–Ω–∏–Ω—Å–∫–∏–π"),
        ("–ú–æ—Å–∫–≤–∞, –±-—Ä –ß–∏—Å—Ç–æ–ø—Ä—É–¥–Ω—ã–π, 12", "–ß–∏—Å—Ç–æ–ø—Ä—É–¥–Ω—ã–π"),
        
        # –°–ª—É—á–∞–∏ –±–µ–∑ —É–ª–∏—Ü - —Ä–∞–π–æ–Ω—ã
        ("–ú–æ—Å–∫–≤–∞, —Ä–∞–π–æ–Ω –•–∞–º–æ–≤–Ω–∏–∫–∏", "–•–∞–º–æ–≤–Ω–∏–∫–∏"),
        ("–≥. –ú–æ—Å–∫–≤–∞, –°–í–ê–û, –û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π"),
        ("–º–∫—Ä –ö–ª–∏–º–æ–≤—Å–∫", "–ö–ª–∏–º–æ–≤—Å–∫"),
        
        # –ì–æ—Ä–æ–¥–∞ (–µ—Å–ª–∏ –Ω–µ—Ç —É–ª–∏—Ü –∏ —Ä–∞–π–æ–Ω–æ–≤)
        ("–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥, –∫–æ—Ä–ø—É—Å 847", "–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥"),
        ("–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –ë–∞–ª–∞—à–∏—Ö–∞", "–ë–∞–ª–∞—à–∏—Ö–∞"),
        
        # –°–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏
        ("–≥ –ú–æ—Å–∫–≤–∞ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ –ë–∞—Å–º–∞–Ω–Ω—ã–π", "–ë–∞—Å–º–∞–Ω–Ω—ã–π"),
        ("–ú–æ—Å–∫–≤–∞, –º. –ê—Ä–±–∞—Ç—Å–∫–∞—è, –ê—Ä–±–∞—Ç, 10", "–ê—Ä–±–∞—Ç"),  # –ê—Ä–±–∞—Ç - –∏ —É–ª–∏—Ü–∞ –∏ —Ä–∞–π–æ–Ω
        
        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        ("", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
    ]
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û GPT: REGEX vs GPT-–ü–†–û–°–¢–û–ô vs GPT-–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô")
    print("=" * 110)
    print(f"{'‚Ññ':<3} {'–ú–µ—Ç–æ–¥':<15} {'–†–µ–∑—É–ª—å—Ç–∞—Ç':<12} {'–ê–¥—Ä–µ—Å':<50} {'–û–∂–∏–¥–∞–µ–º—ã–π':<15} {'–ü–æ–ª—É—á–µ–Ω'}")
    print("=" * 110)
    
    correct_regex = 0
    correct_gpt_simple = 0
    correct_gpt_fixed = 0
    total = len(test_cases)
    
    for i, (address, expected) in enumerate(test_cases, 1):
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–∏ –º–µ—Ç–æ–¥–∞
        regex_result = extract_most_local_address_part(address)
        gpt_simple_result = gpt_extract_most_local_part_simple(address)
        gpt_fixed_result = gpt_extract_most_local_part_fixed(address)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
        regex_correct = regex_result == expected
        gpt_simple_correct = gpt_simple_result == expected
        gpt_fixed_correct = gpt_fixed_result == expected
        
        if regex_correct:
            correct_regex += 1
        if gpt_simple_correct:
            correct_gpt_simple += 1
        if gpt_fixed_correct:
            correct_gpt_fixed += 1
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        address_short = address[:45] + "..." if len(address) > 45 else address
        
        regex_status = "‚úÖ OK" if regex_correct else "‚ùå FAIL"
        gpt_simple_status = "‚úÖ OK" if gpt_simple_correct else "‚ùå FAIL"
        gpt_fixed_status = "‚úÖ OK" if gpt_fixed_correct else "‚ùå FAIL"
        
        print(f"{i:<3} {'REGEX':<15} {regex_status:<12} {address_short:<50} {expected:<15} {regex_result}")
        print(f"{i:<3} {'GPT-–ü–†–û–°–¢–û–ô':<15} {gpt_simple_status:<12} {address_short:<50} {expected:<15} {gpt_simple_result}")
        print(f"{i:<3} {'GPT-–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô':<15} {gpt_fixed_status:<12} {address_short:<50} {expected:<15} {gpt_fixed_result}")
        print("-" * 110)
    
    print("=" * 110)
    print(f"üìä –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print(f"REGEX:             {correct_regex}/{total} ({correct_regex/total*100:.1f}%) —É—Å–ø–µ—à–Ω–æ")
    print(f"GPT-–ü–†–û–°–¢–û–ô:       {correct_gpt_simple}/{total} ({correct_gpt_simple/total*100:.1f}%) —É—Å–ø–µ—à–Ω–æ")
    print(f"GPT-–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô:  {correct_gpt_fixed}/{total} ({correct_gpt_fixed/total*100:.1f}%) —É—Å–ø–µ—à–Ω–æ")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π –º–µ—Ç–æ–¥
    scores = {
        "regex": correct_regex,
        "gpt_simple": correct_gpt_simple,
        "gpt_fixed": correct_gpt_fixed
    }
    
    best_method = max(scores, key=scores.get)
    best_score = scores[best_method]
    
    print(f"\nüèÜ –õ–£–ß–®–ò–ô –ú–ï–¢–û–î: {best_method.upper().replace('_', '-')} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {best_score}/{total}")
    
    if best_method == "gpt_fixed":
        print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô GPT –ø–æ–∫–∞–∑–∞–ª –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gpt_extract_most_local_part_fixed")
    elif best_method == "gpt_simple":
        print("üéØ –ü–†–û–°–¢–û–ô GPT –ø–æ–∫–∞–∑–∞–ª –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gpt_extract_most_local_part_simple")
    else:
        print("üìä REGEX –ø–æ–∫–∞–∑–∞–ª –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å extract_most_local_address_part")
    
    return best_method

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def improved_lot_district_parser(address: str) -> str:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π GPT"""
    return gpt_extract_most_local_part_fixed(address)

def gpt_parse_lot_district(address: str) -> str:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π GPT"""
    return gpt_extract_most_local_part_fixed(address)

"""if __name__ == "__main__":
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û GPT")
    print("–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã: —Å—Ä–µ–∑–∞–Ω–∏–µ –±—É–∫–≤, –Ω–µ—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    print("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –£–ª–∏—Ü–∞ ‚Üí –†–∞–π–æ–Ω ‚Üí –ì–æ—Ä–æ–¥ ‚Üí –û–±–ª–∞—Å—Ç—å")
    print()
    
    best_method = test_fixed_gpt_extraction()
    
    print(f"\nüí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í GPT:")
    print("‚úÖ –°—Ç—Ä–æ–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ù–ï —Å—Ä–µ–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã")
    print("‚úÖ –û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤")
    print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤ '—É–ª–∏—Ü–∞' –∏ '—Ä–∞–π–æ–Ω' –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    print("‚úÖ Fallback –∫ REGEX –ø—Ä–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
    print("‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏")"""