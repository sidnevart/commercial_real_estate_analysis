"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∞–¥—Ä–µ—Å–∞–º–∏:
1. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –∞–¥—Ä–µ—Å–∞—Ö
2. –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ —è–∑—ã–∫–∞ –≤ –≥–µ–æ–∫–æ–¥–µ—Ä–∞—Ö
4. –ö–∞—Å–∫–∞–¥–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º —É–ø—Ä–æ—â–µ–Ω–∏–µ–º
"""

import re
import logging
from typing import List, Optional, Tuple
from core.gpt_tunnel_client import sync_chat

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ geopy —Å–Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ - –ø–æ–¥–∫–ª—é—á–∏–º
try:
    from geopy.geocoders import Nominatim, Photon
    from geopy.exc import GeocoderTimedOut, GeocoderServiceError, GeocoderQuotaExceeded
    GEOPY_AVAILABLE = True
except ImportError:
    GEOPY_AVAILABLE = False

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
logger = logging.getLogger(__name__)

def remove_redundant_admin(address: str) -> str:
    """
    –£–±–∏—Ä–∞–µ—Ç –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –≥.–æ. + –≥ –ì–æ—Ä–æ–¥ ‚Üí –≥ –ì–æ—Ä–æ–¥
    """
    result = address
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    cleanup_patterns = [
        # "–≥.–æ. –ö–ª–∏–Ω, –≥ –ö–ª–∏–Ω" ‚Üí "–≥ –ö–ª–∏–Ω"
        (r'–≥\.–æ\.\s+([–ê-–Ø–∞-—è—ë\-]+),?\s*–≥\s+\1', r'–≥ \1'),
        # "–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –ö–ª–∏–Ω, –≥ –ö–ª–∏–Ω" ‚Üí "–≥ –ö–ª–∏–Ω"
        (r'–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥\s+([–ê-–Ø–∞-—è—ë\-]+),?\s*–≥\s+\1', r'–≥ \1'),
        # –£–±–∏—Ä–∞–µ–º –≤–Ω.—Ç–µ—Ä.–≥.
        (r'–≤–Ω\.—Ç–µ—Ä\.–≥\.[^,]*,?\s*', ''),
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
        (r'–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥[^,]*,?\s*', ''),
        (r'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥[^,]*,?\s*', ''),
        # –†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è –≤ –Ω–∞—á–∞–ª–µ
        (r'^–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è,?\s*', ''),
    ]
    
    for pattern, replacement in cleanup_patterns:
        result = re.sub(pattern, replacement, result, flags=re.IGNORECASE)
    
    # –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–æ–±–µ–ª—ã
    result = re.sub(r'\s*,\s*', ', ', result)
    result = re.sub(r',+', ',', result)
    result = result.strip().strip(',').strip()
    
    return result

def clean_duplicate_address_parts(address: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∞–¥—Ä–µ—Å–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
    """
    if not address:
        return address
    
    logger.info(f"üßπ –û–ß–ò–°–¢–ö–ê: '{address}'")
    
    # 1. –£–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –æ–±–ª–∞—Å—Ç–µ–π/—Ä–µ–≥–∏–æ–Ω–æ–≤
    # "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å ... –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å" ‚Üí "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
    patterns_to_deduplicate = [
        # –ü–æ–ª–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        (r'–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å[^,]*,\s*–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'),
        (r'–æ–±–ª –ú–æ—Å–∫–æ–≤—Å–∫–∞—è[^,]*,\s*–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'),
        (r'–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è[^,]*,\s*–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'),
        
        # –ì–æ—Ä–æ–¥–∞
        (r'–≥\s+([–ê-–Ø–∞-—è—ë\-]+)[^,]*,\s*\1(?:\s+–≥|$)', r'–≥ \1'),
        (r'–≥–æ—Ä–æ–¥\s+([–ê-–Ø–∞-—è—ë\-]+)[^,]*,\s*\1', r'–≥–æ—Ä–æ–¥ \1'),
        
        # –†–∞–π–æ–Ω—ã
        (r'([–ê-–Ø–∞-—è—ë\-]+)\s+—Ä-–Ω[^,]*,\s*\1', r'\1'),
        (r'—Ä-–Ω\s+([–ê-–Ø–∞-—è—ë\-]+)[^,]*,\s*\1', r'\1'),
        
        # –°–µ–ª–∞/–ø–æ—Å–µ–ª–∫–∏
        (r'—Å\s+([–ê-–Ø–∞-—è—ë\s\-]+)[^,]*,\s*—Å\s+\1', r'—Å \1'),
        (r'—Å–µ–ª–æ\s+([–ê-–Ø–∞-—è—ë\s\-]+)[^,]*,\s*\1', r'—Å–µ–ª–æ \1'),
        (r'–ø–≥—Ç\s+([–ê-–Ø–∞-—è—ë\s\-]+)[^,]*,\s*\1', r'–ø–≥—Ç \1'),
    ]
    
    cleaned = address
    for pattern, replacement in patterns_to_deduplicate:
        old_cleaned = cleaned
        cleaned = re.sub(pattern, replacement, cleaned, flags=re.IGNORECASE)
        if cleaned != old_cleaned:
            logger.info(f"   üîÑ –£–±—Ä–∞–ª –¥—É–±–ª–∏–∫–∞—Ç: '{old_cleaned}' ‚Üí '{cleaned}'")
    
    # 2. –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏
    redundant_patterns = [
        r'–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è,?\s*',
        r'–≤–Ω\.—Ç–µ—Ä\.–≥\.[^,]*,?\s*',
        r'–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥[^,]*,?\s*',
        r'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥[^,]*,?\s*',
        r'–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥(?!\s+[–ê-–Ø–∞-—è—ë])[^,]*,?\s*',  # –ù–µ —Ç—Ä–æ–≥–∞–µ–º "–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –ù–∞–∑–≤–∞–Ω–∏–µ"
    ]
    
    for pattern in redundant_patterns:
        old_cleaned = cleaned
        cleaned = re.sub(pattern, '', cleaned, flags=re.IGNORECASE)
        if cleaned != old_cleaned:
            logger.info(f"   ‚úÇÔ∏è –£–±—Ä–∞–ª –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ: '{pattern}'")
    
    # 3. –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    cleaned = standardize_address_format(cleaned)
    
    # 4. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ
    cleaned = re.sub(r'\s+', ' ', cleaned)
    cleaned = re.sub(r'\s*,\s*', ', ', cleaned)
    cleaned = re.sub(r',+', ',', cleaned)
    cleaned = cleaned.strip().strip(',').strip()
    
    logger.info(f"‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: '{cleaned}'")
    return cleaned

def standardize_address_format(address: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É: –û–±–ª–∞—Å—Ç—å, –ì–æ—Ä–æ–¥, –û–±—ä–µ–∫—Ç/–£–ª–∏—Ü–∞
    """
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    replacements = [
        (r'\b–æ–±–ª\.?\s*', '–æ–±–ª–∞—Å—Ç—å '),
        (r'\b–≥\.–æ\.?\s*', '–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ '),
        (r'\b–≥\.?\s*(?![–ê-–Ø–∞-—è—ë])', ''),  # –£–±–∏—Ä–∞–µ–º "–≥." –µ—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–µ–≥–æ –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        (r'\b–º\.–æ\.?\s*', ''),
        (r'\b—Ä-–Ω\.?\s*', '—Ä–∞–π–æ–Ω '),
        (r'\b–ø–≥—Ç\.?\s*', '–ø–≥—Ç '),
        (r'\b—Å\.?\s+', '—Å–µ–ª–æ '),
        (r'\b–¥\.?\s*(\d)', r'–¥–æ–º \1'),
    ]
    
    result = address
    for pattern, replacement in replacements:
        result = re.sub(pattern, replacement, result, flags=re.IGNORECASE)
    
    return result

def simplify_address_for_geocoding(address: str) -> str:
    """
    –£–ø—Ä–æ—â–∞–µ—Ç –∞–¥—Ä–µ—Å –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:
    - –û–±–ª–∞—Å—Ç—å + –ì–æ—Ä–æ–¥ + –£–ª–∏—Ü–∞/–û–±—ä–µ–∫—Ç + –î–æ–º
    - –£–±–∏—Ä–∞–µ—Ç –≤—Å–µ –ª–∏—à–Ω–µ–µ
    """
    logger.info(f"üéØ –£–ü–†–û–©–ï–ù–ò–ï: '{address}'")
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    cleaned = clean_duplicate_address_parts(address)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    components = {
        'region': '',
        'city': '',
        'street_object': '',
        'house': ''
    }
    
    # –†–µ–≥–∏–æ–Ω
    region_patterns = [
        r'(–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)',
        r'(–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)',
        r'–æ–±–ª–∞—Å—Ç—å (–ú–æ—Å–∫–æ–≤—Å–∫–∞—è)',
    ]
    
    for pattern in region_patterns:
        match = re.search(pattern, cleaned, re.IGNORECASE)
        if match:
            components['region'] = '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
            break
    
    # –ì–æ—Ä–æ–¥/–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
    city_patterns = [
        r'–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥\s+([–ê-–Ø–∞-—è—ë\-]+)',
        r'–≥\s+([–ê-–Ø–∞-—è—ë\-]+)',
        r'–≥–æ—Ä–æ–¥\s+([–ê-–Ø–∞-—è—ë\-]+)',
        r'–ø–≥—Ç\s+([–ê-–Ø–∞-—è—ë\s\-]+?)(?:,|$)',
        r'—Å–µ–ª–æ\s+([–ê-–Ø–∞-—è—ë\s\-]+?)(?:,|$)',
        r'—Å\s+([–ê-–Ø–∞-—è—ë\s\-]+?)(?:,|$)',
    ]
    
    for pattern in city_patterns:
        match = re.search(pattern, cleaned, re.IGNORECASE)
        if match:
            components['city'] = match.group(1).strip()
            break
    
    # –£–ª–∏—Ü–∞ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
    street_object_patterns = [
        r'—É–ª\.?\s+([–ê-–Ø–∞-—è—ë\s\-]+?)(?:,|\s+–¥|\s*$)',
        r'—É–ª–∏—Ü–∞\s+([–ê-–Ø–∞-—è—ë\s\-]+?)(?:,|\s+–¥|\s*$)',
        r'(–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¶–µ–Ω—Ç—Ä[^,]*)',
        r'([–ê-–Ø–∞-—è—ë\s]+(?:–¶–µ–Ω—Ç—Ä|—Ü–µ–Ω—Ç—Ä)[^,]*)',
        r'—Ç–µ—Ä\.?\s+([–ê-–Ø–∞-—è—ë\s\-]+?)(?:,|\s*$)',
        r'—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è\s+([–ê-–Ø–∞-—è—ë\s\-]+?)(?:,|\s*$)',
    ]
    
    for pattern in street_object_patterns:
        match = re.search(pattern, cleaned, re.IGNORECASE)
        if match:
            components['street_object'] = match.group(1).strip()
            break
    
    # –ù–æ–º–µ—Ä –¥–æ–º–∞
    house_patterns = [
        r'–¥–æ–º\s+(\d+[–ê-–Ø–∞-—è—ëM]*)',
        r'–¥\.?\s+(\d+[–ê-–Ø–∞-—è—ëM]*)',
        r',\s*(\d+[–ê-–Ø–∞-—è—ëM]*)\s*$',
    ]
    
    for pattern in house_patterns:
        match = re.search(pattern, cleaned, re.IGNORECASE)
        if match:
            components['house'] = match.group(1)
            break
    
    # –°–æ–±–∏—Ä–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
    simplified_parts = []
    
    if components['region']:
        simplified_parts.append(components['region'])
    
    if components['city']:
        simplified_parts.append(components['city'])
    
    if components['street_object']:
        simplified_parts.append(components['street_object'])
        
    if components['house']:
        simplified_parts.append(components['house'])
    
    simplified = ', '.join(simplified_parts)
    
    logger.info(f"‚úÖ –£–ü–†–û–©–ï–ù: '{simplified}'")
    return simplified

def parse_address_components(address: str) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    """
    components = {
        'region': '',
        'main_city': '',  # –û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ (–õ—é–±–µ—Ä—Ü—ã, –ü–æ–¥–æ–ª—å—Å–∫)
        'city': '',       # –õ—é–±–æ–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
        'district': '',   # –†–∞–π–æ–Ω
        'street': '',
        'house': '',
        'specific_objects': []
    }
    
    # –†–µ–≥–∏–æ–Ω
    region_match = re.search(r'(–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)', address, re.IGNORECASE)
    if region_match:
        components['region'] = region_match.group(1)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
    major_cities = ['–õ—é–±–µ—Ä—Ü—ã', '–ü–æ–¥–æ–ª—å—Å–∫', '–•–∏–º–∫–∏', '–ë–∞–ª–∞—à–∏—Ö–∞', '–ú—ã—Ç–∏—â–∏', '–ö–æ–ª–æ–º–Ω–∞', '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å', '–û–¥–∏–Ω—Ü–æ–≤–æ', '–°–µ—Ä–ø—É—Ö–æ–≤', '–®–∞—Ö–æ–≤—Å–∫–∞—è']
    for city in major_cities:
        if city.lower() in address.lower():
            components['main_city'] = city
            components['city'] = city
            break
    
    # –ü–æ—Å–µ–ª–∫–∏ –∏ —Å–µ–ª–∞
    settlement_patterns = [
        r'–ø–≥—Ç\s+([–ê-–Ø–∞-—è—ë\s\-]+?)(?:,|$)',
        r'—Å–µ–ª–æ\s+([–ê-–Ø–∞-—è—ë\s\-]+?)(?:,|$)',
        r'—Å\s+([–ê-–Ø–∞-—è—ë\s\-]+?)(?:,|$)',
        r'–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥\s+([–ê-–Ø–∞-—è—ë\-]+)',
    ]
    
    for pattern in settlement_patterns:
        match = re.search(pattern, address, re.IGNORECASE)
        if match:
            settlement = match.group(1).strip()
            if not components['city']:
                components['city'] = settlement
            break
    
    # –†–∞–π–æ–Ω—ã
    district_patterns = [
        r'([–ê-–Ø–∞-—è—ë\-]+)\s+—Ä–∞–π–æ–Ω',
        r'—Ä–∞–π–æ–Ω\s+([–ê-–Ø–∞-—è—ë\-]+)',
    ]
    
    for pattern in district_patterns:
        match = re.search(pattern, address, re.IGNORECASE)
        if match:
            components['district'] = match.group(1).strip()
            break
    
    # –£–ª–∏—Ü—ã
    street_patterns = [
        r'—É–ª\.?\s+([–ê-–Ø–∞-—è—ë\s\-]+?)(?:,|\s+–¥|\s*$)',
        r'—É–ª–∏—Ü–∞\s+([–ê-–Ø–∞-—è—ë\s\-]+?)(?:,|\s+–¥|\s*$)',
    ]
    
    for pattern in street_patterns:
        match = re.search(pattern, address, re.IGNORECASE)
        if match:
            components['street'] = match.group(1).strip()
            break
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã
    specific_objects = [
        '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¶–µ–Ω—Ç—Ä',
        '–¢–æ—Ä–≥–æ–≤—ã–π –¶–µ–Ω—Ç—Ä',
        '–ë–∏–∑–Ω–µ—Å –¶–µ–Ω—Ç—Ä',
        '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∑–æ–Ω–∞',
        '—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è',
        '—Ç–µ—Ä.',
    ]
    
    for obj in specific_objects:
        if obj.lower() in address.lower():
            components['specific_objects'].append(obj)
    
    # –ù–æ–º–µ—Ä –¥–æ–º–∞
    house_patterns = [
        r'–¥–æ–º\s+(\d+[–ê-–Ø–∞-—è—ëM]*)',
        r'–¥\.?\s+(\d+[–ê-–Ø–∞-—è—ëM]*)',
        r',\s*(\d+[–ê-–Ø–∞-—è—ëM]*)\s*$',
    ]
    
    for pattern in house_patterns:
        match = re.search(pattern, address, re.IGNORECASE)
        if match:
            components['house'] = match.group(1)
            break
    
    return components

def remove_specific_objects(address: str) -> str:
    """
    –£–±–∏—Ä–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∞–¥—Ä–µ—Å–∞
    """
    objects_to_remove = [
        r'–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¶–µ–Ω—Ç—Ä[^,]*',
        r'–¢–æ—Ä–≥–æ–≤—ã–π –¶–µ–Ω—Ç—Ä[^,]*',
        r'–ë–∏–∑–Ω–µ—Å[- ]?–¶–µ–Ω—Ç—Ä[^,]*',
        r'–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∑–æ–Ω–∞[^,]*',
        r'—Ç–µ—Ä\.?\s+[^,]*',
        r'—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è\s+[^,]*',
        r'–ø—Ä–æ–º–∑–æ–Ω–∞[^,]*',
    ]
    
    result = address
    for pattern in objects_to_remove:
        result = re.sub(pattern, '', result, flags=re.IGNORECASE)
    
    # –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ
    result = re.sub(r'\s*,\s*,\s*', ', ', result)
    result = re.sub(r'^,\s*|,\s*$', '', result)
    result = result.strip()
    
    return result

def create_address_variations(address: str) -> List[str]:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞ –æ—Ç —Å–∞–º–æ–≥–æ —Ç–æ—á–Ω–æ–≥–æ –¥–æ —Å–∞–º–æ–≥–æ –æ–±—â–µ–≥–æ –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –¥–æ–º–æ–≤
    """
    variations = []
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞
    components = parse_address_components(address)
    
    # 1. –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (–∫–∞–∫ –µ—Å—Ç—å)
    variations.append(address)
    
    # 2. –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∞–¥—Ä–µ—Å
    cleaned = clean_duplicate_address_parts(address)
    if cleaned != address:
        variations.append(cleaned)
    
    # 3. –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã (–≥.–æ., –≤–Ω.—Ç–µ—Ä.–≥.)
    simplified_admin = remove_redundant_admin(address)
    if simplified_admin != address:
        variations.append(simplified_admin)
    
    # 4. –ë–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¶–µ–Ω—Ç—Ä, —Ç–µ—Ä.)
    without_objects = remove_specific_objects(address)
    if without_objects != address:
        variations.append(without_objects)
    
    # 5. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –û–±–ª–∞—Å—Ç—å, –ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º
    if components['region'] and components['city'] and components['street']:
        standard_format = f"{components['region']}, {components['city']}, {components['street']}"
        if components['house']:
            standard_format += f", {components['house']}"
        variations.append(standard_format)
    
    # 6. –¢–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω + –≥–æ—Ä–æ–¥ + —É–ª–∏—Ü–∞ (–ë–ï–ó –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞)
    if components['region'] and components['city'] and components['street']:
        no_house_format = f"{components['region']}, {components['city']}, {components['street']}"
        variations.append(no_house_format)
    
    # 7. –¢–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥ + —É–ª–∏—Ü–∞
    if components['city'] and components['street']:
        city_street = f"{components['city']}, {components['street']}"
        variations.append(city_street)
    
    # 8. –¢–æ–ª—å–∫–æ —É–ª–∏—Ü–∞ (–µ—Å–ª–∏ –æ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è)
    if components['street'] and len(components['street']) > 8:
        variations.append(components['street'])
    
    # 9. –¢–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω + –≥–æ—Ä–æ–¥
    if components['region'] and components['city']:
        region_city = f"{components['region']}, {components['city']}"
        variations.append(region_city)
    
    # 10. –¢–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥
    if components['city']:
        variations.append(components['city'])
    
    # 11. –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    english_variants = create_english_variants(address)
    variations.extend(english_variants)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    unique_variations = []
    for var in variations:
        cleaned_var = var.strip().strip(',').strip()
        if cleaned_var and cleaned_var not in unique_variations and len(cleaned_var) > 3:
            unique_variations.append(cleaned_var)
    
    return unique_variations
def create_english_variants(address: str) -> List[str]:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    variants = []
    
    # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    translations = {
        '–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Moscow Oblast',
        '–æ–±–ª–∞—Å—Ç—å': 'Oblast',
        '–∫–ª–∏–Ω': 'Klin',
        '—Ö–∏–º–∫–∏': 'Khimki',
        '–ø–æ–¥–æ–ª—å—Å–∫': 'Podolsk',
        '–º–æ—Å–∫–≤–∞': 'Moscow',
        '—Ä–æ—Å—Å–∏—è': 'Russia',
        '—É–ª–∏—Ü–∞': 'street',
        '—É–ª': 'street',
        '–ø—Ä–æ—Å–ø–µ–∫—Ç': 'avenue',
        '–ø—Ä-—Ç': 'avenue',
        '–¥–æ–º': 'house',
        '–¥': 'house',
        '–≥–∞–≥–∞—Ä–∏–Ω–∞': 'Gagarina',
        '–ø—Ä–∞–≤–¥—ã': 'Pravdy',
        '—Ç–≤–µ—Ä—Å–∫–∞—è': 'Tverskaya',
        '–Ω–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è': 'Novogireevskaya',
    }
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
    english_address = address.lower()
    for ru, en in translations.items():
        english_address = english_address.replace(ru, en)
    
    if english_address != address.lower():
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
        english_clean = re.sub(r'\b(oblast|street|house)\b', '', english_address)
        english_clean = re.sub(r'\s+', ' ', english_clean).strip()
        
        variants.extend([
            english_address.title(),
            english_clean.title(),
            f"Russia, {english_clean.title()}",
        ])
    
    return variants
    
def gpt_clean_address(address: str) -> str:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GPT –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞
    """
    if not address or len(address) < 10:
        return address
    
    prompt = f"""
–û—á–∏—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∞–¥—Ä–µ—Å –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:

–ò–°–•–û–î–ù–´–ô –ê–î–†–ï–°: "{address}"

–ü–†–û–ë–õ–ï–ú–´:
1. –î—É–±–ª–∏–∫–∞—Ç—ã: "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å ... –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
2. –ò–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å: "–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è", "–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"
3. –ü–æ–≤—Ç–æ—Ä—ã –≥–æ—Ä–æ–¥–æ–≤ –∏ —Ä–∞–π–æ–Ω–æ–≤

–ó–ê–î–ê–ß–ê:
–û—Å—Ç–∞–≤—å –¢–û–õ–¨–ö–û: –û–±–ª–∞—Å—Ç—å, –ì–æ—Ä–æ–¥/–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, –£–ª–∏—Ü–∞/–û–±—ä–µ–∫—Ç, –î–æ–º

–ü–†–ê–í–ò–õ–ê:
1. –ù–ï –¥—É–±–ª–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
2. –£–±–µ—Ä–∏ "–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è"
3. –£–±–µ—Ä–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–∫—Ä—É–≥–∞
4. –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–π: –≥.‚Üí–≥–æ—Ä–æ–¥, —É–ª.‚Üí—É–ª–∏—Ü–∞
5. –°–æ—Ö—Ä–∞–Ω–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¶–µ–Ω—Ç—Ä"

–ü–†–ò–ú–ï–†–´:
"–æ–±–ª –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, –º.–æ. –®–∞—Ö–æ–≤—Å–∫–∞—è, —Å –ë–µ–ª–∞—è –ö–æ–ª–ø—å –†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –®–∞—Ö–æ–≤—Å–∫–æ–π —Ä-–Ω, —Å –ë–µ–ª–∞—è –ö–æ–ª–ø—å, –¥ 71"
‚Üí "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –®–∞—Ö–æ–≤—Å–∫–æ–π —Ä–∞–π–æ–Ω, —Å–µ–ª–æ –ë–µ–ª–∞—è –ö–æ–ª–ø—å, –¥–æ–º 71"

"–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –õ—é–±–µ—Ä—Ü—ã –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥, –¢–æ–º–∏–ª–∏–Ω–æ –ø–≥—Ç, –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¶–µ–Ω—Ç—Ä —Ç–µ—Ä., 7–ú"
‚Üí "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –õ—é–±–µ—Ä—Ü—ã, –¢–æ–º–∏–ª–∏–Ω–æ, –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¶–µ–Ω—Ç—Ä, 7–ú"

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –æ—á–∏—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
"""
    
    try:
        response = sync_chat(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—á–∏—Å—Ç–∫–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –∏–∑–±—ã—Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=150
        )
        
        cleaned = response.strip().strip('"').strip("'")
        
        if len(cleaned) > 5 and len(cleaned) <= len(address):
            logger.info(f"ü§ñ GPT –æ—á–∏—Å—Ç–∏–ª: '{address}' ‚Üí '{cleaned}'")
            return cleaned
        else:
            logger.warning(f"ü§ñ GPT –≤–µ—Ä–Ω—É–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{cleaned}'")
            return address
            
    except Exception as e:
        logger.error(f"ü§ñ –û—à–∏–±–∫–∞ GPT: {e}")
        return address

def create_fixed_geocoder():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≥–µ–æ–∫–æ–¥–µ—Ä –±–µ–∑ –ø—Ä–æ–±–ª–µ–º—ã —è–∑—ã–∫–∞
    """
    if not GEOPY_AVAILABLE:
        return None
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–æ–∫–æ–¥–µ—Ä–∞
    geocoder = Nominatim(
        user_agent="commercial_real_estate_fixed/1.0",  # –†—É—Å—Å–∫–∏–π —Ç–æ–ª—å–∫–æ –≤ user_agent
        timeout=30,
        domain='nominatim.openstreetmap.org'
        # –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú language='ru' !!!
    )
    
    return geocoder

def enhanced_address_search(geocoder, address: str, max_attempts: int = 6) -> Optional[tuple]:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ —Å –∫–∞—Å–∫–∞–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
    
    Returns:
        tuple: (latitude, longitude, found_address, used_variation) –∏–ª–∏ None
    """
    if not address:
        return None
    
    logger.info(f"üîç ENHANCED SEARCH: '{address}'")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
    variations = create_address_variations(address)[:max_attempts]
    
    for i, variation in enumerate(variations, 1):
        logger.info(f"   –ü–æ–ø—ã—Ç–∫–∞ {i}/{len(variations)}: '{variation}'")
        
        try:
            location = geocoder.geocode(
                query=variation,
                exactly_one=True,
                timeout=20,
                addressdetails=True,
                limit=1
            )
            
            if location:
                logger.info(f"   ‚úÖ –ù–ê–ô–î–ï–ù–û! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: '{variation}'")
                return (location.latitude, location.longitude, location.address, variation)
            else:
                logger.info(f"   ‚ùå –í–∞—Ä–∏–∞–Ω—Ç {i} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            logger.warning(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –≤–∞—Ä–∏–∞–Ω—Ç–µ {i}: {e}")
            continue
    
    logger.warning(f"‚ùå ALL ENHANCED ATTEMPTS failed: '{address}'")
    return None

def test_address_cleaning():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
    """
    test_addresses = [
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤
        "–æ–±–ª –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, –º.–æ. –®–∞—Ö–æ–≤—Å–∫–∞—è, —Å –ë–µ–ª–∞—è –ö–æ–ª–ø—å –†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –®–∞—Ö–æ–≤—Å–∫–æ–π —Ä-–Ω, —Å –ë–µ–ª–∞—è –ö–æ–ª–ø—å, –¥ 71",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –õ—é–±–µ—Ä—Ü—ã –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥, –¢–æ–º–∏–ª–∏–Ω–æ –ø–≥—Ç, –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¶–µ–Ω—Ç—Ä —Ç–µ—Ä., 7–ú",
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        "–æ–±–ª –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, –≥.–æ. –ü–æ–¥–æ–ª—å—Å–∫, –≥ –ü–æ–¥–æ–ª—å—Å–∫, —É–ª –ü—Ä–∞–≤–¥—ã, –¥–æ–º 20 –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥. –ü–æ–¥–æ–ª—å—Å–∫, —É–ª. –ü—Ä–∞–≤–¥—ã, –¥. 20, –ø–æ–º. 1",
        "–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è, –≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞, –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥, –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ –ë–∞—Å–º–∞–Ω–Ω—ã–π, —É–ª–∏—Ü–∞ –ü–æ–∫—Ä–æ–≤–∫–∞, –¥–æ–º 42",
        "–≥ –ú–æ—Å–∫–≤–∞ –≤–Ω.—Ç–µ—Ä.–≥. –ú–æ—Å–∫–≤–∞ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ –•–∞–º–æ–≤–Ω–∏–∫–∏ —É–ª –û—Å—Ç–æ–∂–µ–Ω–∫–∞ –¥–æ–º 53/2 —Å—Ç—Ä–æ–µ–Ω–∏–µ 1",
        
        # –ü—Ä–æ—Å—Ç—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥ –•–∏–º–∫–∏, —É–ª –ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è, –¥–æ–º 4",
        "–≥ –ú–æ—Å–∫–≤–∞, —É–ª –¢–≤–µ—Ä—Å–∫–∞—è, –¥–æ–º 7",
    ]
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ß–ò–°–¢–ö–ò –ê–î–†–ï–°–û–í")
    print("=" * 100)
    
    for i, address in enumerate(test_addresses, 1):
        print(f"\nüìç –¢–ï–°–¢ {i}")
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π: {address}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∏ –º–µ—Ç–æ–¥–∞
        regex_cleaned = clean_duplicate_address_parts(address)
        simplified = simplify_address_for_geocoding(address)
        gpt_cleaned = gpt_clean_address(address)
        
        print(f"REGEX:    {regex_cleaned}")
        print(f"–£–ü–†–û–©–ï–ù:  {simplified}")
        print(f"GPT:      {gpt_cleaned}")
        print("-" * 100)

def test_address_variations():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞–¥—Ä–µ—Å–æ–≤
    """
    print("üîÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –í–ê–†–ò–ê–ù–¢–û–í –ê–î–†–ï–°–û–í")
    print("=" * 80)
    
    test_addresses = [
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –®–∞—Ö–æ–≤—Å–∫–æ–π —Ä–∞–π–æ–Ω, —Å–µ–ª–æ –ë–µ–ª–∞—è –ö–æ–ª–ø—å, –¥–æ–º 71",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –õ—é–±–µ—Ä—Ü—ã, –¢–æ–º–∏–ª–∏–Ω–æ, –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¶–µ–Ω—Ç—Ä, 7–ú",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ü–æ–¥–æ–ª—å—Å–∫, —É–ª–∏—Ü–∞ –ü—Ä–∞–≤–¥—ã, –¥–æ–º 20",
    ]
    
    for address in test_addresses:
        print(f"\nüìç –ò–°–•–û–î–ù–´–ô –ê–î–†–ï–°: {address}")
        print("-" * 60)
        
        variations = create_address_variations(address)
        
        for i, variation in enumerate(variations, 1):
            print(f"   {i}. {variation}")
        
        print("-" * 60)

def fix_geocoder_language_error():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É —è–∑—ã–∫–∞ –≤ –≥–µ–æ–∫–æ–¥–µ—Ä–∞—Ö
    """
    if not GEOPY_AVAILABLE:
        print("‚ö†Ô∏è geopy –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    print("üåç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–û–ö–û–î–ï–†–û–í")
    print("=" * 50)
    
    test_address = "–ú–æ—Å–∫–≤–∞, —É–ª–∏—Ü–∞ –¢–≤–µ—Ä—Å–∫–∞—è, 10"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
    language_configs = [
        ("default", {}),
        ("en", {"language": "en"}),
        ("de", {"language": "de"}),
        ("fr", {"language": "fr"}),
        ("ru_removed", {}),  # –ë–µ–∑ —è–∑—ã–∫–∞ –≤–æ–æ–±—â–µ
    ]
    
    for lang_name, lang_params in language_configs:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {lang_name}")
        
        try:
            # Nominatim
            geocoder = Nominatim(
                user_agent="test_address_cleanup/1.0",
                timeout=10
            )
            
            geocode_params = {
                'query': test_address,
                'exactly_one': True,
                'timeout': 10
            }
            geocode_params.update(lang_params)
            
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {geocode_params}")
            
            location = geocoder.geocode(**geocode_params)
            
            if location:
                print(f"   ‚úÖ –£–°–ü–ï–•: {location.latitude:.6f}, {location.longitude:.6f}")
                print(f"   üìç –ê–¥—Ä–µ—Å: {location.address}")
            else:
                print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ language='ru' –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –≥–µ–æ–∫–æ–¥–µ—Ä–∞")
    print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ language='en' –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä language")
    print("3. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Ä—É—Å—Å–∫–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ user_agent")

def test_cascading_geocoding():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º —É–ø—Ä–æ—â–µ–Ω–∏–µ–º –∞–¥—Ä–µ—Å–∞
    """
    if not GEOPY_AVAILABLE:
        print("‚ö†Ô∏è geopy –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–°–ö–ê–î–ù–û–ì–û –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    
    geocoder = create_fixed_geocoder()
    
    test_addresses = [
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –®–∞—Ö–æ–≤—Å–∫–æ–π —Ä–∞–π–æ–Ω, —Å–µ–ª–æ –ë–µ–ª–∞—è –ö–æ–ª–ø—å, –¥–æ–º 71",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –õ—é–±–µ—Ä—Ü—ã, –¢–æ–º–∏–ª–∏–Ω–æ, –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¶–µ–Ω—Ç—Ä, 7–ú",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ü–æ–¥–æ–ª—å—Å–∫, —É–ª–∏—Ü–∞ –ü—Ä–∞–≤–¥—ã, –¥–æ–º 20",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –•–∏–º–∫–∏, —É–ª–∏—Ü–∞ –ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è, –¥–æ–º 4",
    ]
    
    for address in test_addresses:
        print(f"\nüìç –ö–ê–°–ö–ê–î–ù–´–ô –ü–û–ò–°–ö: {address}")
        print("-" * 80)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞
        variations = create_address_variations(address)
        
        found_location = None
        successful_variation = None
        
        for i, variation in enumerate(variations, 1):
            print(f"   {i}. –ü—Ä–æ–±—É–µ–º: '{variation}'")
            
            try:
                location = geocoder.geocode(
                    query=variation,
                    exactly_one=True,
                    timeout=15,
                    addressdetails=True,
                    limit=1
                )
                
                if location:
                    print(f"      ‚úÖ –ù–ê–ô–î–ï–ù–û! {location.latitude:.6f}, {location.longitude:.6f}")
                    print(f"      üìç –ê–¥—Ä–µ—Å: {location.address}")
                    found_location = location
                    successful_variation = variation
                    break
                else:
                    print(f"      ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            except Exception as e:
                print(f"      ‚ùå –û–®–ò–ë–ö–ê: {e}")
        
        if found_location:
            print(f"\n   üéâ –ò–¢–û–ì: –ù–∞–π–¥–µ–Ω –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É '{successful_variation}'")
            print(f"   üåç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {found_location.latitude:.6f}, {found_location.longitude:.6f}")
        else:
            print(f"\n   üòû –ò–¢–û–ì: –ù–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print("=" * 80)

def test_fixed_geocoding():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
    """
    if not GEOPY_AVAILABLE:
        print("‚ö†Ô∏è geopy –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    geocoder = create_fixed_geocoder()
    
    test_addresses = [
        "–ú–æ—Å–∫–≤–∞, —É–ª–∏—Ü–∞ –¢–≤–µ—Ä—Å–∫–∞—è, 10",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ü–æ–¥–æ–ª—å—Å–∫, —É–ª–∏—Ü–∞ –ü—Ä–∞–≤–¥—ã, 20",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –®–∞—Ö–æ–≤—Å–∫–æ–π —Ä–∞–π–æ–Ω, —Å–µ–ª–æ –ë–µ–ª–∞—è –ö–æ–ª–ø—å, –¥–æ–º 71",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –õ—é–±–µ—Ä—Ü—ã, –¢–æ–º–∏–ª–∏–Ω–æ, –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¶–µ–Ω—Ç—Ä",
    ]
    
    for address in test_addresses:
        print(f"\nüìç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {address}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
        try:
            location = geocoder.geocode(
                query=address,
                exactly_one=True,
                timeout=20,
                addressdetails=True,
                limit=1
            )
            
            if location:
                print(f"   ‚úÖ –ü–†–Ø–ú–û–ô –ü–û–ò–°–ö: {location.latitude:.6f}, {location.longitude:.6f}")
                print(f"   üìç –ù–∞–π–¥–µ–Ω: {location.address}")
                continue
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        
        # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π
        print(f"   üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–∞—Å–∫–∞–¥–Ω–æ–º—É –ø–æ–∏—Å–∫—É...")
        result = enhanced_address_search(geocoder, address)
        
        if result:
            lat, lon, found_address, used_variation = result
            print(f"   ‚úÖ –ö–ê–°–ö–ê–î–ù–´–ô –ü–û–ò–°–ö: {lat:.6f}, {lon:.6f}")
            print(f"   üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: '{used_variation}'")
            print(f"   üìç –ù–∞–π–¥–µ–Ω: {found_address}")
        else:
            print(f"   ‚ùå –ö–∞—Å–∫–∞–¥–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–∂–µ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–î–†–ï–°–û–í")
    print("=" * 60)
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –∞–¥—Ä–µ—Å–æ–≤
    print("\n1Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ß–ò–°–¢–ö–ò –ê–î–†–ï–°–û–í")
    test_address_cleaning()
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    print("\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–†–ò–ê–ù–¢–û–í –ê–î–†–ï–°–û–í")
    test_address_variations()
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ —è–∑—ã–∫–∞
    print("\n3Ô∏è‚É£ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò –Ø–ó–´–ö–ê –ì–ï–û–ö–û–î–ï–†–ê")
    fix_geocoder_language_error()
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Å–∫–∞–¥–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–°–ö–ê–î–ù–û–ì–û –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø")
    test_cascading_geocoding()
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n5Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø")
    test_fixed_geocoding()
    
    print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é enhanced_address_search() –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
    print("2. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ language='ru' –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –≥–µ–æ–∫–æ–¥–µ—Ä–æ–≤")
    print("3. –ö–∞—Å–∫–∞–¥–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –¥–∞–∂–µ —Å–ª–æ–∂–Ω—ã–µ –∞–¥—Ä–µ—Å–∞")
    print("4. –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–æ—â–∞–µ—Ç –∞–¥—Ä–µ—Å –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö")
    print("5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ simplify_address_for_geocoding() –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏")