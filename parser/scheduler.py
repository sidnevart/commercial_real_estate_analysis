import asyncio
import logging
import schedule
import time
from datetime import datetime
import pytz
from parser.main import main as parser_main
from core.deduplication_db import dedup_db

# –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s",
    handlers=[
        logging.FileHandler("logs/production.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

async def daily_production_run():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ"""
    moscow_time = datetime.now(MOSCOW_TZ)
    logger.info(f"üöÄ DAILY PRODUCTION RUN - {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} –ú–°–ö")
    
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –∑–∞–ø—É—Å–∫–∞
        stats_before = dedup_db.get_stats()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –∑–∞–ø—É—Å–∫–∞: {stats_before}")
        
        # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –≤ production —Ä–µ–∂–∏–º–µ
        await parser_main(max_pages=40, production_mode=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞  
        stats_after = dedup_db.get_stats()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: {stats_after}")
        
        logger.info("‚úÖ PRODUCTION RUN –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –í PRODUCTION RUN: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
        try:
            from bot.bot_service import bot_service
            bot_service.initialize()
            if bot_service.is_enabled():
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ:\n{str(e)}"
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤)
                pass  # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∞–¥–º–∏–Ω–∞–º
        except Exception as bot_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {bot_error}")

def schedule_daily_runs():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 01:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    schedule.every().day.at("01:00").do(lambda: asyncio.run(daily_production_run()))
    
    logger.info("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ 01:00 –ú–°–ö")
    
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

if __name__ == "__main__":
    logger.info("üöÄ –ó–ê–ü–£–°–ö PRODUCTION –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê")
    schedule_daily_runs()