"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 01:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
"""
# filepath: parser/scheduler.py

import asyncio
import logging
import sys
import schedule
import time
from pathlib import Path
from datetime import datetime
import pytz

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

from parser.main import main as parser_main
from core.deduplication_db import dedup_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    handlers=[
        logging.FileHandler("logs/scheduler.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

async def scheduled_parser_run():
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    moscow_time = datetime.now(MOSCOW_TZ)
    logger.info(f"üöÄ –ó–ê–ü–£–°–ö –ü–õ–ê–ù–û–í–û–ì–û –ü–ê–†–°–ò–ù–ì–ê - {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} –ú–°–ö")
    logger.info("=" * 80)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        stats_before = dedup_db.get_stats()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:")
        logger.info(f"   ‚Ä¢ –õ–æ—Ç–æ–≤ –≤ –ë–î: {stats_before.get('total_lots', 0)}")
        logger.info(f"   ‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ë–î: {stats_before.get('total_offers', 0)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –Ω–∞ –í–°–ï —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ (–≤—Å–µ 35 —Å—Ç—Ä–∞–Ω–∏—Ü)...")
        await parser_main()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        stats_after = dedup_db.get_stats()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞:")
        logger.info(f"   ‚Ä¢ –õ–æ—Ç–æ–≤ –≤ –ë–î: {stats_after.get('total_lots', 0)} (+{stats_after.get('total_lots', 0) - stats_before.get('total_lots', 0)})")
        logger.info(f"   ‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ë–î: {stats_after.get('total_offers', 0)} (+{stats_after.get('total_offers', 0) - stats_before.get('total_offers', 0)})")
        
        logger.info("=" * 80)
        logger.info(f"‚úÖ –ü–õ–ê–ù–û–í–´–ô –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û - {datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d %H:%M:%S')} –ú–°–ö")
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ü–õ–ê–ù–û–í–û–ú –ü–ê–†–°–ò–ù–ì–ï: {e}")
        import traceback
        logger.error(traceback.format_exc())
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        try:
            from bot.telegram_service import TelegramService
            bot_service = TelegramService()
            if bot_service.is_enabled():
                await bot_service.send_error_notification(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        except Exception as bot_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {bot_error}")

def run_scheduled_task():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(scheduled_parser_run())
        loop.close()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")

def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 01:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    schedule.every().day.at("01:00").do(run_scheduled_task)
    
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
    logger.info("   ‚Ä¢ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: 01:00 –ú–°–ö –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
    logger.info("   ‚Ä¢ –†–µ–∂–∏–º: –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (–≤—Å–µ 35 —Å—Ç—Ä–∞–Ω–∏—Ü)")
    logger.info("   ‚Ä¢ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    next_run = schedule.next_run()
    if next_run:
        moscow_next_run = next_run.astimezone(MOSCOW_TZ)
        logger.info(f"   ‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {moscow_next_run.strftime('%Y-%m-%d %H:%M:%S')} –ú–°–ö")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –ü–ê–†–°–ï–†–ê")
    logger.info("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    Path("logs").mkdir(exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    try:
        stats = dedup_db.get_stats()
        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞")
        logger.info(f"   ‚Ä¢ –õ–æ—Ç–æ–≤ –≤ –ë–î: {stats.get('total_lots', 0)}")
        logger.info(f"   ‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ë–î: {stats.get('total_offers', 0)}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    setup_scheduler()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    logger.info("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
    try:
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

"""if __name__ == "__main__":
    main()"""