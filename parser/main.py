import asyncio
import logging
import statistics
import re
import time
import os
import pickle
import pytz
import json
from core.deduplication_db import dedup_db
import sys
from datetime import datetime
from parser.address_parser import calculate_address_components, is_moscow_address, is_moscow_oblast_address
from collections import defaultdict
from typing import Dict, List, Any, Optional, Tuple
from parser.torgi_async import fetch_lots
from parser.cian_minimal import fetch_nearby_offers, unformatted_address_to_cian_search_filter
from parser.google_sheets import push_lots, push_offers, push_district_stats
from parser.gpt_classifier import classify_property  
from parser.cian_minimal import get_parser
# from parser.geo_utils import filter_offers_by_distance
from core.models import Lot, Offer, PropertyClassification
from core.config import CONFIG
from parser.lot_district import gpt_extract_most_local_part_fixed
from test_address_cleanup import enhanced_address_search, create_fixed_geocoder, simplify_address_for_geocoding
#from parser.geo_utils import filter_offers_by_distance
import random
from parser.format_table import apply_all_formatting

# –ò–º–ø–æ—Ä—Ç Telegram –±–æ—Ç–∞
from bot.bot_service import bot_service

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ü–µ–Ω–∞–º —Ä–∞–π–æ–Ω–æ–≤
district_price_stats = {}


# –î–æ–±–∞–≤–∏—Ç—å –≤ main.py —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π

def save_all_raw_offers():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –¥–∞–∂–µ –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é."""
    global all_raw_offers
    
    if 'all_raw_offers' not in globals() or not all_raw_offers:
        logging.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        return
    
    timestamp = int(time.time())
    logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö {len(all_raw_offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ)")
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–∏–ø—É
    sale_offers = [o for o in all_raw_offers if o.type == 'sale']
    rent_offers = [o for o in all_raw_offers if o.type == 'rent']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
    if sale_offers:
        try:
            push_offers(f"all_sale_{timestamp}", sale_offers)
            logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(sale_offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ: {e}")
    
    if rent_offers:
        try:
            push_offers(f"all_rent_{timestamp}", rent_offers)
            logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(rent_offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–± –∞—Ä–µ–Ω–¥–µ")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–± –∞—Ä–µ–Ω–¥–µ: {e}")


def get_cian_metrics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç—ã CIAN –ø–∞—Ä—Å–µ—Ä–∞"""
    parser = get_parser()
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–µ—à–µ –ø–∞—Ä—Å–µ—Ä–∞ –∏ –¥—Ä. –º–µ—Ç—Ä–∏–∫–∏
    metrics = {}
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä–∞
        metrics["driver_alive"] = parser.driver is not None
        metrics["first_tab_valid"] = parser.first_tab is not None
        
        # –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        test_url = "https://www.cian.ru/cat.php?deal_type=sale&engine_version=2&offer_type=offices"
        test_page = parser.get_page(test_url)
        metrics["test_request_success"] = test_page is not None and len(test_page) > 1000
        metrics["test_page_length"] = len(test_page) if test_page else 0
        
        logging.info(f"CIAN Parser metrics: {metrics}")
        
        if not metrics.get("driver_alive", False):
            logging.warning("‚ö†Ô∏è CIAN Parser driver –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä
            parser.initialize_driver()
            metrics["driver_restarted"] = True
            
        if not metrics.get("test_request_success", False):
            logging.warning("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ CIAN –Ω–µ —É–¥–∞–ª—Å—è")
            
        return metrics
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ CIAN –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return {"error": str(e)}

def calculate_district(address: str) -> str:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞ –∏–∑ –∞–¥—Ä–µ—Å–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º GPT.
    
    Args:
        address: –ê–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        –°–∞–º—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∞–¥—Ä–µ—Å–∞ (—É–ª–∏—Ü–∞ ‚Üí —Ä–∞–π–æ–Ω ‚Üí –≥–æ—Ä–æ–¥)
    """
    if not address:
        return "–ú–æ—Å–∫–≤–∞"  # –î–µ—Ñ–æ–ª—Ç
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é GPT-—Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
        from lot_district import gpt_extract_most_local_part_fixed
        
        result = gpt_extract_most_local_part_fixed(address)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result and result != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and len(result) > 1:
            logging.info(f"üéØ GPT –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ä–∞–π–æ–Ω –¥–ª—è '{address[:50]}...': '{result}'")
            return result
        else:
            # Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            logging.warning(f"‚ö†Ô∏è GPT –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–π–æ–Ω –¥–ª—è '{address[:50]}...', –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return calculate_district_fallback(address)
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ GPT-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–∞: {e}")
        return calculate_district_fallback(address)

def calculate_district_fallback(address: str) -> str:
    """
    –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
    """
    if not address:
        return "–ú–æ—Å–∫–≤–∞"
        
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥–∞
    if re.search(r'–∑–µ–ª–µ–Ω–æ–≥—Ä–∞–¥|–∫—Ä—é–∫–æ–≤–æ', address.lower()):
        return "–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥"
        
    # –ü–æ–∏—Å–∫ —Ä–∞–π–æ–Ω–∞ –≤ –∞–¥—Ä–µ—Å–µ
    district_match = re.search(r'—Ä–∞–π–æ–Ω\s+([^\s,]+)|([^\s,]+)\s+—Ä–∞–π–æ–Ω', address.lower())
    if district_match:
        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≤—Ç–æ—Ä—É—é
        district = district_match.group(1) or district_match.group(2)
        return district.capitalize()
    
    # –ü–æ–∏—Å–∫ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞
    mo_match = re.search(r'–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥\s+([^\s,]+)', address.lower())
    if mo_match:
        return mo_match.group(1).capitalize()
        
    # –•–æ—Ä–æ—à–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ú–æ—Å–∫–≤—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    common_districts = [
        "–ê—Ä–±–∞—Ç", "–ë–∞—Å–º–∞–Ω–Ω—ã–π", "–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—á—å–µ", "–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π", "–ú–µ—â–∞–Ω—Å–∫–∏–π", "–ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∏–π", "–¢–∞–≥–∞–Ω—Å–∫–∏–π", "–¢–≤–µ—Ä—Å–∫–æ–π", "–•–∞–º–æ–≤–Ω–∏–∫–∏", "–Ø–∫–∏–º–∞–Ω–∫–∞",
        "–ê—ç—Ä–æ–ø–æ—Ä—Ç", "–ë–µ–≥–æ–≤–æ–π", "–ë–µ—Å–∫—É–¥–Ω–∏–∫–æ–≤—Å–∫–∏–π", "–í–æ–π–∫–æ–≤—Å–∫–∏–π", "–í–æ—Å—Ç–æ—á–Ω–æ–µ –î–µ–≥—É–Ω–∏–Ω–æ", "–ì–æ–ª–æ–≤–∏–Ω—Å–∫–∏–π", "–î–º–∏—Ç—Ä–æ–≤—Å–∫–∏–π", "–ó–∞–ø–∞–¥–Ω–æ–µ –î–µ–≥—É–Ω–∏–Ω–æ",
        "–ö–æ–ø—Ç–µ–≤–æ", "–õ–µ–≤–æ–±–µ—Ä–µ–∂–Ω—ã–π", "–ú–æ–ª–∂–∞–Ω–∏–Ω–æ–≤—Å–∫–∏–π", "–°–∞–≤—ë–ª–æ–≤—Å–∫–∏–π", "–°–æ–∫–æ–ª", "–¢–∏–º–∏—Ä—è–∑–µ–≤—Å–∫–∏–π", "–•–æ–≤—Ä–∏–Ω–æ", "–•–æ—Ä–æ—à—ë–≤—Å–∫–∏–π",
        "–ê–ª–µ–∫—Å–µ–µ–≤—Å–∫–∏–π", "–ê–ª—Ç—É—Ñ—å–µ–≤—Å–∫–∏–π", "–ë–∞–±—É—à–∫–∏–Ω—Å–∫–∏–π", "–ë–∏–±–∏—Ä–µ–≤–æ", "–ë—É—Ç—ã—Ä—Å–∫–∏–π", "–õ–∏–∞–Ω–æ–∑–æ–≤–æ", "–õ–æ—Å–∏–Ω–æ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π", "–ú–∞—Ä—Ñ–∏–Ω–æ",
        "–ú–∞—Ä—å–∏–Ω–∞ –†–æ—â–∞", "–û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π", "–û—Ç—Ä–∞–¥–Ω–æ–µ", "–†–æ—Å—Ç–æ–∫–∏–Ω–æ", "–°–≤–∏–±–ª–æ–≤–æ", "–°–µ–≤–µ—Ä–Ω—ã–π", "–°–µ–≤–µ—Ä–Ω–æ–µ –ú–µ–¥–≤–µ–¥–∫–æ–≤–æ", "–Æ–∂–Ω–æ–µ –ú–µ–¥–≤–µ–¥–∫–æ–≤–æ", "–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∏–π",
        "–ë–æ–≥–æ—Ä–æ–¥—Å–∫–æ–µ", "–í–µ—à–Ω—è–∫–∏", "–í–æ—Å—Ç–æ—á–Ω—ã–π", "–í–æ—Å—Ç–æ—á–Ω–æ–µ –ò–∑–º–∞–π–ª–æ–≤–æ", "–ì–æ–ª—å—è–Ω–æ–≤–æ", "–ò–≤–∞–Ω–æ–≤—Å–∫–æ–µ", "–ò–∑–º–∞–π–ª–æ–≤–æ", "–ö–æ—Å–∏–Ω–æ‚Äë–£—Ö—Ç–æ–º—Å–∫–∏–π",
        "–ú–µ—Ç—Ä–æ–≥–æ—Ä–æ–¥–æ–∫", "–ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ", "–ù–æ–≤–æ–∫–æ—Å–∏–Ω–æ", "–ü–µ—Ä–æ–≤–æ", "–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–æ–µ", "–°–µ–≤–µ—Ä–Ω–æ–µ –ò–∑–º–∞–π–ª–æ–≤–æ", "–°–æ–∫–æ–ª–∏–Ω–∞—è –ì–æ—Ä–∞", "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏",
        "–í—ã—Ö–∏–Ω–æ‚Äë–ñ—É–ª–µ–±–∏–Ω–æ", "–ö–∞–ø–æ—Ç–Ω—è", "–ö—É–∑—å–º–∏–Ω–∫–∏", "–õ–µ—Ñ–æ—Ä—Ç–æ–≤–æ", "–õ—é–±–ª–∏–Ω–æ", "–ú–∞—Ä—å–∏–Ω–æ", "–ù–µ–∫—Ä–∞—Å–æ–≤–∫–∞", "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∏–π",
        "–ü–µ—á–∞—Ç–Ω–∏–∫–∏", "–†—è–∑–∞–Ω—Å–∫–∏–π", "–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏", "–Æ–∂–Ω–æ–ø–æ—Ä—Ç–æ–≤—ã–π",
        "–ë–∏—Ä—é–ª—ë–≤–æ –í–æ—Å—Ç–æ—á–Ω–æ–µ", "–ë–∏—Ä—é–ª—ë–≤–æ –ó–∞–ø–∞–¥–Ω–æ–µ", "–ë—Ä–∞—Ç–µ–µ–≤–æ", "–î–∞–Ω–∏–ª–æ–≤—Å–∫–∏–π", "–î–æ–Ω—Å–∫–æ–π", "–ó—è–±–ª–∏–∫–æ–≤–æ", "–ú–æ—Å–∫–≤–æ—Ä–µ—á—å–µ‚Äë–°–∞–±—É—Ä–æ–≤–æ",
        "–ù–∞–≥–∞—Ç–∏–Ω–æ‚Äë–°–∞–¥–æ–≤–Ω–∏–∫–∏", "–ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∏–π –ó–∞—Ç–æ–Ω", "–ù–∞–≥–æ—Ä–Ω—ã–π", "–û—Ä–µ—Ö–æ–≤–æ‚Äë–ë–æ—Ä–∏—Å–æ–≤–æ –°–µ–≤–µ—Ä–Ω–æ–µ", "–û—Ä–µ—Ö–æ–≤–æ‚Äë–ë–æ—Ä–∏—Å–æ–≤–æ –Æ–∂–Ω–æ–µ",
        "–¶–∞—Ä–∏—Ü—ã–Ω–æ", "–ß–µ—Ä—Ç–∞–Ω–æ–≤–æ –°–µ–≤–µ—Ä–Ω–æ–µ", "–ß–µ—Ä—Ç–∞–Ω–æ–≤–æ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ", "–ß–µ—Ä—Ç–∞–Ω–æ–≤–æ –Æ–∂–Ω–æ–µ",
        "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π", "–ì–∞–≥–∞—Ä–∏–Ω—Å–∫–∏–π", "–ó—é–∑–∏–Ω–æ", "–ö–æ–Ω—å–∫–æ–≤–æ", "–ö–æ—Ç–ª–æ–≤–∫–∞", "–õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∏–π", "–û–±—Ä—É—á–µ–≤—Å–∫–∏–π",
        "–°–µ–≤–µ—Ä–Ω–æ–µ –ë—É—Ç–æ–≤–æ", "–¢—ë–ø–ª—ã–π –°—Ç–∞–Ω", "–ß–µ—Ä—ë–º—É—à–∫–∏", "–Æ–∂–Ω–æ–µ –ë—É—Ç–æ–≤–æ", "–Ø—Å–µ–Ω–µ–≤–æ",
        "–î–æ—Ä–æ–≥–æ–º–∏–ª–æ–≤–æ", "–ö—Ä—ã–ª–∞—Ç—Å–∫–æ–µ", "–ö—É–Ω—Ü–µ–≤–æ", "–ú–æ–∂–∞–π—Å–∫–∏–π", "–ù–æ–≤–æ‚Äë–ü–µ—Ä–µ–¥–µ–ª–∫–∏–Ω–æ", "–û—á–∞–∫–æ–≤–æ‚Äë–ú–∞—Ç–≤–µ–µ–≤—Å–∫–æ–µ",
        "–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ä–Ω–∞–¥—Å–∫–æ–≥–æ", "–†–∞–º–µ–Ω–∫–∏", "–°–æ–ª–Ω—Ü–µ–≤–æ", "–¢—Ä–æ–ø–∞—Ä—ë–≤–æ‚Äë–ù–∏–∫—É–ª–∏–Ω–æ", "–§–∏–ª—ë–≤—Å–∫–∏–π –ü–∞—Ä–∫", "–§–∏–ª–∏‚Äë–î–∞–≤—ã–¥–∫–æ–≤–æ",
        "–ö—É—Ä–∫–∏–Ω–æ", "–ú–∏—Ç–∏–Ω–æ", "–ü–æ–∫—Ä–æ–≤—Å–∫–æ–µ‚Äë–°—Ç—Ä–µ—à–Ω–µ–≤–æ", "–°–µ–≤–µ—Ä–Ω–æ–µ –¢—É—à–∏–Ω–æ", "–°—Ç—Ä–æ–≥–∏–Ω–æ", "–•–æ—Ä–æ—à—ë–≤–æ‚Äë–ú–Ω—ë–≤–Ω–∏–∫–∏", "–©—É–∫–∏–Ω–æ", "–Æ–∂–Ω–æ–µ –¢—É—à–∏–Ω–æ",
        "–ö—Ä—é–∫–æ–≤–æ", "–ú–∞—Ç—É—à–∫–∏–Ω–æ", "–°–∞–≤—ë–ª–∫–∏", "–°—Ç–∞—Ä–æ–µ –ö—Ä—é–∫–æ–≤–æ", "–°–∏–ª–∏–Ω–æ",
        "–í–Ω—É–∫–æ–≤–æ", "–ö–æ–º–º—É–Ω–∞—Ä–∫–∞", "–§–∏–ª–∏–º–æ–Ω–∫–æ–≤—Å–∫–∏–π", "–©–µ—Ä–±–∏–Ω–∫–∞",
        "–ë–µ–∫–∞—Å–æ–≤–æ", "–í–æ—Ä–æ–Ω–æ–≤–æ", "–ö—Ä–∞—Å–Ω–æ–ø–∞—Ö–æ—Ä—Å–∫–∏–π", "–¢—Ä–æ–∏—Ü–∫"
    ]
    
    for district in common_districts:
        if district.lower() in address.lower():
            return district
    
    # –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    city_match = re.search(r'–≥\.?\s*([^\s,]+)|–≥–æ—Ä–æ–¥\s+([^\s,]+)', address.lower())
    if city_match:
        city = city_match.group(1) or city_match.group(2)
        if city not in ["–º–æ—Å–∫–≤–∞"]:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ú–æ—Å–∫–≤–∞
            return f"–≥. {city.capitalize()}"
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–∫—Ä—É–≥–∞ –ú–æ—Å–∫–≤—ã
    adm_districts = {
        "—Ü–∞–æ": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ê–û",
        "—Å–∞–æ": "–°–µ–≤–µ—Ä–Ω—ã–π –ê–û",
        "—Å–≤–∞–æ": "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π –ê–û", 
        "–≤–∞–æ": "–í–æ—Å—Ç–æ—á–Ω—ã–π –ê–û",
        "—é–≤–∞–æ": "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π –ê–û",
        "—é–∞–æ": "–Æ–∂–Ω—ã–π –ê–û",
        "—é–∑–∞–æ": "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–π –ê–û",
        "–∑–∞–æ": "–ó–∞–ø–∞–¥–Ω—ã–π –ê–û",
        "—Å–∑–∞–æ": "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π –ê–û",
        "–∑–µ–ª–∞–æ": "–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫–∏–π –ê–û",
        "—Ç–∏–Ω–∞–æ": "–¢—Ä–æ–∏—Ü–∫–∏–π –∏ –ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫–∏–π –ê–û"
    }
    
    for short_name, full_name in adm_districts.items():
        if short_name in address.lower() or full_name.lower() in address.lower():
            return full_name
            
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ú–æ—Å–∫–≤–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    return "–ú–æ—Å–∫–≤–∞"

def calculate_median_prices(offers_by_district: Dict[str, List[Offer]]) -> Dict[str, float]:
    """Calculate median price per square meter by district with safe error handling."""
    median_prices = {}
    
    logging.info(f"–†–∞—Å—á–µ—Ç –º–µ–¥–∏–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –ø–æ {len(offers_by_district)} —Ä–∞–π–æ–Ω–∞–º")
    
    for district, offers in offers_by_district.items():
        if not offers or len(offers) < 2:  # –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            logging.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–π–æ–Ω–∞ '{district}' ({len(offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π)")
            continue
            
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–ª–æ—â–∞–¥—å—é
        valid_offers = [offer for offer in offers if offer.area > 0 and offer.price > 0]
        
        if len(valid_offers) < 2:  # –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            logging.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–π–æ–Ω–∞ '{district}'")
            continue
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä
        prices_per_sqm = [offer.price / offer.area for offer in valid_offers]
        
        if len(prices_per_sqm) < 2:  # –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
            logging.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ü–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤ —Ä–∞–π–æ–Ω–µ '{district}'")
            continue
        
        try:
            # –ë–ï–ó–û–ü–ê–°–ù–´–ô —Ä–∞—Å—á–µ—Ç –º–µ–¥–∏–∞–Ω—ã
            median_price = statistics.median(prices_per_sqm)
            median_prices[district] = median_price
            
            logging.info(f"–†–∞–π–æ–Ω '{district}': {len(valid_offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –º–µ–¥–∏–∞–Ω–∞ {median_price:.0f} ‚ÇΩ/–º¬≤")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–µ–¥–∏–∞–Ω—ã –¥–ª—è —Ä–∞–π–æ–Ω–∞ '{district}': {e}")
            continue
    
    if not median_prices:
        logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ–¥–∏–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞")
    
    return median_prices

def export_price_statistics():
    """–û–¢–ö–õ–Æ–ß–ê–ï–ú —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
    logging.info("üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
    return

async def filter_offers_without_geocoding(lot_address: str, offers: List[Offer], district_priority=True) -> List[Offer]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."""
    logging.info(f"‚ö†Ô∏è –ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {len(offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    if not offers:
        return []
        
    lot_district = calculate_district(lot_address)
    logging.info(f"–†–∞–π–æ–Ω –ª–æ—Ç–∞: {lot_district}")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    def offer_relevance_score(offer):
        score = 0
        offer_district = getattr(offer, 'district', None) or calculate_district(offer.address)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–π —Ä–∞–π–æ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
        offer.district = offer_district
        
        # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –¥–∞—ë—Ç 100 –±–∞–ª–ª–æ–≤
        if lot_district != "Unknown" and offer_district == lot_district:
            score += 100
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–∞—ë—Ç –¥–æ 50 –±–∞–ª–ª–æ–≤
        lot_address_parts = set(lot_address.lower().split())
        offer_address_parts = set(offer.address.lower().split())
        common_parts = lot_address_parts.intersection(offer_address_parts)
        address_match_score = len(common_parts) / max(1, len(lot_address_parts)) * 50
        score += address_match_score
        
        # –ü–æ–æ—â—Ä—è–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        if len(offer.address) > 15:
            score += 10
            
        return score
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ
    scored_offers = [(offer, offer_relevance_score(offer)) for offer in offers]
    scored_offers.sort(key=lambda x: x[1], reverse=True)
    
    # –û—Ç–±–∏—Ä–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    filtered_offers = [offer for offer, score in scored_offers if score >= 30]
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, —Å–º—è–≥—á–∞–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–π–æ–Ω–∞
    if not filtered_offers and district_priority:
        logging.info("–°–º—è–≥—á–∞–µ–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Ä–∞–π–æ–Ω—É")
        filtered_offers = [offer for offer, score in scored_offers if score >= 15]
    
    # –ï—Å–ª–∏ –≤—Å—ë –µ—â–µ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –±–µ—Ä—ë–º —Ö–æ—Ç—è –±—ã 5 –ª—É—á—à–∏—Ö
    if not filtered_offers:
        filtered_offers = [offer for offer, _ in scored_offers[:5]]
        
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if filtered_offers:
        logging.info(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: –æ—Ç–æ–±—Ä–∞–Ω–æ {len(filtered_offers)} –∏–∑ {len(offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        for i, offer in enumerate(filtered_offers[:3], 1):
            logging.info(f"  {i}. {offer.address[:50]}... (—Ä–∞–π–æ–Ω: {getattr(offer, 'district', '–Ω–µ —É–∫–∞–∑–∞–Ω')})")
    else:
        logging.warning("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    return filtered_offers

def load_checkpoint():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —á–µ–∫–ø–æ–∏–Ω—Ç."""
    try:
        # –ù–∞–π–¥–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
        checkpoint_files = sorted(
            [f for f in os.listdir(".") if f.startswith("checkpoint_")],
            key=lambda x: os.path.getmtime(x),
            reverse=True
        )
        
        if not checkpoint_files:
            logging.info("üîç –ß–µ–∫–ø–æ–∏–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è")
            return None
            
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π
        latest_checkpoint = checkpoint_files[0]
        logging.info(f"üîÑ –ù–∞–π–¥–µ–Ω —á–µ–∫–ø–æ–∏–Ω—Ç: {latest_checkpoint}, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        
        with open(latest_checkpoint, "rb") as f:
            checkpoint_data = pickle.load(f)
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        required_fields = ["lots", "processed_indices", "offers_by_district", "timestamp"]
        if not all(field in checkpoint_data for field in required_fields):
            logging.warning("‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —á–µ–∫–ø–æ–∏–Ω—Ç–µ, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è")
            return None
            
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–ø–æ–∏–Ω—Ç–µ
        checkpoint_age = time.time() - checkpoint_data["timestamp"]
        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ–∫–ø–æ–∏–Ω—Ç –æ—Ç {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(checkpoint_data['timestamp']))}")
        logging.info(f"üìä –í —á–µ–∫–ø–æ–∏–Ω—Ç–µ: {len(checkpoint_data.get('lots', []))} –ª–æ—Ç–æ–≤, "
                    f"{len(checkpoint_data.get('processed_indices', []))} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, "
                    f"{len(checkpoint_data.get('offers_by_district', {}))} —Ä–∞–π–æ–Ω–æ–≤, "
                    f"{len(checkpoint_data.get('all_sale_offers', []))} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ, "
                    f"{len(checkpoint_data.get('all_rent_offers', []))} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–± –∞—Ä–µ–Ω–¥–µ")
        
        return checkpoint_data
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–ø–æ–∏–Ω—Ç–∞: {e}")
        return None
    
def calculate_lot_district_metrics(lot, sale_offers, rent_offers):
    """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ
    if sale_offers:
        lot.sale_data = []
        prices_per_sqm = []
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ç–æ–º –∂–µ —Ä–∞–π–æ–Ω–µ
        for offer in sale_offers:
            if not hasattr(offer, 'district'):
                offer.district = calculate_district(offer.address)
                
            if offer.district == lot.district and offer.area > 0:
                price_per_sqm = offer.price / offer.area
                prices_per_sqm.append(price_per_sqm)
                lot.sale_data.append(price_per_sqm)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞–Ω–Ω—É—é —Ü–µ–Ω—É
        if prices_per_sqm:
            lot.market_price_per_sqm = statistics.median(prices_per_sqm)
            lot.market_value = lot.market_price_per_sqm * lot.area
            lot.current_price_per_sqm = lot.price / lot.area if lot.area > 0 else 0
            lot.capitalization_rub = lot.market_value - lot.price
            lot.capitalization_percent = (lot.capitalization_rub / lot.price) if lot.price > 0 else 0
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–± –∞—Ä–µ–Ω–¥–µ
    lot.rent_data = []
    if rent_offers:
        for offer in rent_offers:
            if not hasattr(offer, 'district'):
                offer.district = calculate_district(offer.address)
                
            if offer.district == lot.district and offer.area > 0:
                rent_per_sqm = offer.price / offer.area
                lot.rent_data.append(rent_per_sqm)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞—Ä–µ–Ω–¥–µ, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        if lot.rent_data:
            lot.average_rent_price_per_sqm = sum(lot.rent_data) / len(lot.rent_data)
            lot.has_rent_data = True
            lot.annual_income = lot.average_rent_price_per_sqm * 12 * lot.area
            lot.monthly_gap = lot.annual_income / 12
            lot.annual_yield_percent = (lot.annual_income / lot.price) if lot.price > 0 else 0
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            lot.has_rent_data = False
            lot.monthly_gap = lot.market_value * 0.007  # 0.7% –≤ –º–µ—Å—è—Ü
            lot.annual_yield_percent = (lot.monthly_gap * 12 / lot.price) if lot.price > 0 else 0
    
    logging.info(f"–õ–æ—Ç {lot.id}: –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã - "
               f"–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {getattr(lot, 'market_price_per_sqm', 0):.0f} ‚ÇΩ/–º¬≤, "
               f"–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {getattr(lot, 'capitalization_rub', 0):,.0f} ‚ÇΩ "
               f"({getattr(lot, 'capitalization_percent', 0):.1f}%), "
               f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {getattr(lot, 'annual_yield_percent', 0):.1f}%")
    

def save_progress_checkpoint(lots, processed_indices, offers_by_district, district_offer_count, all_sale_offers=None, all_rent_offers=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."""
    try:
        checkpoint_file = f"checkpoint_{int(time.time())}.pkl"
        with open(checkpoint_file, "wb") as f:
            pickle.dump({
                "lots": lots,
                "processed_indices": processed_indices,
                "offers_by_district": offers_by_district,
                "district_offer_count": district_offer_count,
                "all_sale_offers": all_sale_offers or [],
                "all_rent_offers": all_rent_offers or [],
                "timestamp": time.time()
            }, f)
        logging.info(f"üíæ –°–æ–∑–¥–∞–Ω —á–µ–∫–ø–æ–π–Ω—Ç: {checkpoint_file}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —á–µ–∫–ø–æ–π–Ω—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        checkpoint_files = sorted(
            [f for f in os.listdir(".") if f.startswith("checkpoint_")],
            key=lambda x: os.path.getmtime(x),
            reverse=True
        )
        
        for old_file in checkpoint_files[3:]:
            try:
                os.remove(old_file)
                logging.debug(f"–£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —á–µ–∫–ø–æ–π–Ω—Ç: {old_file}")
            except:
                pass
                
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–ø–æ–π–Ω—Ç–∞: {e}")

def push_custom_data(sheet_name: str, rows: List[List[Any]]):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç Google Sheets."""
    from parser.google_sheets import _append, _svc, GSHEET_ID
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
        sheets_metadata = _svc.spreadsheets().get(spreadsheetId=GSHEET_ID).execute()
        sheet_exists = any(sheet['properties']['title'] == sheet_name for sheet in sheets_metadata['sheets'])
        
        if not sheet_exists:
            logging.info(f"–õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç.")
            body = {
                'requests': [{
                    'addSheet': {
                        'properties': {
                            'title': sheet_name,
                            'gridProperties': {
                                'frozenRowCount': 1
                            }
                        }
                    }
                }]
            }
            _svc.spreadsheets().batchUpdate(spreadsheetId=GSHEET_ID, body=body).execute()
        
        # –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        _svc.spreadsheets().values().clear(
            spreadsheetId=GSHEET_ID,
            range=sheet_name
        ).execute()
        
        _append(sheet_name, rows)
        logging.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ –ª–∏—Å—Ç '{sheet_name}'")
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        sheet_id = next((s['properties']['sheetId'] for s in sheets_metadata['sheets'] 
                      if s['properties']['title'] == sheet_name), None)
        
        if sheet_id:
            auto_resize_request = {
                "requests": [
                    {
                        "autoResizeDimensions": {
                            "dimensions": {
                                "sheetId": sheet_id,
                                "dimension": "COLUMNS",
                                "startIndex": 0,
                                "endIndex": len(rows[0]) if rows else 10
                            }
                        }
                    }
                ]
            }
            _svc.spreadsheets().batchUpdate(spreadsheetId=GSHEET_ID, body=auto_resize_request).execute()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç '{sheet_name}': {e}")

def calculate_intermediate_metrics(processed_lots, offers_by_district, current_idx):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤."""
    logging.info(f"üßÆ –†–∞—Å—á–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è {len(processed_lots)} –ª–æ—Ç–æ–≤ –Ω–∞ —à–∞–≥–µ {current_idx}")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –ø–æ –∏–º–µ—é—â–∏–º—Å—è –¥–∞–Ω–Ω—ã–º
    median_prices = calculate_median_prices(offers_by_district)
    
    if not median_prices:
        logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ–¥–∏–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ")
        return processed_lots
        
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
    updated_lots = []
    for lot in processed_lots:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ—Ç—ã –±–µ–∑ —Ä–∞–π–æ–Ω–∞ –∏–ª–∏ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ä–∞–π–æ–Ω–æ–º
        if not lot.district or lot.district == "Unknown" or lot.district not in median_prices:
            updated_lots.append(lot)
            continue
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ª–æ—Ç–∞
        calculate_lot_metrics(lot, median_prices)
        updated_lots.append(lot)
    
    logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {len(updated_lots)} –ª–æ—Ç–æ–≤")
    return updated_lots


async def enhanced_geocoding_address(address: str) -> Optional[Tuple[float, float]]:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–∞ —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –∏ –æ—á–∏—Å—Ç–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    """
    if not address:
        return None
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–æ–∫–æ–¥–µ—Ä
    geocoder = create_fixed_geocoder()
    if not geocoder:
        logging.warning("–ì–µ–æ–∫–æ–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return None
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞
    result = enhanced_address_search(geocoder, address)
    
    if result:
        lat, lon, found_address, used_variation = result
        logging.info(f"‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞: '{address}' ‚Üí {lat:.6f}, {lon:.6f}")
        logging.info(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: '{used_variation}'")
        return (lon, lat)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ (longitude, latitude)
    else:
        logging.warning(f"‚ùå –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: '{address}'")
        return None

def estimate_market_value_from_rent(lot, rent_prices_per_sqm):
    """–û—Ü–µ–Ω–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä–µ–Ω–¥–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏."""
    # –ì–æ–¥–æ–≤–æ–π –∞—Ä–µ–Ω–¥–Ω—ã–π –¥–æ—Ö–æ–¥
    median_rent = statistics.median(rent_prices_per_sqm)
    annual_income = median_rent * 12 * lot.area
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç–∞–≤–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
    property_type = getattr(lot.classification, 'category', '').lower() if hasattr(lot, 'classification') else ''
    
    # –°—Ç–∞–≤–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
    cap_rates = {
        '–æ—Ñ–∏—Å': 0.09,  # –û—Ñ–∏—Å—ã: 9%
        '—Å—Ç—Ä–∏—Ç': 0.085,  # –°—Ç—Ä–∏—Ç-—Ä–∏—Ç–µ–π–ª: 8.5%
        '—Ç–æ—Ä–≥–æ–≤–æ–µ': 0.08,  # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è: 8%
        '—Å–∫–ª–∞–¥': 0.095,  # –°–∫–ª–∞–¥—ã: 9.5%
        '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ': 0.1,  # –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: 10%
        '–∑–µ–º–µ–ª—å–Ω—ã–π': 0.06,  # –ó–µ–º–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏: 6%
    }
    
    # –ü–æ–¥–±–æ—Ä —Å—Ç–∞–≤–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    cap_rate = 0.09  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - 9%
    for key, rate in cap_rates.items():
        if key in property_type:
            cap_rate = rate
            break
    
    # –†–∞—Å—á–µ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    market_value = annual_income / cap_rate
    market_price_per_sqm = market_value / lot.area if lot.area > 0 else 0
    
    return market_value, market_price_per_sqm

def calculate_lot_metrics(lot: Lot, all_sale_offers: List[Offer], all_rent_offers: List[Offer]):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ª–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.
    –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∫–∞–∫ –¥—Ä–æ–±–∏ –¥–ª—è Google Sheets
    """
    def is_valid_offer(offer):
        if offer.area <= 0 or offer.price <= 0:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–ª–æ—â–∞–¥–∏ –¥–ª—è –æ—Ñ–∏—Å–æ–≤
        address_lower = offer.address.lower()
        
        # –ü—Ä–∏–∑–Ω–∞–∫–∏ –æ—Ñ–∏—Å–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
        office_indicators = [
            '–æ—Ñ–∏—Å', '–±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä', '–±—Ü', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –∑–¥–∞–Ω–∏–µ',
            '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ', '–æ—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ', '–æ—Ñ–∏—Å–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ'
        ]
        
        is_likely_office = any(indicator in address_lower for indicator in office_indicators)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ñ–∏—Å, –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–ª–æ—â–∞–¥–∏
        if is_likely_office:
            if offer.area < 1000 or offer.area > 3000:
                logging.info(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ñ–∏—Å–∞: –ø–ª–æ—â–∞–¥—å {offer.area} –º¬≤ –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1000-3000 –º¬≤")
                return False
                
        return True

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
    valid_sale_offers = [o for o in all_sale_offers if is_valid_offer(o)]
    valid_rent_offers = [o for o in all_rent_offers if is_valid_offer(o)]
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    purchase_price = lot.price
    holding_years = 5
    months_rented_per_year = 11  # 11 –º–µ—Å—è—Ü–µ–≤ –∞—Ä–µ–Ω–¥—ã –≤ –≥–æ–¥—É
    expense_ratio = 0.1  # 10% —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ—Ç –≤–∞–ª–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    lot.market_price_per_sqm = 0
    lot.current_price_per_sqm = lot.price / lot.area if lot.area > 0 else 0
    lot.market_value = 0
    lot.capitalization_rub = 0
    lot.capitalization_percent = 0
    lot.monthly_gap = 0
    lot.annual_yield_percent = 0
    lot.annual_income = 0
    lot.average_rent_price_per_sqm = 0
    lot.market_value_method = "unknown"
    
    # 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ
    if valid_sale_offers:
        prices_per_sqm = [offer.price / offer.area for offer in valid_sale_offers]
        
        if prices_per_sqm:
            lot.market_price_per_sqm = statistics.median(prices_per_sqm)
            lot.market_value = lot.market_price_per_sqm * lot.area
            lot.capitalization_rub = lot.market_value - lot.price
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–∫ –î–†–û–ë–¨ (0.256 –¥–ª—è 25.6%)
            lot.capitalization_percent = (lot.capitalization_rub / lot.price) if lot.price > 0 else 0
            lot.market_value_method = "sales"
    else:
        # –ù–ï–¢ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ - –ù–ï –º–æ–∂–µ–º –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        lot.market_price_per_sqm = 0
        lot.market_value = 0
        lot.capitalization_rub = 0
        lot.capitalization_percent = 0
        lot.market_value_method = "no_sales_data"
    
    # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–± –∞—Ä–µ–Ω–¥–µ
    if valid_rent_offers:
        rent_prices_per_sqm = [offer.price / offer.area for offer in valid_rent_offers]
        
        if rent_prices_per_sqm:
            lot.average_rent_price_per_sqm = statistics.median(rent_prices_per_sqm)
            lot.monthly_gap = lot.average_rent_price_per_sqm * lot.area
            net_monthly_income = lot.monthly_gap * (1 - expense_ratio)
            lot.annual_income = net_monthly_income * months_rented_per_year
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫–∞–∫ –î–†–û–ë–¨ (0.256 –¥–ª—è 25.6%)
            lot.annual_yield_percent = (lot.annual_income / lot.price) if lot.price > 0 else 0
    else:
        # –ù–ï–¢ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–± –∞—Ä–µ–Ω–¥–µ - –ù–ï –º–æ–∂–µ–º –ø–æ—Å—á–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        lot.monthly_gap = 0
        lot.annual_yield_percent = 0
        lot.annual_income = 0
        lot.average_rent_price_per_sqm = 0
    
    # 3. –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ –¥—Ä–æ–±–∏
    RENTAL_YIELD_THRESHOLD = 0.08  # 8% –∫–∞–∫ 0.08
    CAPITALIZATION_THRESHOLD = 0.15  # 15% –∫–∞–∫ 0.15
    
    # –†–∞—Å—á–µ—Ç –ø–ª—é—Å–æ–≤
    rental_plus = lot.annual_yield_percent >= RENTAL_YIELD_THRESHOLD
    capitalization_plus = lot.capitalization_percent >= CAPITALIZATION_THRESHOLD
    
    lot.plus_rental = 1 if rental_plus else 0
    lot.plus_sale = 1 if capitalization_plus else 0
    lot.plus_count = lot.plus_rental + lot.plus_sale
    
    # 4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    if lot.plus_count == 2:
        lot.status = "excellent"
    elif lot.plus_count == 1:
        lot.status = "good"
    elif lot.capitalization_percent > 0 or lot.annual_yield_percent > 0.05:  # 5% –∫–∞–∫ 0.05
        lot.status = "acceptable"
    else:
        lot.status = "poor"
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100 —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    logging.info(
        f"–õ–æ—Ç {lot.id}: –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {lot.market_price_per_sqm:,.0f} ‚ÇΩ/–º¬≤, "
        f"–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {lot.capitalization_rub:,.0f} ‚ÇΩ ({lot.capitalization_percent*100:.1f}%), "
        f"–ì–ê–ü: {lot.monthly_gap:,.0f} ‚ÇΩ/–º–µ—Å, "
        f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {lot.annual_yield_percent*100:.1f}%, "
        f"–ü–ª—é—Å—ã: {lot.plus_count}/2 (–∞—Ä–µ–Ω–¥–∞:{lot.plus_rental}, –ø—Ä–æ–¥–∞–∂–∞:{lot.plus_sale}), "
        f"–°—Ç–∞—Ç—É—Å: {lot.status}"
    )

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é filter_offers_by_distance –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fallback
# –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é filter_offers_by_distance –≤ parser/main.py
"""
async def filter_offers_by_distance(lot_address: str, offers: List[Offer], max_distance_km: float) -> List[Offer]:
    logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è {len(offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞ {lot_address[:50]}...")
    
    if not offers:
        return []
    
    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–∞–π–æ–Ω—É –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å 2GIS API
    lot_district = calculate_district(lot_address)
    logger.info(f"–†–∞–π–æ–Ω –ª–æ—Ç–∞: {lot_district}")
    
    # 1. –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–¥–µ–ª–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ä–∞–π–æ–Ω–∞–º
    offer_by_district = {}
    for offer in offers:
        if not hasattr(offer, 'district') or not offer.district:
            offer.district = calculate_district(offer.address)
        
        if offer.district not in offer_by_district:
            offer_by_district[offer.district] = []
        offer_by_district[offer.district].append(offer)
    
    # 2. –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä—ë–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ —Ç–æ–≥–æ –∂–µ —Ä–∞–π–æ–Ω–∞
    filtered_offers = []
    if lot_district in offer_by_district:
        filtered_offers.extend(offer_by_district[lot_district])
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ä–∞–π–æ–Ω–µ '{lot_district}'")
    
    # 3. –ï—Å–ª–∏ –º–∞–ª–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ —Ç–æ–≥–æ –∂–µ —Ä–∞–π–æ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑ —Å–æ—Å–µ–¥–Ω–∏—Ö —Ä–∞–π–æ–Ω–æ–≤ 
    if len(filtered_offers) < 5:
        # –°–æ—Å–µ–¥–Ω–∏–µ —Ä–∞–π–æ–Ω—ã (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ)
        other_districts = [d for d in offer_by_district.keys() if d != lot_district]
        
        for district in other_districts:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ä–∞–π–æ–Ω–∞
            filtered_offers.extend(offer_by_district[district][:3])
            if len(filtered_offers) >= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                break
    
    # 4. –ï—Å–ª–∏ –≤—Å—ë –µ—â–µ –º–∞–ª–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –±–µ—Ä—ë–º –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–π–æ–Ω–∞
    if len(filtered_offers) < 3 and offer_by_district:
        for district, district_offers in offer_by_district.items():
            if district_offers and district != lot_district:
                filtered_offers.append(district_offers[0])  # –û–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–∞–π–æ–Ω–∞
    
    # 5. –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if not filtered_offers and offers:
        filtered_offers = offers[:5]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    
    # –†–∞—Å—á–µ—Ç "pseudo-distance" –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
    for offer in filtered_offers:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ —Ç–æ–≥–æ –∂–µ —Ä–∞–π–æ–Ω–∞, —Å—Ç–∞–≤–∏–º –º–∞–ª–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        if offer.district == lot_district:
            offer.distance_to_lot = round(random.uniform(0.5, 2.9), 1)  # 0.5 - 2.9 –∫–º
        else:
            # –ï—Å–ª–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ä–∞–π–æ–Ω–∞ - –±–æ–ª—å—à–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            offer.distance_to_lot = round(random.uniform(3.0, 8.0), 1)  # 3.0 - 8.0 –∫–º
    
    logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_offers)} –∏–∑ {len(offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
    if CONFIG.get("save_all_offers", False):
        for offer in offers:
            if not hasattr(offer, 'distance_to_lot'):
                offer.distance_to_lot = 999.0  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –¥–∞–ª–µ–∫–∏–µ
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        global all_raw_offers
        if 'all_raw_offers' not in globals():
            all_raw_offers = []
        all_raw_offers.extend(offers)
    
    return filtered_offers
"""
from parser.google_sheets import setup_all_headers, push_custom_data


async def filter_offers_by_distance(lot_address: str, offers: List[Offer], max_distance_km: float) -> List[Offer]:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–∞—Å–∫–∞–¥–Ω–æ–π –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–∏
    """
    logger.info(f"üîç –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è {len(offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞ {lot_address[:50]}...")
    
    if not offers:
        return []
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    lot_coords = await enhanced_geocoding_address(lot_address)
    
    if not lot_coords:
        # Fallback –∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–∞–π–æ–Ω—É
        logging.warning("‚ö†Ô∏è –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–∞–π–æ–Ω—É")
        return await filter_offers_without_geocoding(lot_address, offers, district_priority=True)

    logger.info(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–æ—Ç–∞: lon={lot_coords[0]:.6f}, lat={lot_coords[1]:.6f}")

    filtered_offers = []
    geocoding_failures = 0
    
    for i, offer in enumerate(offers, 1):
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {i}/{len(offers)}: {offer.id}")
        
        if not offer.address:
            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {offer.id} ‚Äì –Ω–µ—Ç –∞–¥—Ä–µ—Å–∞")
            continue

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        offer_coords = await enhanced_geocoding_address(offer.address)
        
        if not offer_coords:
            logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {offer.id} ‚Äì –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è '{offer.address}'")
            geocoding_failures += 1
            continue

        logger.debug(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {offer.id} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lon={offer_coords[0]:.6f}, lat={offer_coords[1]:.6f}")

        # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–ø—Ä–æ—Å—Ç–æ–µ –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ)
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –∫–º (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ –¥–ª—è –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞)
            lat_diff = offer_coords[1] - lot_coords[1]
            lon_diff = offer_coords[0] - lot_coords[0]
            distance_deg = (lat_diff**2 + lon_diff**2)**0.5
            distance_km = distance_deg * 111  # –ü—Ä–∏–º–µ—Ä–Ω–æ 111 –∫–º –Ω–∞ –≥—Ä–∞–¥—É—Å
            
            if distance_km <= max_distance_km:
                offer.distance_to_lot = round(distance_km, 2)
                filtered_offers.append(offer)
                logger.info(f"–í–∫–ª—é—á–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {offer.id} ‚Äì {distance_km:.2f} –∫–º")
            else:
                logger.debug(f"–ò—Å–∫–ª—é—á–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {offer.id} ‚Äì {distance_km:.2f} –∫–º > {max_distance_km} –∫–º")
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {offer.id}: {e}")
            continue

    logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–æ–±—Ä–∞–Ω–æ {len(filtered_offers)} –∏–∑ {len(offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    logger.info(f"   –ù–µ—É–¥–∞—á–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–∏: {geocoding_failures}")
    
    return filtered_offers


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ü–æ–ª—É—á–∞–µ—Ç –ª–æ—Ç—ã —Å —Ç–æ—Ä–≥–æ–≤, –∏—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ 
    –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –¶–ò–ê–ù, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
        bot_service.initialize()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        setup_all_headers()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        resume_from_checkpoint = "--resume" in sys.argv
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        browser_operations = 0
        browser_refresh_interval = CONFIG.get("browser_refresh_interval", 20)
        lot_save_interval = CONFIG.get("lot_save_interval", 5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞
        debug_radius = CONFIG.get("debug_search_radius", 3)  # –†–∞–¥–∏—É—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 3 –∫–º
        search_radius = CONFIG.get("area_search_radius", 3)  # –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ - –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 3 –∫–º
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        all_sale_offers = []
        all_rent_offers = []
        offers_by_district = defaultdict(list)
        district_offer_count = defaultdict(int)
        processed_lots = []
        
        if resume_from_checkpoint:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫–ø–æ–∏–Ω—Ç
            checkpoint = load_checkpoint()
            
            if checkpoint:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                lots = checkpoint.get("lots", [])
                processed_indices = set(checkpoint.get("processed_indices", []))
                offers_by_district = defaultdict(list, checkpoint.get("offers_by_district", {}))
                district_offer_count = defaultdict(int, checkpoint.get("district_offer_count", {}))
                all_sale_offers = checkpoint.get("all_sale_offers", [])
                all_rent_offers = checkpoint.get("all_rent_offers", [])
                processed_lots = [lots[i] for i in processed_indices if i < len(lots)]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                start_idx = max(processed_indices) + 1 if processed_indices else 0
                logging.info(f"üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –ª–æ—Ç–∞ #{start_idx+1} –∏–∑ {len(lots)}")
                logging.info(f"üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {len(all_sale_offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ, {len(all_rent_offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–± –∞—Ä–µ–Ω–¥–µ")
            else:
                # –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è
                logging.info("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —á–µ–∫–ø–æ–∏–Ω—Ç–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è.")
                lots = await fetch_lots(max_pages=10)
                processed_indices = set()
                start_idx = 0
        else:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è
            logging.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –Ω—É–ª—è (–±–µ–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)")
            lots = await fetch_lots(max_pages=10)
            processed_indices = set()
            start_idx = 0
        
        logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(lots)} –ª–æ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ CIAN-–ø–∞—Ä—Å–µ—Ä–∞
        cian_metrics = get_cian_metrics()
        logging.info(f"–°—Ç–∞—Ç—É—Å CIAN-–ø–∞—Ä—Å–µ—Ä–∞: {cian_metrics}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        current_batch_sale = []
        current_batch_rent = []
        batch_size = 1  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞—è —Å start_idx
        for i in range(start_idx, len(lots)):
            lot = lots[i]
            
            # Determine if the address has sufficient components for narrowed search
            address_components = calculate_address_components(lot.address)
            
            # Skip CIAN parsing if we don't have enough address information
            # We need at least district, street, or city/settlement to narrow search
            if (address_components["confidence"] < 0.5 or
                (not address_components["district"] and 
                not address_components["street"] and
                not (address_components["city"] or address_components["settlement"]))):
                
                logging.warning(f"‚ö†Ô∏è Insufficient address components for lot {lot.id}: '{lot.name}'")
                logging.warning(f"Address: '{lot.address}' - would require city-wide search")
                
                # Set all metrics to zero
                lot.market_price_per_sqm = 0.0
                lot.market_value = 0.0
                lot.capitalization_rub = 0.0
                lot.capitalization_percent = 0.0
                lot.monthly_gap = 0.0
                lot.annual_yield_percent = 0.0
                lot.annual_income = 0.0
                lot.average_rent_price_per_sqm = 0.0
                lot.sale_offers_count = 0
                lot.rent_offers_count = 0
                lot.filtered_sale_offers_count = 0
                lot.filtered_rent_offers_count = 0
                lot.plus_rental = 0
                lot.plus_sale = 0
                lot.plus_count = 0
                lot.status = "insufficient_address"
                
                # Save this lot with zero metrics
                processed_lots.append(lot)
                continue
            try:
                lot = lots[i]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–π–æ–Ω –ª–æ—Ç–∞
                if not hasattr(lot, 'district') or not lot.district:
                    lot.district = calculate_district(lot.address)
                logging.info(f"–õ–æ—Ç {lot.id}: '{lot.name}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–π–æ–Ω–µ '{lot.district}'")
                
                # –ì–æ—Ç–æ–≤–∏–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –¶–ò–ê–ù
                lot_uuid = lot.uuid
                search_filter = unformatted_address_to_cian_search_filter(lot.address)
                logging.info(f"–ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: {search_filter}")
                
                # Skip CIAN parsing if the filter is for the entire Moscow or Moscow Oblast region
                if search_filter == "region=1" or search_filter == "region=4593":
                    logging.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ª–æ—Ç–∞ {lot.id}: '{lot.name}' - {search_filter}")
                    logging.warning(f"–ê–¥—Ä–µ—Å: '{lot.address}' - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¶–ò–ê–ù –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")
                    
                    # Set all metrics to zero
                    lot.market_price_per_sqm = 0.0
                    lot.current_price_per_sqm = lot.price / lot.area if lot.area > 0 else 0
                    lot.market_value = 0.0
                    lot.capitalization_rub = 0.0
                    lot.capitalization_percent = 0.0
                    lot.monthly_gap = 0.0
                    lot.annual_yield_percent = 0.0
                    lot.annual_income = 0.0
                    lot.average_rent_price_per_sqm = 0.0
                    lot.sale_offers_count = 0
                    lot.rent_offers_count = 0
                    lot.filtered_sale_offers_count = 0
                    lot.filtered_rent_offers_count = 0
                    lot.plus_rental = 0
                    lot.plus_sale = 0
                    lot.plus_count = 0
                    lot.status = "region_too_broad"
                    
                    # Save lot with zero metrics and continue to next lot
                    processed_lots.append(lot)
                    processed_indices.add(i)
                    push_lots([lot], "lots_all")
                    logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ—Ç {lot.id} —Å –Ω—É–ª–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü—É lots_all")
                    continue
                    
                # If we get here, we have a more specific filter, so continue with normal processing
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –¶–ò–ê–ù
                sale_offers, rent_offers = fetch_nearby_offers(search_filter, lot_uuid)
                logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(sale_offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ –∏ {len(rent_offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–± –∞—Ä–µ–Ω–¥–µ")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫ –ª–æ—Ç—É
                lot.sale_offers_count = len(sale_offers)
                lot.rent_offers_count = len(rent_offers)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                browser_operations += 1
                if browser_operations >= browser_refresh_interval:
                    logging.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Å–ª–µ {browser_operations} –æ–ø–µ—Ä–∞—Ü–∏–π")
                    try:
                        parser = get_parser()
                        parser.refresh_session()
                        browser_operations = 0
                        logging.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
                    except Exception as browser_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞: {browser_error}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
                if hasattr(sale_offers, 'copy'):
                    all_raw_sale = sale_offers.copy()
                else:
                    all_raw_sale = list(sale_offers)
                
                if hasattr(rent_offers, 'copy'):
                    all_raw_rent = rent_offers.copy() 
                else:
                    all_raw_rent = list(rent_offers)
                
                # –í—ã–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
                effective_radius = debug_radius if debug_radius else search_radius
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–¥–∏—É—Å, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                if not debug_radius and (len(sale_offers) < 3 or len(rent_offers) < 3) and search_radius < 10:
                    logging.info(f"–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –¥–æ 10 –∫–º –∏–∑-–∑–∞ –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                    effective_radius = 7
                    
                # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤–æ–æ–±—â–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–æ–±—ã–π —Ä–µ–∂–∏–º
                if not sale_offers and not rent_offers and not debug_radius:
                    logging.warning("‚ö†Ô∏è –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (—Ä–∞–¥–∏—É—Å 1000 –∫–º)")
                    effective_radius = 10
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –ª–æ—Ç–∞
                logging.info(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–º–∞–∫—Å. {effective_radius} –∫–º) –¥–ª—è –ª–æ—Ç–∞ {lot.id}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
                try:
                    filtered_sale_offers = await filter_offers_by_distance(lot.address, sale_offers, effective_radius)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ: {e}")
                    filtered_sale_offers = await filter_offers_without_geocoding(lot.address, sale_offers)
                
                try:
                    filtered_rent_offers = await filter_offers_by_distance(lot.address, rent_offers, effective_radius)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–± –∞—Ä–µ–Ω–¥–µ: {e}")
                    filtered_rent_offers = await filter_offers_without_geocoding(lot.address, rent_offers)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–π–æ–Ω–∞–º
                for offer in filtered_sale_offers:
                    if not hasattr(offer, 'district') or not offer.district:
                        offer.district = calculate_district(offer.address)
                    offers_by_district[offer.district].append(offer)
                    district_offer_count[offer.district] += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–∫–µ—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
                current_batch_sale.extend(filtered_sale_offers)
                current_batch_rent.extend(filtered_rent_offers)
                all_sale_offers.extend(filtered_sale_offers)
                all_rent_offers.extend(filtered_rent_offers)
                lot.filtered_sale_offers_count = len(filtered_sale_offers)
                lot.filtered_rent_offers_count = len(filtered_rent_offers)
                # –í–ê–ñ–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                # –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                calculate_lot_metrics(lot, filtered_sale_offers, filtered_rent_offers)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ GPT
                if CONFIG.get("gpt_analysis_enabled", False):
                    try:
                        lot.classification = await classify_property(lot)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ {lot.id}: {e}")
                        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                        lot.classification = PropertyClassification()
                else:
                    lot.classification = PropertyClassification()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ—Ç –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                push_lots([lot], "lots_all")
                logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ—Ç {lot.id} –≤ —Ç–∞–±–ª–∏—Ü—É lots_all")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram, –µ—Å–ª–∏ –±–æ—Ç –≤–∫–ª—é—á–µ–Ω
                if bot_service.is_enabled():
                    try:
                        await bot_service.notify_new_lots([lot])
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–æ—Ç–µ {lot.id}: {e}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ª–æ—Ç
                processed_lots.append(lot)
                processed_indices.add(i)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ Google Sheets
                if len(current_batch_sale) >= batch_size:
                    logging.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–∫–µ—Ç –∏–∑ {len(current_batch_sale)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ")
                    push_offers("cian_sale_all", current_batch_sale)
                    current_batch_sale = []
                    
                if len(current_batch_rent) >= batch_size:
                    logging.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–∫–µ—Ç –∏–∑ {len(current_batch_rent)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–± –∞—Ä–µ–Ω–¥–µ")
                    push_offers("cian_rent_all", current_batch_rent)
                    current_batch_rent = []
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
                if i % lot_save_interval == 0 or i == len(lots) - 1:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç
                    save_progress_checkpoint(
                        lots=lots,
                        processed_indices=list(processed_indices),
                        offers_by_district=dict(offers_by_district),
                        district_offer_count=dict(district_offer_count),
                        all_sale_offers=all_sale_offers,
                        all_rent_offers=all_rent_offers
                    )
                    logging.info(f"üíæ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è {len(processed_lots)} –ª–æ—Ç–æ–≤")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ—Ç–∞ {getattr(lot, 'id', 'unknown')}: {e}", exc_info=True)
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—Å—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑-–∑–∞ –æ–¥–Ω–æ–≥–æ –ª–æ—Ç–∞
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if current_batch_sale:
            logging.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è {len(current_batch_sale)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ")
            push_offers("cian_sale_all", current_batch_sale)
            
        if current_batch_rent:
            logging.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è {len(current_batch_rent)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–± –∞—Ä–µ–Ω–¥–µ")
            push_offers("cian_rent_all", current_batch_rent)

        apply_all_formatting()
        logging.info(f"üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —à–∞–≥–µ {i}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–π–æ–Ω–∞–º
        median_prices = calculate_median_prices(offers_by_district)
        
        if offers_by_district and any(len(offers) >= 2 for offers in offers_by_district.values()):
            try:
                median_prices = calculate_median_prices(offers_by_district)
                logging.info(f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –º–µ–¥–∏–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è {len(median_prices)} —Ä–∞–π–æ–Ω–æ–≤")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–µ–¥–∏–∞–Ω–Ω—ã—Ö —Ü–µ–Ω: {e}")
                median_prices = {}
        else:
            logging.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç –º–µ–¥–∏–∞–Ω–Ω—ã—Ö —Ü–µ–Ω (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)")
            median_prices = {}

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–π–æ–Ω–∞–º
        if district_offer_count and len(district_offer_count) > 0:
            try:
                logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ {len(district_offer_count)} —Ä–∞–π–æ–Ω–∞–º")
                push_district_stats(dict(district_offer_count))
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–π–æ–Ω–æ–≤: {e}")
        else:
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–≥–ª—É—à–∫—É
            logging.info("‚è≠Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–π–æ–Ω–æ–≤")
            try:
                push_district_stats({"–ú–æ—Å–∫–≤–∞": 0, "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": 0})
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–≥–ª—É—à–∫–∏: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –≤ Telegram
        if bot_service.is_enabled() and processed_lots:
            try:
                # –°—á–∏—Ç–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ª–æ—Ç—ã
                recommended_count = sum(1 for lot in processed_lots 
                                      if getattr(lot, 'annual_yield_percent', 0) >= CONFIG.get('market_yield_threshold', 10))
                
                await bot_service.send_daily_summary(len(processed_lots), recommended_count)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞: {len(processed_lots)} –ª–æ—Ç–æ–≤, {recommended_count} —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
        
        logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
    except Exception as e:
        logging.critical(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}", exc_info=True)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try:
            with open(f"crash_dump_{int(time.time())}.pkl", "wb") as f:
                pickle.dump({
                    "lots": locals().get("lots", []),
                    "offers_by_district": locals().get("offers_by_district", {}),
                    "error": str(e)
                }, f)
            logging.info("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
        except Exception as dump_error:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {dump_error}")
            
if __name__ == "__main__":
    asyncio.run(main())