import os
import math
import logging
import httpx
import asyncio
from core.models import Offer  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ Offer - —ç—Ç–æ –º–æ–¥–µ–ª—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ address –∏ distance_to_lot
from typing import Tuple, Optional, List, Dict

# Configure logging
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π
DGIS_API_KEY = os.getenv("DGIS_API_KEY", "rutnpt3272")

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
DGIS_GEOCODE_API = "https://catalog.api.2gis.com/3.0/items/geocode"
DGIS_DISTANCE_API = "https://routing.api.2gis.com/get_dist_matrix"


# –í parser/geo_utils.py –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–¥–µ–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π

def haversine_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –ó–µ–º–ª–µ (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞ –¥–ª—è —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–π —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏–∏.
    """
    # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    R = 6371.0
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
    lat1_rad = math.radians(lat1)
    lon1_rad = math.radians(lon1)
    lat2_rad = math.radians(lat2)
    lon2_rad = math.radians(lon2)
    
    # –†–∞–∑–Ω–∏—Ü—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    dlon = lon2_rad - lon1_rad
    dlat = lat2_rad - lat1_rad
    
    # –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
    a = math.sin(dlat/2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon/2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    distance = R * c
    
    return distance

async def get_coords_by_address(address: str) -> Optional[Tuple[float, float]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –∞–¥—Ä–µ—Å—É —á–µ—Ä–µ–∑ API 2GIS.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (–¥–æ–ª–≥–æ—Ç–∞, —à–∏—Ä–æ—Ç–∞) –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    if not address:
        logger.warning("get_coords_by_address: –ü—É—Å—Ç–æ–π –∞–¥—Ä–µ—Å")
        return None
    
    # –û—á–∏—â–∞–µ–º –∞–¥—Ä–µ—Å –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    clean_address = address.strip()
    for old, new in {
        "–≥.": "–≥–æ—Ä–æ–¥ ", "—É–ª.": "—É–ª–∏—Ü–∞ ", "–ø—Ä-—Ç": "–ø—Ä–æ—Å–ø–µ–∫—Ç ", "–ø—Ä.": "–ø—Ä–æ—Å–ø–µ–∫—Ç ",
        "–±-—Ä": "–±—É–ª—å–≤–∞—Ä ", "–ø–µ—Ä.": "–ø–µ—Ä–µ—É–ª–æ–∫ ", "–ø–ª.": "–ø–ª–æ—â–∞–¥—å ", "—Ä-–Ω": "—Ä–∞–π–æ–Ω "
    }.items():
        clean_address = clean_address.replace(old, new)
    
    try:
        params = {
            "q": clean_address,
            "fields": "items.point",
            "key": DGIS_API_KEY
        }
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è: '{clean_address}'")
        
        async with httpx.AsyncClient() as client:
            response = await client.get(DGIS_GEOCODE_API, params=params, timeout=10.0)
            response.raise_for_status()
            data = response.json()
            
            if data.get("meta", {}).get("code") == 200 and data.get("result", {}).get("total") > 0:
                items = data.get("result", {}).get("items", [])
                if items:
                    point = items[0].get("point")
                    if point:
                        lon, lat = point.get("lon"), point.get("lat")
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è '{clean_address}': —à–∏—Ä–æ—Ç–∞={lat}, –¥–æ–ª–≥–æ—Ç–∞={lon}")
                        return (float(lon), float(lat))
                    else:
                        logger.warning(f"‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç —Ç–æ—á–∫–∏ –¥–ª—è '{clean_address}': {items[0]}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ items –¥–ª—è '{clean_address}'")
            else:
                if "meta" in data:
                    logger.warning(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {data['meta'].get('code')} –¥–ª—è '{clean_address}'")
                    if data['meta'].get('message'):
                        logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ API: {data['meta'].get('message')}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
                if "message" in data:
                    logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: {data['message']}")
            
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è '{clean_address}'")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è '{clean_address}': {str(e)}")
        return None


# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é calculate_distance –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
async def calculate_distance(source_coords: Tuple[float, float], 
                           target_coords: Tuple[float, float]) -> Optional[float]:
    """
    –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ —á–µ—Ä–µ–∑ API 2GIS.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
        # –í —Ñ—É–Ω–∫—Ü–∏–∏ calculate_distance –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:
        source_point = f"{source_coords[0]},{source_coords[1]}"  # –ë—ã–ª–æ
        source_point = f"{source_coords[0]:.6f},{source_coords[1]:.6f}"  # –°—Ç–∞–ª–æ (—Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é)
        target_point = f"{target_coords[0]},{target_coords[1]}"  # –ë—ã–ª–æ
        target_point = f"{target_coords[0]:.6f},{target_coords[1]:.6f}"  # –°—Ç–∞–ª–æ
        
        logger.debug(f"–†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏: {source_point} ‚Üí {target_point}")
        
        params = {
            "key": DGIS_API_KEY,
            "sources": source_point,
            "targets": target_point,
            "type": "distance",
            "transport_type": "car"
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.get(DGIS_DISTANCE_API, params=params, timeout=10.0)
            response.raise_for_status()
            data = response.json()
            
            if data.get("status") == "OK" and data.get("rows"):
                # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
                distance_meters = data["rows"][0]["elements"][0]["distance"]["value"]
                distance_km = distance_meters / 1000
                logger.debug(f"API –≤–µ—Ä–Ω—É–ª —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_km:.2f} –∫–º")
                return distance_km
            
            # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            if "message" in data:
                logger.warning(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data['message']}")
            elif "error" in data:
                logger.warning(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data['error']}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {data}")
            
            # –ï—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–µ—Ä–Ω—ë–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π
            distance_km = haversine_distance(source_coords, target_coords)
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {distance_km:.2f} –∫–º")
            return distance_km
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π
        try:
            distance = haversine_distance(source_coords, target_coords)
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API: {distance:.2f} –∫–º")
            return distance
        except Exception as e2:
            logger.error(f"‚ùå –¢–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å—É: {str(e2)}")
            return None

async def filter_offers_by_distance(lot_address: str, offers: List[Offer], 
                                  max_distance_km: float) -> List[Offer]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –ª–æ—Ç–∞.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - lot_address: –ê–¥—Ä–µ—Å –ª–æ—Ç–∞ –Ω–∞ —Ç–æ—Ä–≥–∞—Ö
    - offers: –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    - max_distance_km: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    """
    logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è {len(offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ {max_distance_km} –∫–º –æ—Ç {lot_address}")
    
    if not offers:
        logger.warning("üì≠ –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        return []
    
    # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –æ—à–∏–±–∫–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–º —Ä–∞–¥–∏—É—Å–µ
    debug_mode = max_distance_km > 1000
    if debug_mode:
        logger.warning(f"‚ö†Ô∏è –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ —Å —Ä–∞–¥–∏—É—Å–æ–º {max_distance_km} –∫–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å –ª–æ—Ç–∞
    if not lot_address:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å –ª–æ—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        return offers if debug_mode else []
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–æ—Ç–∞
    lot_coords = await get_coords_by_address(lot_address)
    if not lot_coords:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ª–æ—Ç–∞ —Å –∞–¥—Ä–µ—Å–æ–º '{lot_address}'")
        if debug_mode:
            logger.warning("‚ö†Ô∏è –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            return offers
        return []
    
    logger.info(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–æ—Ç–∞: –¥–æ–ª–≥–æ—Ç–∞={lot_coords[0]}, —à–∏—Ä–æ—Ç–∞={lot_coords[1]}")
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    no_address_count = 0
    no_coords_count = 0
    rejected_by_distance_count = 0
    accepted_count = 0
    
    filtered_offers = []
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    distance_info = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    for i, offer in enumerate(offers):
        try:
            offer_id = getattr(offer, 'id', f'offer_{i}')
            
            # –ï—Å–ª–∏ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –Ω–µ—Ç –∞–¥—Ä–µ—Å–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            if not getattr(offer, 'address', None):
                no_address_count += 1
                logger.warning(f"‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ {offer_id} –Ω–µ –∏–º–µ–µ—Ç –∞–¥—Ä–µ—Å–∞")
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            offer_address = getattr(offer, 'address', '')
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {offer_id}: {offer_address}")
            
            offer_coords = await get_coords_by_address(offer_address)
            if not offer_coords:
                no_coords_count += 1
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {offer_id}")
                continue
            
            logger.info(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è {offer_id}: –¥–æ–ª–≥–æ—Ç–∞={offer_coords[0]}, —à–∏—Ä–æ—Ç–∞={offer_coords[1]}")
                
            # –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ haversine
            approx_distance = haversine_distance(lot_coords, offer_coords)
            logger.info(f"üìè –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {offer_id}: {approx_distance:.2f} –∫–º")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            distance_info.append({
                "offer_id": offer_id,
                "address": offer_address,
                "coords": offer_coords,
                "approx_distance": approx_distance
            })
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å 50%, —Ç–∞–∫ –∫–∞–∫ haversine –¥–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π, –∞ –Ω–µ –ø–æ –¥–æ—Ä–æ–≥–∞–º
            buffer_distance = max_distance_km * 1.5
            if approx_distance <= buffer_distance:
                # –î–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–µ–ª–∞–µ–º —Ç–æ—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ API
                exact_distance = await calculate_distance(lot_coords, offer_coords)
                
                if exact_distance is not None:
                    logger.info(f"üìè –¢–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {offer_id}: {exact_distance:.2f} –∫–º")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {offer_id}")
                    exact_distance = approx_distance  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ
                distance = exact_distance if exact_distance is not None else approx_distance
                
                if distance <= max_distance_km:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∞—Ç—Ä–∏–±—É—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
                    offer.distance_to_lot = distance
                    filtered_offers.append(offer)
                    accepted_count += 1
                    logger.info(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {offer_id} (–∞–¥—Ä–µ—Å: {offer_address[:50]}...) –≤–∫–ª—é—á–µ–Ω–æ: "
                                f"—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ {distance:.2f} –∫–º –æ—Ç –ª–æ—Ç–∞ (–∞–¥—Ä–µ—Å: {lot_address[:50]}...)")
                else:
                    rejected_by_distance_count += 1
                    logger.info(f"‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ {offer_id} (–∞–¥—Ä–µ—Å: {offer_address[:50]}...) –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: "
                                f"—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ {distance:.2f} –∫–º > {max_distance_km} –∫–º")
            else:
                rejected_by_distance_count += 1
                logger.info(f"‚úó –û–±—ä—è–≤–ª–µ–Ω–∏–µ {offer_id} —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ: {approx_distance:.2f} –∫–º > {buffer_distance:.2f} –∫–º (–±—É—Ñ–µ—Ä)")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {getattr(offer, 'id', 'unknown')}: {str(e)}")
            import traceback
            logger.error(traceback.format_exc())
            
    logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º –¥–ª—è –ª–æ—Ç–∞ (–∞–¥—Ä–µ—Å: {lot_address}):")
    if distance_info:
        min_dist = min(info['approx_distance'] for info in distance_info)
        max_dist = max(info['approx_distance'] for info in distance_info)
        avg_dist = sum(info['approx_distance'] for info in distance_info) / len(distance_info)
        
        logger.info(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {min_dist:.2f} –∫–º")
        logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {max_dist:.2f} –∫–º")
        logger.info(f"–°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {avg_dist:.2f} –∫–º")
    
    # –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é {max_distance_km} –∫–º:")
    logger.info(f"  ‚Ä¢ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(offers)}")
    logger.info(f"  ‚Ä¢ –ë–µ–∑ –∞–¥—Ä–µ—Å–∞: {no_address_count}")
    logger.info(f"  ‚Ä¢ –ë–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {no_coords_count}")
    logger.info(f"  ‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é: {rejected_by_distance_count}")
    logger.info(f"  ‚Ä¢ –ü–†–ò–ù–Ø–¢–û: {accepted_count}")
    
    if not filtered_offers and distance_info:
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –±–ª–∏–∂–∞–π—à–∏—Ö
        distance_info.sort(key=lambda x: x['approx_distance'])
        logger.warning("‚ö†Ô∏è –ù–ò –û–î–ù–û –û–ë–™–Ø–í–õ–ï–ù–ò–ï –ù–ï –ü–†–û–®–õ–û –§–ò–õ–¨–¢–†! 10 –±–ª–∏–∂–∞–π—à–∏—Ö:")
        for i, info in enumerate(distance_info[:10]):
            logger.warning(f"  {i+1}. ID: {info['offer_id']}, "
                         f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {info['approx_distance']:.2f} –∫–º, "
                         f"–ê–¥—Ä–µ—Å: {info['address']}")
            
        # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –≤–µ—Ä–Ω–µ–º –ø–µ—Ä–≤—ã–µ 5 –±–ª–∏–∂–∞–π—à–∏—Ö
        if debug_mode and distance_info:
            logger.warning("‚ö†Ô∏è –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 5 –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            closest_offers = []
            for i, info in enumerate(distance_info[:5]):
                for offer in offers:
                    if getattr(offer, 'id', '') == info['offer_id']:
                        offer.distance_to_lot = info['approx_distance']
                        closest_offers.append(offer)
                        break
            if closest_offers:
                return closest_offers
    
    return filtered_offers