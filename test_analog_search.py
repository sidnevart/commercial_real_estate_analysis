#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ –ø–æ UUID –ª–æ—Ç–∞
"""
import asyncio
import logging
from parser.google_sheets import find_lot_by_uuid, find_analogs_in_sheets
from bot.analog_search import AnalogSearchService

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_analog_search_by_uuid():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ –ø–æ UUID"""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ª–æ—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
    print("üîç –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ª–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        from parser.google_sheets import _svc, GSHEET_ID
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        result = _svc.spreadsheets().values().get(
            spreadsheetId=GSHEET_ID,
            range="lots_all!A2:R10"  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 9 –ª–æ—Ç–æ–≤ (—Å—Ç—Ä–æ–∫–∏ 2-10)
        ).execute()
        
        values = result.get('values', [])
        if not values:
            print("‚ùå –í —Ç–∞–±–ª–∏—Ü–µ lots_all –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(values)} –ª–æ—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ")
        
        # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ—Ç–æ–≤ —Å UUID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_lots = []
        
        for i, row in enumerate(values):
            if len(row) > 17 and row[17]:  # –ö–æ–ª–æ–Ω–∫–∞ R - UUID
                lot_info = {
                    'uuid': row[17],
                    'name': row[1] if len(row) > 1 else '',
                    'address': row[2] if len(row) > 2 else '',
                    'area': row[5] if len(row) > 5 else '',
                }
                test_lots.append(lot_info)
                print(f"üìù –õ–æ—Ç #{i+1}: {lot_info['name'][:50]} (UUID: {lot_info['uuid'][:8]}...)")
        
        if not test_lots:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤ —Å UUID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        print(f"\nüîÑ –ë—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å {len(test_lots)} –ª–æ—Ç–æ–≤...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ª–æ—Ç, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –∞–Ω–∞–ª–æ–≥–∏
        for test_num, lot_info in enumerate(test_lots, 1):
            test_lot_uuid = lot_info['uuid']
            
            print(f"\n{'='*60}")
            print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–¢–ê #{test_num}")
            print(f"UUID: {test_lot_uuid}")
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {lot_info['name'][:50]}...")
            print(f"–ê–¥—Ä–µ—Å: {lot_info['address']}")
            print(f"{'='*60}")
            
            # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ª–æ—Ç–∞ –ø–æ UUID
            print(f"\n1Ô∏è‚É£ –ü–æ–∏—Å–∫ –ª–æ—Ç–∞ –ø–æ UUID...")
            lot = find_lot_by_uuid(test_lot_uuid)
            if lot:
                print(f"‚úÖ –õ–æ—Ç –Ω–∞–π–¥–µ–Ω:")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {lot.name}")
                print(f"   –ê–¥—Ä–µ—Å: {lot.address}")
                print(f"   –ü–ª–æ—â–∞–¥—å: {lot.area} –º¬≤")
            else:
                print(f"‚ùå –õ–æ—Ç —Å UUID {test_lot_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ª–æ—Ç—É
            
            # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ –≤ Google Sheets
            print(f"\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ –≤ Google Sheets...")
            analogs = find_analogs_in_sheets(test_lot_uuid)
            if analogs:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(analogs)} –∞–Ω–∞–ª–æ–≥–æ–≤ –≤ Google Sheets:")
                for i, analog in enumerate(analogs[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"   {i}. {analog.address} - {analog.price:,.0f} ‚ÇΩ ({analog.area} –º¬≤)")
                if len(analogs) > 3:
                    print(f"   ... –∏ –µ—â–µ {len(analogs) - 3} –∞–Ω–∞–ª–æ–≥–æ–≤")
            else:
                print(f"‚ö†Ô∏è  –ê–Ω–∞–ª–æ–≥–∏ –≤ Google Sheets –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            print(f"\n3Ô∏è‚É£ –ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ (—Å fallback)...")
            all_analogs = await AnalogSearchService.find_analogs_for_lot_uuid(test_lot_uuid)
            if all_analogs:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_analogs)} –∞–Ω–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å:")
                for i, analog in enumerate(all_analogs[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    distance_info = f" ({analog.distance_to_lot:.1f} –∫–º)" if analog.distance_to_lot > 0 else ""
                    print(f"   {i}. {analog.address} - {analog.price:,.0f} ‚ÇΩ ({analog.area} –º¬≤){distance_info}")
                if len(all_analogs) > 3:
                    print(f"   ... –∏ –µ—â–µ {len(all_analogs) - 3} –∞–Ω–∞–ª–æ–≥–æ–≤")
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∞–Ω–∞–ª–æ–≥–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω—ã –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è –ª–æ—Ç–∞ #{test_num}!")
                break
            else:
                print(f"‚ö†Ô∏è  –ê–Ω–∞–ª–æ–≥–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            if test_num < len(test_lots):
                print(f"\n‚û°Ô∏è  –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ª–æ—Ç—É...")
        
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_analog_search_by_uuid())
